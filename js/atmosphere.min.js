.pragma library
var DEBUG=!1;
function ajax(a){var c=a.url,d=a.data,f=a.contentType,g=a.headers,e=a.success,h=a.error,b=new XMLHttpRequest;b.open(a.type||"GET",c,!0);f&&b.setRequestHeader("Content-Type",f);d&&b.setRequestHeader("Content-Length",d.length);if(g)for(var k in g)b.setRequestHeader(k,g[k]);b.onreadystatechange=function(){switch(b.readyState){case XMLHttpRequest.DONE:switch(b.status){case 200:e&&e(b.responseText,b);break;default:DEBUG&&console.log("ajax.js: error status =",b.status),h&&h(b)}}};DEBUG&&console.log("ajax.js: send url =",c);
d?b.send(d):b.send();return b}function bind(a,c){return function(){return a.apply(c,arguments)}}function extend(a,c){if(c)for(var d in c)a[d]=c[d];return a}var defaultToWhiteSpace=function(a){return null==a?"\\s":a.source?a.source:"["+_s.escapeRegExp(a)+"]"};function ltrim(a,c){if(null==a)return"";c=defaultToWhiteSpace(c);return String(a).replace(new RegExp("^"+c+"+"),"")}function param(a){var c="",d;for(d in a)c&&(c+="&"),c+=d+"="+a[d];return c}
var Comet=function(){function a(a,b){for(var c in e)this[c]=bind(this[c],this);this.url=a;this.trackingId=0;this.state="disconnected";this.reconnectCount=0;this.maxReconnectCount=5;this.onMessage=function(b,a){};this.onMessagePublished=function(b,a){};this.onConnect=function(b){};this.onDisconnect=function(b){};this.onReconnect=function(b){};this.onError=function(b,a){};this.reconnectTimer=b}var c={"X-atmo-protocol":"true","X-Cache-Date":"0","X-Atmosphere-Framework":"2.1.2-jquery","Content-Type":"application/json",
"X-Atmosphere-Transport":"long-polling"},d={"X-Atmosphere-Transport":"close"},f={Connection:"keep-alive","Content-Type":"application/json"},g={"X-Requested-With":"XMLHttpRequest",Connection:"keep-alive"},e=[];e.push("connect");a.prototype.connect=function(){if("connected"!=this.state){DEBUG&&console.log("atmosphere: connect enter");var a={"X-Atmosphere-tracking-id":0};a._=(new Date).getTime();extend(a,c);a=this.url+"?"+param(a);return ajax({url:a,headers:f,error:bind(function(b){this.onError(b,"connect error")},
this),success:bind(function(b,a){if(b){b=ltrim(b);var c=b.split("|")[0];if(c){this.trackingId=c;DEBUG&&console.log("atmosphere: connected");this.onConnect(a);this.state="connected";this.pop();return}}this.onError(a,"connect error: invalid response data: "+b)},this)})}};e.push("disconnect");a.prototype.disconnect=function(){if("disconnected"!=this.state){this.state="disconnected";DEBUG&&console.log("atmosphere: disconnect enter");var a={};a["X-Atmosphere-tracking-id"]=this.trackingId;a._=(new Date).getTime();
extend(a,d);a=this.url+"?"+param(a);return ajax({url:a,headers:g,error:bind(function(a){this.onError(a,"disconnect error");DEBUG&&console.log("atmosphere: disconnected");this.onDisconnect(a)},this),success:bind(function(a,c){if(c.getResponseHeader("X-Atmosphere-tracking-id")!=this.trackingId)this.onError(c,"disconnect error: mismatched tracking ID");DEBUG&&console.log("atmosphere: disconnected");this.onDisconnect(c)},this)})}};e.push("push");a.prototype.push=function(a){if("connected"==this.state){DEBUG&&
console.log("atmosphere: push enter");var b={};b["X-Atmosphere-tracking-id"]=this.trackingId;b._=(new Date).getTime();extend(b,c);b=this.url+"?"+param(b);return ajax({url:b,type:"POST",data:a,error:bind(function(a){this.onError(a,"push error")},this),success:bind(function(a,b){DEBUG&&console.log("atmosphere: message published");this.onMessagePublished(b,a)},this)})}};e.push("pop");a.prototype.pop=function(){if("connected"==this.state){DEBUG&&console.log("atmosphere: pop enter");var a={};a["X-Atmosphere-tracking-id"]=
this.trackingId;a._=(new Date).getTime();extend(a,c);a=this.url+"?"+param(a);return ajax({url:a,headers:f,error:bind(function(a){this.onError(a,"pop error");"connected"==this.state&&this.reconnectCount<this.maxReconnectCount?(this.reconnectCount++,DEBUG&&console.log("atmosphere: reconnect",this.reconnectCount,"/",this.maxReconnectCount),this.onReconnect(a),this.reconnectTimer?this.reconnectTimer.start():this.reconnect()):this.disconnect()},this),success:bind(function(a,c){"connected"==this.state&&
(a=ltrim(a),DEBUG&&console.log("atmosphere: message: data =",a),this.onMessage(c,a),this.pop())},this)})}};e.push("reconnect");a.prototype.reconnect=function(){return this.pop()};return a}();function subscribe(a){return new Comet(a)};
