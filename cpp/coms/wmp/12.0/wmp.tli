// Created by Microsoft (R) C/C++ Compiler Version 10.00.30319.01 (f1358fce).
//
// c:\tmp\build-sakura-desktop-release\cpp\tests\wmptest\release\wmp.tli
//
// Wrapper implementations for Win32 type library wmp.dll
// compiler-generated file created 10/02/14 at 00:21:22 - DO NOT EDIT!


//
// interface IWMPSyncDevice wrapper method implementations
//

#pragma implementation_key(1)
inline _bstr_t IWMPSyncDevice::GetfriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_friendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2)
inline void IWMPSyncDevice::PutfriendlyName ( _bstr_t pbstrName ) {
    HRESULT _hr = put_friendlyName(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3)
inline _bstr_t IWMPSyncDevice::GetdeviceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_deviceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4)
inline _bstr_t IWMPSyncDevice::GetdeviceId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_deviceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5)
inline long IWMPSyncDevice::GetpartnershipIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_partnershipIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline VARIANT_BOOL IWMPSyncDevice::Getconnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_connected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7)
inline enum WMPDeviceStatus IWMPSyncDevice::Getstatus ( ) {
    enum WMPDeviceStatus _result;
    HRESULT _hr = get_status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline enum WMPSyncState IWMPSyncDevice::GetsyncState ( ) {
    enum WMPSyncState _result;
    HRESULT _hr = get_syncState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(9)
inline long IWMPSyncDevice::Getprogress ( ) {
    long _result = 0;
    HRESULT _hr = get_progress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline _bstr_t IWMPSyncDevice::IgetItemInfo ( _bstr_t bstrItemName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getItemInfo(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(11)
inline HRESULT IWMPSyncDevice::IcreatePartnership ( VARIANT_BOOL vbShowUI ) {
    HRESULT _hr = raw_createPartnership(vbShowUI);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(12)
inline HRESULT IWMPSyncDevice::IdeletePartnership ( ) {
    HRESULT _hr = raw_deletePartnership();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(13)
inline HRESULT IWMPSyncDevice::IStart ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(14)
inline HRESULT IWMPSyncDevice::Istop ( ) {
    HRESULT _hr = raw_stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(15)
inline HRESULT IWMPSyncDevice::IshowSettings ( ) {
    HRESULT _hr = raw_showSettings();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(16)
inline VARIANT_BOOL IWMPSyncDevice::IisIdentical ( struct IWMPSyncDevice * pDevice ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isIdentical(pDevice, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPCdromRip wrapper method implementations
//

#pragma implementation_key(17)
inline enum WMPRipState IWMPCdromRip::GetripState ( ) {
    enum WMPRipState _result;
    HRESULT _hr = get_ripState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(18)
inline long IWMPCdromRip::GetripProgress ( ) {
    long _result = 0;
    HRESULT _hr = get_ripProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(19)
inline HRESULT IWMPCdromRip::IstartRip ( ) {
    HRESULT _hr = raw_startRip();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(20)
inline HRESULT IWMPCdromRip::IstopRip ( ) {
    HRESULT _hr = raw_stopRip();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPStringCollection wrapper method implementations
//

#pragma implementation_key(21)
inline long IWMPStringCollection::Getcount ( ) {
    long _result = 0;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(22)
inline _bstr_t IWMPStringCollection::IItem ( long lIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface _WMPOCXEvents wrapper method implementations
//

#pragma implementation_key(23)
inline HRESULT _WMPOCXEvents::IOpenStateChange ( long NewState ) {
    return _com_dispatch_method(this, 0x1389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewState);
}

#pragma implementation_key(24)
inline HRESULT _WMPOCXEvents::IPlayStateChange ( long NewState ) {
    return _com_dispatch_method(this, 0x13ed, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewState);
}

#pragma implementation_key(25)
inline HRESULT _WMPOCXEvents::IAudioLanguageChange ( long LangID ) {
    return _com_dispatch_method(this, 0x13ee, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", LangID);
}

#pragma implementation_key(26)
inline HRESULT _WMPOCXEvents::IStatusChange ( ) {
    return _com_dispatch_method(this, 0x138a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(27)
inline HRESULT _WMPOCXEvents::IScriptCommand ( _bstr_t scType, _bstr_t Param ) {
    return _com_dispatch_method(this, 0x14b5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)scType, (BSTR)Param);
}

#pragma implementation_key(28)
inline HRESULT _WMPOCXEvents::INewStream ( ) {
    return _com_dispatch_method(this, 0x151b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(29)
inline HRESULT _WMPOCXEvents::IDisconnect ( long Result ) {
    return _com_dispatch_method(this, 0x1519, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Result);
}

#pragma implementation_key(30)
inline HRESULT _WMPOCXEvents::IBuffering ( VARIANT_BOOL Start ) {
    return _com_dispatch_method(this, 0x151a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b", Start);
}

#pragma implementation_key(31)
inline HRESULT _WMPOCXEvents::IError ( ) {
    return _com_dispatch_method(this, 0x157d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(32)
inline HRESULT _WMPOCXEvents::IWarning ( long WarningType, long Param, _bstr_t Description ) {
    return _com_dispatch_method(this, 0x15e1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0008", WarningType, Param, (BSTR)Description);
}

#pragma implementation_key(33)
inline HRESULT _WMPOCXEvents::IEndOfStream ( long Result ) {
    return _com_dispatch_method(this, 0x1451, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Result);
}

#pragma implementation_key(34)
inline HRESULT _WMPOCXEvents::IPositionChange ( double oldPosition, double newPosition ) {
    return _com_dispatch_method(this, 0x1452, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005", oldPosition, newPosition);
}

#pragma implementation_key(35)
inline HRESULT _WMPOCXEvents::IMarkerHit ( long MarkerNum ) {
    return _com_dispatch_method(this, 0x1453, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", MarkerNum);
}

#pragma implementation_key(36)
inline HRESULT _WMPOCXEvents::IDurationUnitChange ( long NewDurationUnit ) {
    return _com_dispatch_method(this, 0x1454, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewDurationUnit);
}

#pragma implementation_key(37)
inline HRESULT _WMPOCXEvents::ICdromMediaChange ( long CdromNum ) {
    return _com_dispatch_method(this, 0x1645, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", CdromNum);
}

#pragma implementation_key(38)
inline HRESULT _WMPOCXEvents::IPlaylistChange ( IDispatch * Playlist, enum WMPPlaylistChangeEventType change ) {
    return _com_dispatch_method(this, 0x16a9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", Playlist, change);
}

#pragma implementation_key(39)
inline HRESULT _WMPOCXEvents::ICurrentPlaylistChange ( enum WMPPlaylistChangeEventType change ) {
    return _com_dispatch_method(this, 0x16ac, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", change);
}

#pragma implementation_key(40)
inline HRESULT _WMPOCXEvents::ICurrentPlaylistItemAvailable ( _bstr_t bstrItemName ) {
    return _com_dispatch_method(this, 0x16ad, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrItemName);
}

#pragma implementation_key(41)
inline HRESULT _WMPOCXEvents::IMediaChange ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x16aa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(42)
inline HRESULT _WMPOCXEvents::ICurrentMediaItemAvailable ( _bstr_t bstrItemName ) {
    return _com_dispatch_method(this, 0x16ab, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrItemName);
}

#pragma implementation_key(43)
inline HRESULT _WMPOCXEvents::ICurrentItemChange ( IDispatch * pdispMedia ) {
    return _com_dispatch_method(this, 0x16ae, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pdispMedia);
}

#pragma implementation_key(44)
inline HRESULT _WMPOCXEvents::IMediaCollectionChange ( ) {
    return _com_dispatch_method(this, 0x16af, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(45)
inline HRESULT _WMPOCXEvents::IMediaCollectionAttributeStringAdded ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal ) {
    return _com_dispatch_method(this, 0x16b0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrAttribVal);
}

#pragma implementation_key(46)
inline HRESULT _WMPOCXEvents::IMediaCollectionAttributeStringRemoved ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal ) {
    return _com_dispatch_method(this, 0x16b1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrAttribVal);
}

#pragma implementation_key(47)
inline HRESULT _WMPOCXEvents::IMediaCollectionAttributeStringChanged ( _bstr_t bstrAttribName, _bstr_t bstrOldAttribVal, _bstr_t bstrNewAttribVal ) {
    return _com_dispatch_method(this, 0x16bc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrOldAttribVal, (BSTR)bstrNewAttribVal);
}

#pragma implementation_key(48)
inline HRESULT _WMPOCXEvents::IPlaylistCollectionChange ( ) {
    return _com_dispatch_method(this, 0x16b2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(49)
inline HRESULT _WMPOCXEvents::IPlaylistCollectionPlaylistAdded ( _bstr_t bstrPlaylistName ) {
    return _com_dispatch_method(this, 0x16b3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrPlaylistName);
}

#pragma implementation_key(50)
inline HRESULT _WMPOCXEvents::IPlaylistCollectionPlaylistRemoved ( _bstr_t bstrPlaylistName ) {
    return _com_dispatch_method(this, 0x16b4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrPlaylistName);
}

#pragma implementation_key(51)
inline HRESULT _WMPOCXEvents::IPlaylistCollectionPlaylistSetAsDeleted ( _bstr_t bstrPlaylistName, VARIANT_BOOL varfIsDeleted ) {
    return _com_dispatch_method(this, 0x16ba, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x000b", (BSTR)bstrPlaylistName, varfIsDeleted);
}

#pragma implementation_key(52)
inline HRESULT _WMPOCXEvents::IModeChange ( _bstr_t ModeName, VARIANT_BOOL NewValue ) {
    return _com_dispatch_method(this, 0x16bb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x000b", (BSTR)ModeName, NewValue);
}

#pragma implementation_key(53)
inline HRESULT _WMPOCXEvents::IMediaError ( IDispatch * pMediaObject ) {
    return _com_dispatch_method(this, 0x16bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pMediaObject);
}

#pragma implementation_key(54)
inline HRESULT _WMPOCXEvents::IOpenPlaylistSwitch ( IDispatch * pItem ) {
    return _com_dispatch_method(this, 0x16bf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pItem);
}

#pragma implementation_key(55)
inline HRESULT _WMPOCXEvents::IDomainChange ( _bstr_t strDomain ) {
    return _com_dispatch_method(this, 0x16be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)strDomain);
}

#pragma implementation_key(56)
inline HRESULT _WMPOCXEvents::ISwitchedToPlayerApplication ( ) {
    return _com_dispatch_method(this, 0x1965, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(57)
inline HRESULT _WMPOCXEvents::ISwitchedToControl ( ) {
    return _com_dispatch_method(this, 0x1966, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(58)
inline HRESULT _WMPOCXEvents::IPlayerDockedStateChange ( ) {
    return _com_dispatch_method(this, 0x1967, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(59)
inline HRESULT _WMPOCXEvents::IPlayerReconnect ( ) {
    return _com_dispatch_method(this, 0x1968, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(60)
inline HRESULT _WMPOCXEvents::IClick ( short nButton, short nShiftState, long fX, long fY ) {
    return _com_dispatch_method(this, 0x1969, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", nButton, nShiftState, fX, fY);
}

#pragma implementation_key(61)
inline HRESULT _WMPOCXEvents::IDoubleClick ( short nButton, short nShiftState, long fX, long fY ) {
    return _com_dispatch_method(this, 0x196a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", nButton, nShiftState, fX, fY);
}

#pragma implementation_key(62)
inline HRESULT _WMPOCXEvents::IKeyDown ( short nKeyCode, short nShiftState ) {
    return _com_dispatch_method(this, 0x196b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002", nKeyCode, nShiftState);
}

#pragma implementation_key(63)
inline HRESULT _WMPOCXEvents::IKeyPress ( short nKeyAscii ) {
    return _com_dispatch_method(this, 0x196c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002", nKeyAscii);
}

#pragma implementation_key(64)
inline HRESULT _WMPOCXEvents::IKeyUp ( short nKeyCode, short nShiftState ) {
    return _com_dispatch_method(this, 0x196d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002", nKeyCode, nShiftState);
}

#pragma implementation_key(65)
inline HRESULT _WMPOCXEvents::IMouseDown ( short nButton, short nShiftState, long fX, long fY ) {
    return _com_dispatch_method(this, 0x196e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", nButton, nShiftState, fX, fY);
}

#pragma implementation_key(66)
inline HRESULT _WMPOCXEvents::IMouseMove ( short nButton, short nShiftState, long fX, long fY ) {
    return _com_dispatch_method(this, 0x196f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", nButton, nShiftState, fX, fY);
}

#pragma implementation_key(67)
inline HRESULT _WMPOCXEvents::IMouseUp ( short nButton, short nShiftState, long fX, long fY ) {
    return _com_dispatch_method(this, 0x1970, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", nButton, nShiftState, fX, fY);
}

#pragma implementation_key(68)
inline HRESULT _WMPOCXEvents::IDeviceConnect ( struct IWMPSyncDevice * pDevice ) {
    return _com_dispatch_method(this, 0x1971, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d", pDevice);
}

#pragma implementation_key(69)
inline HRESULT _WMPOCXEvents::IDeviceDisconnect ( struct IWMPSyncDevice * pDevice ) {
    return _com_dispatch_method(this, 0x1972, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d", pDevice);
}

#pragma implementation_key(70)
inline HRESULT _WMPOCXEvents::IDeviceStatusChange ( struct IWMPSyncDevice * pDevice, enum WMPDeviceStatus NewStatus ) {
    return _com_dispatch_method(this, 0x1973, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x0003", pDevice, NewStatus);
}

#pragma implementation_key(71)
inline HRESULT _WMPOCXEvents::IDeviceSyncStateChange ( struct IWMPSyncDevice * pDevice, enum WMPSyncState NewState ) {
    return _com_dispatch_method(this, 0x1974, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x0003", pDevice, NewState);
}

#pragma implementation_key(72)
inline HRESULT _WMPOCXEvents::IDeviceSyncError ( struct IWMPSyncDevice * pDevice, IDispatch * pMedia ) {
    return _com_dispatch_method(this, 0x1975, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x0009", pDevice, pMedia);
}

#pragma implementation_key(73)
inline HRESULT _WMPOCXEvents::ICreatePartnershipComplete ( struct IWMPSyncDevice * pDevice, HRESULT hrResult ) {
    return _com_dispatch_method(this, 0x1976, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x000a", pDevice, hrResult);
}

#pragma implementation_key(74)
inline HRESULT _WMPOCXEvents::IDeviceEstimation ( struct IWMPSyncDevice * pDevice, HRESULT hrResult, __int64 qwEstimatedUsedSpace, __int64 qwEstimatedSpace ) {
    return _com_dispatch_method(this, 0x197f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x000a\x0014\x0014", pDevice, hrResult, qwEstimatedUsedSpace, qwEstimatedSpace);
}

#pragma implementation_key(75)
inline HRESULT _WMPOCXEvents::ICdromRipStateChange ( struct IWMPCdromRip * pCdromRip, enum WMPRipState wmprs ) {
    return _com_dispatch_method(this, 0x1977, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x0003", pCdromRip, wmprs);
}

#pragma implementation_key(76)
inline HRESULT _WMPOCXEvents::ICdromRipMediaError ( struct IWMPCdromRip * pCdromRip, IDispatch * pMedia ) {
    return _com_dispatch_method(this, 0x1978, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x0009", pCdromRip, pMedia);
}

#pragma implementation_key(77)
inline HRESULT _WMPOCXEvents::ICdromBurnStateChange ( struct IWMPCdromBurn * pCdromBurn, enum WMPBurnState wmpbs ) {
    return _com_dispatch_method(this, 0x1979, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x0003", pCdromBurn, wmpbs);
}

#pragma implementation_key(78)
inline HRESULT _WMPOCXEvents::ICdromBurnMediaError ( struct IWMPCdromBurn * pCdromBurn, IDispatch * pMedia ) {
    return _com_dispatch_method(this, 0x197a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x0009", pCdromBurn, pMedia);
}

#pragma implementation_key(79)
inline HRESULT _WMPOCXEvents::ICdromBurnError ( struct IWMPCdromBurn * pCdromBurn, HRESULT hrError ) {
    return _com_dispatch_method(this, 0x197b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x000a", pCdromBurn, hrError);
}

#pragma implementation_key(80)
inline HRESULT _WMPOCXEvents::ILibraryConnect ( struct IWMPLibrary * pLibrary ) {
    return _com_dispatch_method(this, 0x197c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d", pLibrary);
}

#pragma implementation_key(81)
inline HRESULT _WMPOCXEvents::ILibraryDisconnect ( struct IWMPLibrary * pLibrary ) {
    return _com_dispatch_method(this, 0x197d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d", pLibrary);
}

#pragma implementation_key(82)
inline HRESULT _WMPOCXEvents::IFolderScanStateChange ( enum WMPFolderScanState wmpfss ) {
    return _com_dispatch_method(this, 0x197e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", wmpfss);
}

#pragma implementation_key(83)
inline HRESULT _WMPOCXEvents::IStringCollectionChange ( IDispatch * pdispStringCollection, enum WMPStringCollectionChangeEventType change, long lCollectionIndex ) {
    return _com_dispatch_method(this, 0x16c0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", pdispStringCollection, change, lCollectionIndex);
}

#pragma implementation_key(84)
inline HRESULT _WMPOCXEvents::IMediaCollectionMediaAdded ( IDispatch * pdispMedia ) {
    return _com_dispatch_method(this, 0x16c1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pdispMedia);
}

#pragma implementation_key(85)
inline HRESULT _WMPOCXEvents::IMediaCollectionMediaRemoved ( IDispatch * pdispMedia ) {
    return _com_dispatch_method(this, 0x16c2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pdispMedia);
}

//
// interface IWMPSettings wrapper method implementations
//

#pragma implementation_key(86)
inline VARIANT_BOOL IWMPSettings::GetisAvailable ( _bstr_t bstrItem ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isAvailable(bstrItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(87)
inline VARIANT_BOOL IWMPSettings::GetautoStart ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_autoStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(88)
inline void IWMPSettings::PutautoStart ( VARIANT_BOOL pfAutoStart ) {
    HRESULT _hr = put_autoStart(pfAutoStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(89)
inline _bstr_t IWMPSettings::GetbaseURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_baseURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(90)
inline void IWMPSettings::PutbaseURL ( _bstr_t pbstrBaseURL ) {
    HRESULT _hr = put_baseURL(pbstrBaseURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(91)
inline _bstr_t IWMPSettings::GetdefaultFrame ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_defaultFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(92)
inline void IWMPSettings::PutdefaultFrame ( _bstr_t pbstrDefaultFrame ) {
    HRESULT _hr = put_defaultFrame(pbstrDefaultFrame);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(93)
inline VARIANT_BOOL IWMPSettings::GetinvokeURLs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_invokeURLs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline void IWMPSettings::PutinvokeURLs ( VARIANT_BOOL pfInvokeURLs ) {
    HRESULT _hr = put_invokeURLs(pfInvokeURLs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(95)
inline VARIANT_BOOL IWMPSettings::Getmute ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_mute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(96)
inline void IWMPSettings::Putmute ( VARIANT_BOOL pfMute ) {
    HRESULT _hr = put_mute(pfMute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(97)
inline long IWMPSettings::GetplayCount ( ) {
    long _result = 0;
    HRESULT _hr = get_playCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(98)
inline void IWMPSettings::PutplayCount ( long plCount ) {
    HRESULT _hr = put_playCount(plCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(99)
inline double IWMPSettings::Getrate ( ) {
    double _result = 0;
    HRESULT _hr = get_rate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(100)
inline void IWMPSettings::Putrate ( double pdRate ) {
    HRESULT _hr = put_rate(pdRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(101)
inline long IWMPSettings::Getbalance ( ) {
    long _result = 0;
    HRESULT _hr = get_balance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(102)
inline void IWMPSettings::Putbalance ( long plBalance ) {
    HRESULT _hr = put_balance(plBalance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(103)
inline long IWMPSettings::Getvolume ( ) {
    long _result = 0;
    HRESULT _hr = get_volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(104)
inline void IWMPSettings::Putvolume ( long plVolume ) {
    HRESULT _hr = put_volume(plVolume);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(105)
inline VARIANT_BOOL IWMPSettings::IgetMode ( _bstr_t bstrMode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_getMode(bstrMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(106)
inline HRESULT IWMPSettings::IsetMode ( _bstr_t bstrMode, VARIANT_BOOL varfMode ) {
    HRESULT _hr = raw_setMode(bstrMode, varfMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(107)
inline VARIANT_BOOL IWMPSettings::GetenableErrorDialogs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enableErrorDialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(108)
inline void IWMPSettings::PutenableErrorDialogs ( VARIANT_BOOL pfEnableErrorDialogs ) {
    HRESULT _hr = put_enableErrorDialogs(pfEnableErrorDialogs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPNetwork wrapper method implementations
//

#pragma implementation_key(109)
inline long IWMPNetwork::GetbandWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_bandWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(110)
inline long IWMPNetwork::GetrecoveredPackets ( ) {
    long _result = 0;
    HRESULT _hr = get_recoveredPackets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(111)
inline _bstr_t IWMPNetwork::GetsourceProtocol ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_sourceProtocol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(112)
inline long IWMPNetwork::GetreceivedPackets ( ) {
    long _result = 0;
    HRESULT _hr = get_receivedPackets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(113)
inline long IWMPNetwork::GetlostPackets ( ) {
    long _result = 0;
    HRESULT _hr = get_lostPackets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline long IWMPNetwork::GetreceptionQuality ( ) {
    long _result = 0;
    HRESULT _hr = get_receptionQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(115)
inline long IWMPNetwork::GetbufferingCount ( ) {
    long _result = 0;
    HRESULT _hr = get_bufferingCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline long IWMPNetwork::GetbufferingProgress ( ) {
    long _result = 0;
    HRESULT _hr = get_bufferingProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(117)
inline long IWMPNetwork::GetbufferingTime ( ) {
    long _result = 0;
    HRESULT _hr = get_bufferingTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(118)
inline void IWMPNetwork::PutbufferingTime ( long plBufferingTime ) {
    HRESULT _hr = put_bufferingTime(plBufferingTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(119)
inline long IWMPNetwork::GetframeRate ( ) {
    long _result = 0;
    HRESULT _hr = get_frameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(120)
inline long IWMPNetwork::GetmaxBitRate ( ) {
    long _result = 0;
    HRESULT _hr = get_maxBitRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(121)
inline long IWMPNetwork::GetbitRate ( ) {
    long _result = 0;
    HRESULT _hr = get_bitRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(122)
inline long IWMPNetwork::IgetProxySettings ( _bstr_t bstrProtocol ) {
    long _result = 0;
    HRESULT _hr = raw_getProxySettings(bstrProtocol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(123)
inline HRESULT IWMPNetwork::IsetProxySettings ( _bstr_t bstrProtocol, long lProxySetting ) {
    HRESULT _hr = raw_setProxySettings(bstrProtocol, lProxySetting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(124)
inline _bstr_t IWMPNetwork::IgetProxyName ( _bstr_t bstrProtocol ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getProxyName(bstrProtocol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(125)
inline HRESULT IWMPNetwork::IsetProxyName ( _bstr_t bstrProtocol, _bstr_t bstrProxyName ) {
    HRESULT _hr = raw_setProxyName(bstrProtocol, bstrProxyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(126)
inline long IWMPNetwork::IgetProxyPort ( _bstr_t bstrProtocol ) {
    long _result = 0;
    HRESULT _hr = raw_getProxyPort(bstrProtocol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline HRESULT IWMPNetwork::IsetProxyPort ( _bstr_t bstrProtocol, long lProxyPort ) {
    HRESULT _hr = raw_setProxyPort(bstrProtocol, lProxyPort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(128)
inline _bstr_t IWMPNetwork::IgetProxyExceptionList ( _bstr_t bstrProtocol ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getProxyExceptionList(bstrProtocol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(129)
inline HRESULT IWMPNetwork::IsetProxyExceptionList ( _bstr_t bstrProtocol, _bstr_t pbstrExceptionList ) {
    HRESULT _hr = raw_setProxyExceptionList(bstrProtocol, pbstrExceptionList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(130)
inline VARIANT_BOOL IWMPNetwork::IgetProxyBypassForLocal ( _bstr_t bstrProtocol ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_getProxyBypassForLocal(bstrProtocol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline HRESULT IWMPNetwork::IsetProxyBypassForLocal ( _bstr_t bstrProtocol, VARIANT_BOOL fBypassForLocal ) {
    HRESULT _hr = raw_setProxyBypassForLocal(bstrProtocol, fBypassForLocal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(132)
inline long IWMPNetwork::GetmaxBandwidth ( ) {
    long _result = 0;
    HRESULT _hr = get_maxBandwidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline void IWMPNetwork::PutmaxBandwidth ( long lMaxBandwidth ) {
    HRESULT _hr = put_maxBandwidth(lMaxBandwidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(134)
inline long IWMPNetwork::GetdownloadProgress ( ) {
    long _result = 0;
    HRESULT _hr = get_downloadProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline long IWMPNetwork::GetencodedFrameRate ( ) {
    long _result = 0;
    HRESULT _hr = get_encodedFrameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(136)
inline long IWMPNetwork::GetframesSkipped ( ) {
    long _result = 0;
    HRESULT _hr = get_framesSkipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPClosedCaption wrapper method implementations
//

#pragma implementation_key(137)
inline _bstr_t IWMPClosedCaption::GetSAMIStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SAMIStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(138)
inline void IWMPClosedCaption::PutSAMIStyle ( _bstr_t pbstrSAMIStyle ) {
    HRESULT _hr = put_SAMIStyle(pbstrSAMIStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(139)
inline _bstr_t IWMPClosedCaption::GetSAMILang ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SAMILang(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(140)
inline void IWMPClosedCaption::PutSAMILang ( _bstr_t pbstrSAMILang ) {
    HRESULT _hr = put_SAMILang(pbstrSAMILang);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(141)
inline _bstr_t IWMPClosedCaption::GetSAMIFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SAMIFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(142)
inline void IWMPClosedCaption::PutSAMIFileName ( _bstr_t pbstrSAMIFileName ) {
    HRESULT _hr = put_SAMIFileName(pbstrSAMIFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(143)
inline _bstr_t IWMPClosedCaption::GetcaptioningId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_captioningId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(144)
inline void IWMPClosedCaption::PutcaptioningId ( _bstr_t pbstrCaptioningID ) {
    HRESULT _hr = put_captioningId(pbstrCaptioningID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPErrorItem wrapper method implementations
//

#pragma implementation_key(145)
inline long IWMPErrorItem::GeterrorCode ( ) {
    long _result = 0;
    HRESULT _hr = get_errorCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(146)
inline _bstr_t IWMPErrorItem::GeterrorDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_errorDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(147)
inline _variant_t IWMPErrorItem::GeterrorContext ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_errorContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(148)
inline long IWMPErrorItem::Getremedy ( ) {
    long _result = 0;
    HRESULT _hr = get_remedy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(149)
inline _bstr_t IWMPErrorItem::GetcustomUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_customUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPError wrapper method implementations
//

#pragma implementation_key(150)
inline HRESULT IWMPError::IclearErrorQueue ( ) {
    HRESULT _hr = raw_clearErrorQueue();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(151)
inline long IWMPError::GeterrorCount ( ) {
    long _result = 0;
    HRESULT _hr = get_errorCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(152)
inline IWMPErrorItemPtr IWMPError::GetItem ( long dwIndex ) {
    struct IWMPErrorItem * _result = 0;
    HRESULT _hr = get_Item(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPErrorItemPtr(_result, false);
}

#pragma implementation_key(153)
inline HRESULT IWMPError::IwebHelp ( ) {
    HRESULT _hr = raw_webHelp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPDVD wrapper method implementations
//

#pragma implementation_key(154)
inline VARIANT_BOOL IWMPDVD::GetisAvailable ( _bstr_t bstrItem ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isAvailable(bstrItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline _bstr_t IWMPDVD::Getdomain ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_domain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(156)
inline HRESULT IWMPDVD::ItopMenu ( ) {
    HRESULT _hr = raw_topMenu();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(157)
inline HRESULT IWMPDVD::ItitleMenu ( ) {
    HRESULT _hr = raw_titleMenu();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(158)
inline HRESULT IWMPDVD::Iback ( ) {
    HRESULT _hr = raw_back();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(159)
inline HRESULT IWMPDVD::Iresume ( ) {
    HRESULT _hr = raw_resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPPlayerApplication wrapper method implementations
//

#pragma implementation_key(160)
inline HRESULT IWMPPlayerApplication::IswitchToPlayerApplication ( ) {
    HRESULT _hr = raw_switchToPlayerApplication();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(161)
inline HRESULT IWMPPlayerApplication::IswitchToControl ( ) {
    HRESULT _hr = raw_switchToControl();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(162)
inline VARIANT_BOOL IWMPPlayerApplication::GetplayerDocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_playerDocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline VARIANT_BOOL IWMPPlayerApplication::GethasDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_hasDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPErrorItem2 wrapper method implementations
//

#pragma implementation_key(164)
inline long IWMPErrorItem2::Getcondition ( ) {
    long _result = 0;
    HRESULT _hr = get_condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPMetadataPicture wrapper method implementations
//

#pragma implementation_key(165)
inline _bstr_t IWMPMetadataPicture::GetmimeType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_mimeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(166)
inline _bstr_t IWMPMetadataPicture::GetpictureType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_pictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(167)
inline _bstr_t IWMPMetadataPicture::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(168)
inline _bstr_t IWMPMetadataPicture::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPMetadataText wrapper method implementations
//

#pragma implementation_key(169)
inline _bstr_t IWMPMetadataText::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(170)
inline _bstr_t IWMPMetadataText::Gettext ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPSettings2 wrapper method implementations
//

#pragma implementation_key(171)
inline long IWMPSettings2::GetdefaultAudioLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_defaultAudioLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(172)
inline _bstr_t IWMPSettings2::GetmediaAccessRights ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_mediaAccessRights(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(173)
inline VARIANT_BOOL IWMPSettings2::IrequestMediaAccessRights ( _bstr_t bstrDesiredAccess ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_requestMediaAccessRights(bstrDesiredAccess, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPClosedCaption2 wrapper method implementations
//

#pragma implementation_key(174)
inline long IWMPClosedCaption2::GetSAMILangCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SAMILangCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(175)
inline _bstr_t IWMPClosedCaption2::IgetSAMILangName ( long nIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSAMILangName(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(176)
inline long IWMPClosedCaption2::IgetSAMILangID ( long nIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getSAMILangID(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(177)
inline long IWMPClosedCaption2::GetSAMIStyleCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SAMIStyleCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(178)
inline _bstr_t IWMPClosedCaption2::IgetSAMIStyleName ( long nIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSAMIStyleName(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPQuery wrapper method implementations
//

#pragma implementation_key(179)
inline HRESULT IWMPQuery::IaddCondition ( _bstr_t bstrAttribute, _bstr_t bstrOperator, _bstr_t bstrValue ) {
    HRESULT _hr = raw_addCondition(bstrAttribute, bstrOperator, bstrValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(180)
inline HRESULT IWMPQuery::IbeginNextGroup ( ) {
    HRESULT _hr = raw_beginNextGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPStringCollection2 wrapper method implementations
//

#pragma implementation_key(181)
inline VARIANT_BOOL IWMPStringCollection2::IisIdentical ( struct IWMPStringCollection2 * pIWMPStringCollection2 ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isIdentical(pIWMPStringCollection2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(182)
inline _bstr_t IWMPStringCollection2::IgetItemInfo ( long lCollectionIndex, _bstr_t bstrItemName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getItemInfo(lCollectionIndex, bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(183)
inline long IWMPStringCollection2::IgetAttributeCountByType ( long lCollectionIndex, _bstr_t bstrType, _bstr_t bstrLanguage ) {
    long _result = 0;
    HRESULT _hr = raw_getAttributeCountByType(lCollectionIndex, bstrType, bstrLanguage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(184)
inline _variant_t IWMPStringCollection2::IgetItemInfoByType ( long lCollectionIndex, _bstr_t bstrType, _bstr_t bstrLanguage, long lAttributeIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getItemInfoByType(lCollectionIndex, bstrType, bstrLanguage, lAttributeIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IWMPPlayerServices wrapper method implementations
//

#pragma implementation_key(185)
inline HRESULT IWMPPlayerServices::IactivateUIPlugin ( _bstr_t bstrPlugin ) {
    HRESULT _hr = raw_activateUIPlugin(bstrPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(186)
inline HRESULT IWMPPlayerServices::IsetTaskPane ( _bstr_t bstrTaskPane ) {
    HRESULT _hr = raw_setTaskPane(bstrTaskPane);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(187)
inline HRESULT IWMPPlayerServices::IsetTaskPaneURL ( _bstr_t bstrTaskPane, _bstr_t bstrURL, _bstr_t bstrFriendlyName ) {
    HRESULT _hr = raw_setTaskPaneURL(bstrTaskPane, bstrURL, bstrFriendlyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPPlayerServices2 wrapper method implementations
//

#pragma implementation_key(188)
inline HRESULT IWMPPlayerServices2::IsetBackgroundProcessingPriority ( _bstr_t bstrPriority ) {
    HRESULT _hr = raw_setBackgroundProcessingPriority(bstrPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPRemoteMediaServices wrapper method implementations
//

#pragma implementation_key(189)
inline HRESULT IWMPRemoteMediaServices::IGetServiceType ( BSTR * pbstrType ) {
    HRESULT _hr = raw_GetServiceType(pbstrType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(190)
inline HRESULT IWMPRemoteMediaServices::IGetApplicationName ( BSTR * pbstrName ) {
    HRESULT _hr = raw_GetApplicationName(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(191)
inline HRESULT IWMPRemoteMediaServices::IGetScriptableObject ( BSTR * pbstrName, IDispatch * * ppDispatch ) {
    HRESULT _hr = raw_GetScriptableObject(pbstrName, ppDispatch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(192)
inline HRESULT IWMPRemoteMediaServices::IGetCustomUIMode ( BSTR * pbstrFile ) {
    HRESULT _hr = raw_GetCustomUIMode(pbstrFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPSyncServices wrapper method implementations
//

#pragma implementation_key(193)
inline long IWMPSyncServices::GetdeviceCount ( ) {
    long _result = 0;
    HRESULT _hr = get_deviceCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(194)
inline IWMPSyncDevicePtr IWMPSyncServices::IgetDevice ( long lIndex ) {
    struct IWMPSyncDevice * _result = 0;
    HRESULT _hr = raw_getDevice(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPSyncDevicePtr(_result, false);
}

//
// interface IWMPLibrarySharingServices wrapper method implementations
//

#pragma implementation_key(195)
inline VARIANT_BOOL IWMPLibrarySharingServices::IisLibraryShared ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isLibraryShared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(196)
inline VARIANT_BOOL IWMPLibrarySharingServices::IisLibrarySharingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isLibrarySharingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(197)
inline HRESULT IWMPLibrarySharingServices::IshowLibrarySharing ( ) {
    HRESULT _hr = raw_showLibrarySharing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPFolderMonitorServices wrapper method implementations
//

#pragma implementation_key(198)
inline long IWMPFolderMonitorServices::Getcount ( ) {
    long _result = 0;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline _bstr_t IWMPFolderMonitorServices::IItem ( long lIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(200)
inline HRESULT IWMPFolderMonitorServices::Iadd ( _bstr_t bstrFolder ) {
    HRESULT _hr = raw_add(bstrFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(201)
inline HRESULT IWMPFolderMonitorServices::Iremove ( long lIndex ) {
    HRESULT _hr = raw_remove(lIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(202)
inline enum WMPFolderScanState IWMPFolderMonitorServices::GetscanState ( ) {
    enum WMPFolderScanState _result;
    HRESULT _hr = get_scanState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline _bstr_t IWMPFolderMonitorServices::GetcurrentFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(204)
inline long IWMPFolderMonitorServices::GetscannedFilesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_scannedFilesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline long IWMPFolderMonitorServices::GetaddedFilesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_addedFilesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline long IWMPFolderMonitorServices::GetupdateProgress ( ) {
    long _result = 0;
    HRESULT _hr = get_updateProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline HRESULT IWMPFolderMonitorServices::IstartScan ( ) {
    HRESULT _hr = raw_startScan();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(208)
inline HRESULT IWMPFolderMonitorServices::IstopScan ( ) {
    HRESULT _hr = raw_stopScan();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPSyncDevice2 wrapper method implementations
//

#pragma implementation_key(209)
inline HRESULT IWMPSyncDevice2::IsetItemInfo ( _bstr_t bstrItemName, _bstr_t bstrVal ) {
    HRESULT _hr = raw_setItemInfo(bstrItemName, bstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAppDispatch wrapper method implementations
//

#pragma implementation_key(210)
inline VARIANT_BOOL IAppDispatch::GettitlebarVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_titlebarVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(211)
inline void IAppDispatch::PuttitlebarVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_titlebarVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(212)
inline VARIANT_BOOL IAppDispatch::GettitlebarAutoHide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_titlebarAutoHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline void IAppDispatch::PuttitlebarAutoHide ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_titlebarAutoHide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(214)
inline _bstr_t IAppDispatch::GetcurrentTask ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(215)
inline void IAppDispatch::PutcurrentTask ( _bstr_t pVal ) {
    HRESULT _hr = put_currentTask(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(216)
inline long IAppDispatch::GetlibraryBasketMode ( ) {
    long _result = 0;
    HRESULT _hr = get_libraryBasketMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(217)
inline void IAppDispatch::PutlibraryBasketMode ( long pVal ) {
    HRESULT _hr = put_libraryBasketMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(218)
inline long IAppDispatch::GetlibraryBasketWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_libraryBasketWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(219)
inline long IAppDispatch::GetbreadcrumbItemCount ( ) {
    long _result = 0;
    HRESULT _hr = get_breadcrumbItemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(220)
inline _bstr_t IAppDispatch::GetbreadcrumbItemName ( long lIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_breadcrumbItemName(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(221)
inline VARIANT_BOOL IAppDispatch::GetbreadcrumbItemHasMenu ( long lIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_breadcrumbItemHasMenu(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(222)
inline HRESULT IAppDispatch::IbreadcrumbItemClick ( long lIndex ) {
    HRESULT _hr = raw_breadcrumbItemClick(lIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(223)
inline VARIANT_BOOL IAppDispatch::GetsettingsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_settingsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(224)
inline void IAppDispatch::PutsettingsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_settingsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(225)
inline VARIANT_BOOL IAppDispatch::GetplaylistVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_playlistVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(226)
inline void IAppDispatch::PutplaylistVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_playlistVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(227)
inline HRESULT IAppDispatch::IgotoSkinMode ( ) {
    HRESULT _hr = raw_gotoSkinMode();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(228)
inline HRESULT IAppDispatch::IgotoPlayerMode ( ) {
    HRESULT _hr = raw_gotoPlayerMode();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(229)
inline HRESULT IAppDispatch::IgotoLibraryMode ( long lButton ) {
    HRESULT _hr = raw_gotoLibraryMode(lButton);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(230)
inline HRESULT IAppDispatch::InavigatePrevious ( ) {
    HRESULT _hr = raw_navigatePrevious();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(231)
inline HRESULT IAppDispatch::InavigateNext ( ) {
    HRESULT _hr = raw_navigateNext();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(232)
inline HRESULT IAppDispatch::IgoFullScreen ( ) {
    HRESULT _hr = raw_goFullScreen();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(233)
inline VARIANT_BOOL IAppDispatch::GetfullScreenEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_fullScreenEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(234)
inline VARIANT_BOOL IAppDispatch::GetserviceLoginVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_serviceLoginVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(235)
inline VARIANT_BOOL IAppDispatch::GetserviceLoginSignedIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_serviceLoginSignedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(236)
inline HRESULT IAppDispatch::IserviceLogin ( ) {
    HRESULT _hr = raw_serviceLogin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(237)
inline HRESULT IAppDispatch::IserviceLogout ( ) {
    HRESULT _hr = raw_serviceLogout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(238)
inline _variant_t IAppDispatch::GetserviceGetInfo ( _bstr_t bstrItem ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_serviceGetInfo(bstrItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(239)
inline VARIANT_BOOL IAppDispatch::GetnavigatePreviousEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_navigatePreviousEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(240)
inline VARIANT_BOOL IAppDispatch::GetnavigateNextEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_navigateNextEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(241)
inline HRESULT IAppDispatch::InavigateToAddress ( _bstr_t address ) {
    HRESULT _hr = raw_navigateToAddress(address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(242)
inline VARIANT_BOOL IAppDispatch::GetglassEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_glassEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(243)
inline VARIANT_BOOL IAppDispatch::GetinVistaPlus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_inVistaPlus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(244)
inline HRESULT IAppDispatch::IadjustLeft ( long nDistance ) {
    HRESULT _hr = raw_adjustLeft(nDistance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(245)
inline VARIANT_BOOL IAppDispatch::GettaskbarVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_taskbarVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(246)
inline void IAppDispatch::PuttaskbarVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_taskbarVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(247)
inline long IAppDispatch::GetDPI ( ) {
    long _result = 0;
    HRESULT _hr = get_DPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(248)
inline VARIANT_BOOL IAppDispatch::GetpreviousEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_previousEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline VARIANT_BOOL IAppDispatch::GetplayLibraryItemEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_playLibraryItemEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(250)
inline HRESULT IAppDispatch::Iprevious ( ) {
    HRESULT _hr = raw_previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(251)
inline VARIANT_BOOL IAppDispatch::GettitlebarCurrentlyVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_titlebarCurrentlyVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(252)
inline VARIANT_BOOL IAppDispatch::GetmenubarCurrentlyVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_menubarCurrentlyVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline VARIANT_BOOL IAppDispatch::GetbgPluginRunning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_bgPluginRunning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(254)
inline HRESULT IAppDispatch::IconfigurePlugins ( long nType ) {
    HRESULT _hr = raw_configurePlugins(nType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(255)
inline _bstr_t IAppDispatch::IgetTimeString ( double dTime ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getTimeString(dTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(256)
inline VARIANT_BOOL IAppDispatch::Getmaximized ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_maximized(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline long IAppDispatch::Gettop ( ) {
    long _result = 0;
    HRESULT _hr = get_top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(258)
inline void IAppDispatch::Puttop ( long pVal ) {
    HRESULT _hr = put_top(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(259)
inline long IAppDispatch::Getleft ( ) {
    long _result = 0;
    HRESULT _hr = get_left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(260)
inline void IAppDispatch::Putleft ( long pVal ) {
    HRESULT _hr = put_left(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(261)
inline long IAppDispatch::Getwidth ( ) {
    long _result = 0;
    HRESULT _hr = get_width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(262)
inline void IAppDispatch::Putwidth ( long pVal ) {
    HRESULT _hr = put_width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(263)
inline long IAppDispatch::Getheight ( ) {
    long _result = 0;
    HRESULT _hr = get_height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(264)
inline void IAppDispatch::Putheight ( long pVal ) {
    HRESULT _hr = put_height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(265)
inline HRESULT IAppDispatch::IsetWindowPos ( long lTop, long lLeft, long lWidth, long lHeight ) {
    HRESULT _hr = raw_setWindowPos(lTop, lLeft, lWidth, lHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(266)
inline HRESULT IAppDispatch::IlogData ( _bstr_t ID, _bstr_t data ) {
    HRESULT _hr = raw_logData(ID, data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(267)
inline _bstr_t IAppDispatch::GetpowerPersonality ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_powerPersonality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(268)
inline HRESULT IAppDispatch::InavigateNamespace ( _bstr_t address ) {
    HRESULT _hr = raw_navigateNamespace(address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(269)
inline _bstr_t IAppDispatch::GetexclusiveService ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_exclusiveService(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(270)
inline void IAppDispatch::PutwindowText ( _bstr_t _arg1 ) {
    HRESULT _hr = put_windowText(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPSafeBrowser wrapper method implementations
//

#pragma implementation_key(271)
inline _bstr_t IWMPSafeBrowser::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(272)
inline void IWMPSafeBrowser::PutURL ( _bstr_t pVal ) {
    HRESULT _hr = put_URL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(273)
inline long IWMPSafeBrowser::Getstatus ( ) {
    long _result = 0;
    HRESULT _hr = get_status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline long IWMPSafeBrowser::GetpendingDownloads ( ) {
    long _result = 0;
    HRESULT _hr = get_pendingDownloads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline HRESULT IWMPSafeBrowser::IshowSAMIText ( _bstr_t samiText ) {
    HRESULT _hr = raw_showSAMIText(samiText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(276)
inline HRESULT IWMPSafeBrowser::IshowLyrics ( _bstr_t lyrics ) {
    HRESULT _hr = raw_showLyrics(lyrics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(277)
inline HRESULT IWMPSafeBrowser::IloadSpecialPage ( _bstr_t pageName ) {
    HRESULT _hr = raw_loadSpecialPage(pageName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(278)
inline HRESULT IWMPSafeBrowser::IgoBack ( ) {
    HRESULT _hr = raw_goBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(279)
inline HRESULT IWMPSafeBrowser::IgoForward ( ) {
    HRESULT _hr = raw_goForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(280)
inline HRESULT IWMPSafeBrowser::Istop ( ) {
    HRESULT _hr = raw_stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(281)
inline HRESULT IWMPSafeBrowser::Irefresh ( ) {
    HRESULT _hr = raw_refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(282)
inline _bstr_t IWMPSafeBrowser::GetbaseURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_baseURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(283)
inline _bstr_t IWMPSafeBrowser::GetfullURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fullURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(284)
inline long IWMPSafeBrowser::GetsecureLock ( ) {
    long _result = 0;
    HRESULT _hr = get_secureLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline VARIANT_BOOL IWMPSafeBrowser::Getbusy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_busy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline HRESULT IWMPSafeBrowser::IshowCert ( ) {
    HRESULT _hr = raw_showCert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPObjectExtendedProps wrapper method implementations
//

#pragma implementation_key(287)
inline _bstr_t IWMPObjectExtendedProps::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(288)
inline _bstr_t IWMPObjectExtendedProps::GetelementType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_elementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(289)
inline long IWMPObjectExtendedProps::Getleft ( ) {
    long _result = 0;
    HRESULT _hr = get_left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline void IWMPObjectExtendedProps::Putleft ( long pVal ) {
    HRESULT _hr = put_left(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(291)
inline long IWMPObjectExtendedProps::Gettop ( ) {
    long _result = 0;
    HRESULT _hr = get_top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline void IWMPObjectExtendedProps::Puttop ( long pVal ) {
    HRESULT _hr = put_top(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(293)
inline long IWMPObjectExtendedProps::Getright ( ) {
    long _result = 0;
    HRESULT _hr = get_right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline void IWMPObjectExtendedProps::Putright ( long pVal ) {
    HRESULT _hr = put_right(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(295)
inline long IWMPObjectExtendedProps::Getbottom ( ) {
    long _result = 0;
    HRESULT _hr = get_bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(296)
inline void IWMPObjectExtendedProps::Putbottom ( long pVal ) {
    HRESULT _hr = put_bottom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(297)
inline long IWMPObjectExtendedProps::Getwidth ( ) {
    long _result = 0;
    HRESULT _hr = get_width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline void IWMPObjectExtendedProps::Putwidth ( long pVal ) {
    HRESULT _hr = put_width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(299)
inline long IWMPObjectExtendedProps::Getheight ( ) {
    long _result = 0;
    HRESULT _hr = get_height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(300)
inline void IWMPObjectExtendedProps::Putheight ( long pVal ) {
    HRESULT _hr = put_height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(301)
inline long IWMPObjectExtendedProps::GetzIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_zIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(302)
inline void IWMPObjectExtendedProps::PutzIndex ( long pVal ) {
    HRESULT _hr = put_zIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(303)
inline _bstr_t IWMPObjectExtendedProps::GetclippingImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_clippingImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(304)
inline void IWMPObjectExtendedProps::PutclippingImage ( _bstr_t pVal ) {
    HRESULT _hr = put_clippingImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(305)
inline _bstr_t IWMPObjectExtendedProps::GetclippingColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_clippingColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(306)
inline void IWMPObjectExtendedProps::PutclippingColor ( _bstr_t pVal ) {
    HRESULT _hr = put_clippingColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(307)
inline VARIANT_BOOL IWMPObjectExtendedProps::Getvisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline void IWMPObjectExtendedProps::Putvisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(309)
inline VARIANT_BOOL IWMPObjectExtendedProps::Getenabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline void IWMPObjectExtendedProps::Putenabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_enabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(311)
inline VARIANT_BOOL IWMPObjectExtendedProps::GettabStop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_tabStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline void IWMPObjectExtendedProps::PuttabStop ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_tabStop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(313)
inline VARIANT_BOOL IWMPObjectExtendedProps::GetpassThrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_passThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(314)
inline void IWMPObjectExtendedProps::PutpassThrough ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_passThrough(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(315)
inline _bstr_t IWMPObjectExtendedProps::GethorizontalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_horizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(316)
inline void IWMPObjectExtendedProps::PuthorizontalAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_horizontalAlignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(317)
inline _bstr_t IWMPObjectExtendedProps::GetverticalAlignment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_verticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(318)
inline void IWMPObjectExtendedProps::PutverticalAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_verticalAlignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(319)
inline HRESULT IWMPObjectExtendedProps::ImoveTo ( long newX, long newY, long moveTime ) {
    HRESULT _hr = raw_moveTo(newX, newY, moveTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(320)
inline HRESULT IWMPObjectExtendedProps::IslideTo ( long newX, long newY, long moveTime ) {
    HRESULT _hr = raw_slideTo(newX, newY, moveTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(321)
inline HRESULT IWMPObjectExtendedProps::ImoveSizeTo ( long newX, long newY, long newWidth, long newHeight, long moveTime, VARIANT_BOOL fSlide ) {
    HRESULT _hr = raw_moveSizeTo(newX, newY, newWidth, newHeight, moveTime, fSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(322)
inline long IWMPObjectExtendedProps::GetalphaBlend ( ) {
    long _result = 0;
    HRESULT _hr = get_alphaBlend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline void IWMPObjectExtendedProps::PutalphaBlend ( long pVal ) {
    HRESULT _hr = put_alphaBlend(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(324)
inline HRESULT IWMPObjectExtendedProps::IalphaBlendTo ( long newVal, long alphaTime ) {
    HRESULT _hr = raw_alphaBlendTo(newVal, alphaTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(325)
inline _bstr_t IWMPObjectExtendedProps::GetaccName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_accName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(326)
inline void IWMPObjectExtendedProps::PutaccName ( _bstr_t pszName ) {
    HRESULT _hr = put_accName(pszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline _bstr_t IWMPObjectExtendedProps::GetaccDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_accDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(328)
inline void IWMPObjectExtendedProps::PutaccDescription ( _bstr_t pszDesc ) {
    HRESULT _hr = put_accDescription(pszDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(329)
inline _bstr_t IWMPObjectExtendedProps::GetaccKeyboardShortcut ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_accKeyboardShortcut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(330)
inline void IWMPObjectExtendedProps::PutaccKeyboardShortcut ( _bstr_t pszShortcut ) {
    HRESULT _hr = put_accKeyboardShortcut(pszShortcut);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(331)
inline VARIANT_BOOL IWMPObjectExtendedProps::GetresizeImages ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_resizeImages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(332)
inline void IWMPObjectExtendedProps::PutresizeImages ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_resizeImages(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(333)
inline _bstr_t IWMPObjectExtendedProps::GetnineGridMargins ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_nineGridMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(334)
inline void IWMPObjectExtendedProps::PutnineGridMargins ( _bstr_t pszMargins ) {
    HRESULT _hr = put_nineGridMargins(pszMargins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(335)
inline _bstr_t IWMPObjectExtendedProps::GetresizeOptimize ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_resizeOptimize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(336)
inline void IWMPObjectExtendedProps::PutresizeOptimize ( _bstr_t ppszResizeOptimize ) {
    HRESULT _hr = put_resizeOptimize(ppszResizeOptimize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(337)
inline float IWMPObjectExtendedProps::Getrotation ( ) {
    float _result = 0;
    HRESULT _hr = get_rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(338)
inline void IWMPObjectExtendedProps::Putrotation ( float pfVal ) {
    HRESULT _hr = put_rotation(pfVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPLayoutSubView wrapper method implementations
//

#pragma implementation_key(339)
inline _bstr_t IWMPLayoutSubView::GettransparencyColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_transparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(340)
inline void IWMPLayoutSubView::PuttransparencyColor ( _bstr_t pVal ) {
    HRESULT _hr = put_transparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(341)
inline _bstr_t IWMPLayoutSubView::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(342)
inline void IWMPLayoutSubView::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(343)
inline _bstr_t IWMPLayoutSubView::GetbackgroundImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(344)
inline void IWMPLayoutSubView::PutbackgroundImage ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline VARIANT_BOOL IWMPLayoutSubView::GetbackgroundTiled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_backgroundTiled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(346)
inline void IWMPLayoutSubView::PutbackgroundTiled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_backgroundTiled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(347)
inline float IWMPLayoutSubView::GetbackgroundImageHueShift ( ) {
    float _result = 0;
    HRESULT _hr = get_backgroundImageHueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(348)
inline void IWMPLayoutSubView::PutbackgroundImageHueShift ( float pVal ) {
    HRESULT _hr = put_backgroundImageHueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(349)
inline float IWMPLayoutSubView::GetbackgroundImageSaturation ( ) {
    float _result = 0;
    HRESULT _hr = get_backgroundImageSaturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(350)
inline void IWMPLayoutSubView::PutbackgroundImageSaturation ( float pVal ) {
    HRESULT _hr = put_backgroundImageSaturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(351)
inline VARIANT_BOOL IWMPLayoutSubView::GetresizeBackgroundImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_resizeBackgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(352)
inline void IWMPLayoutSubView::PutresizeBackgroundImage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_resizeBackgroundImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPLayoutView wrapper method implementations
//

#pragma implementation_key(353)
inline _bstr_t IWMPLayoutView::Gettitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(354)
inline void IWMPLayoutView::Puttitle ( _bstr_t pVal ) {
    HRESULT _hr = put_title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(355)
inline _bstr_t IWMPLayoutView::Getcategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(356)
inline void IWMPLayoutView::Putcategory ( _bstr_t pVal ) {
    HRESULT _hr = put_category(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(357)
inline _bstr_t IWMPLayoutView::GetfocusObjectID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_focusObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(358)
inline void IWMPLayoutView::PutfocusObjectID ( _bstr_t pVal ) {
    HRESULT _hr = put_focusObjectID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(359)
inline VARIANT_BOOL IWMPLayoutView::GettitleBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_titleBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(360)
inline VARIANT_BOOL IWMPLayoutView::Getresizable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_resizable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(361)
inline long IWMPLayoutView::GettimerInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_timerInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(362)
inline void IWMPLayoutView::PuttimerInterval ( long pVal ) {
    HRESULT _hr = put_timerInterval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(363)
inline long IWMPLayoutView::GetminWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_minWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(364)
inline void IWMPLayoutView::PutminWidth ( long pVal ) {
    HRESULT _hr = put_minWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(365)
inline long IWMPLayoutView::GetmaxWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_maxWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(366)
inline void IWMPLayoutView::PutmaxWidth ( long pVal ) {
    HRESULT _hr = put_maxWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(367)
inline long IWMPLayoutView::GetminHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_minHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(368)
inline void IWMPLayoutView::PutminHeight ( long pVal ) {
    HRESULT _hr = put_minHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(369)
inline long IWMPLayoutView::GetmaxHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_maxHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(370)
inline void IWMPLayoutView::PutmaxHeight ( long pVal ) {
    HRESULT _hr = put_maxHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(371)
inline HRESULT IWMPLayoutView::Iclose ( ) {
    HRESULT _hr = raw_close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(372)
inline HRESULT IWMPLayoutView::Iminimize ( ) {
    HRESULT _hr = raw_minimize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(373)
inline HRESULT IWMPLayoutView::Imaximize ( ) {
    HRESULT _hr = raw_maximize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(374)
inline HRESULT IWMPLayoutView::Irestore ( ) {
    HRESULT _hr = raw_restore();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(375)
inline HRESULT IWMPLayoutView::Isize ( _bstr_t bstrDirection ) {
    HRESULT _hr = raw_size(bstrDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(376)
inline HRESULT IWMPLayoutView::IreturnToMediaCenter ( ) {
    HRESULT _hr = raw_returnToMediaCenter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(377)
inline HRESULT IWMPLayoutView::IupdateWindow ( ) {
    HRESULT _hr = raw_updateWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(378)
inline VARIANT_BOOL IWMPLayoutView::Getmaximized ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_maximized(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(379)
inline VARIANT_BOOL IWMPLayoutView::Getminimized ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_minimized(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPEventObject wrapper method implementations
//

#pragma implementation_key(380)
inline IDispatchPtr IWMPEventObject::GetsrcElement ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_srcElement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(381)
inline VARIANT_BOOL IWMPEventObject::GetaltKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_altKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline VARIANT_BOOL IWMPEventObject::GetctrlKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ctrlKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(383)
inline VARIANT_BOOL IWMPEventObject::GetshiftKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_shiftKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline IDispatchPtr IWMPEventObject::GetfromElement ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_fromElement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(385)
inline IDispatchPtr IWMPEventObject::GettoElement ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_toElement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(386)
inline void IWMPEventObject::PutkeyCode ( long p ) {
    HRESULT _hr = put_keyCode(p);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(387)
inline long IWMPEventObject::GetkeyCode ( ) {
    long _result = 0;
    HRESULT _hr = get_keyCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(388)
inline long IWMPEventObject::Getbutton ( ) {
    long _result = 0;
    HRESULT _hr = get_button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(389)
inline long IWMPEventObject::Getx ( ) {
    long _result = 0;
    HRESULT _hr = get_x(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(390)
inline long IWMPEventObject::Gety ( ) {
    long _result = 0;
    HRESULT _hr = get_y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(391)
inline long IWMPEventObject::GetclientX ( ) {
    long _result = 0;
    HRESULT _hr = get_clientX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(392)
inline long IWMPEventObject::GetclientY ( ) {
    long _result = 0;
    HRESULT _hr = get_clientY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(393)
inline long IWMPEventObject::GetoffsetX ( ) {
    long _result = 0;
    HRESULT _hr = get_offsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline long IWMPEventObject::GetoffsetY ( ) {
    long _result = 0;
    HRESULT _hr = get_offsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline long IWMPEventObject::GetscreenX ( ) {
    long _result = 0;
    HRESULT _hr = get_screenX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(396)
inline long IWMPEventObject::GetscreenY ( ) {
    long _result = 0;
    HRESULT _hr = get_screenY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline long IWMPEventObject::GetscreenWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_screenWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(398)
inline long IWMPEventObject::GetscreenHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_screenHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(399)
inline VARIANT_BOOL IWMPEventObject::GetpenOrTouch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_penOrTouch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPTheme wrapper method implementations
//

#pragma implementation_key(400)
inline _bstr_t IWMPTheme::Gettitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(401)
inline float IWMPTheme::Getversion ( ) {
    float _result = 0;
    HRESULT _hr = get_version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(402)
inline _bstr_t IWMPTheme::GetauthorVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_authorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(403)
inline _bstr_t IWMPTheme::Getauthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(404)
inline _bstr_t IWMPTheme::Getcopyright ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_copyright(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(405)
inline _bstr_t IWMPTheme::GetcurrentViewID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentViewID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(406)
inline void IWMPTheme::PutcurrentViewID ( _bstr_t pVal ) {
    HRESULT _hr = put_currentViewID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(407)
inline HRESULT IWMPTheme::IshowErrorDialog ( ) {
    HRESULT _hr = raw_showErrorDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(408)
inline HRESULT IWMPTheme::IlogString ( _bstr_t stringVal ) {
    HRESULT _hr = raw_logString(stringVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(409)
inline HRESULT IWMPTheme::IopenView ( _bstr_t viewID ) {
    HRESULT _hr = raw_openView(viewID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(410)
inline IDispatchPtr IWMPTheme::IopenViewRelative ( _bstr_t viewID, long x, long y ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_openViewRelative(viewID, x, y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(411)
inline HRESULT IWMPTheme::IcloseView ( _bstr_t viewID ) {
    HRESULT _hr = raw_closeView(viewID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(412)
inline _bstr_t IWMPTheme::IopenDialog ( _bstr_t dialogType, _bstr_t parameters ) {
    BSTR _result = 0;
    HRESULT _hr = raw_openDialog(dialogType, parameters, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(413)
inline _bstr_t IWMPTheme::IloadString ( _bstr_t bstrString ) {
    BSTR _result = 0;
    HRESULT _hr = raw_loadString(bstrString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(414)
inline _bstr_t IWMPTheme::IloadPreference ( _bstr_t bstrName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_loadPreference(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(415)
inline HRESULT IWMPTheme::IsavePreference ( _bstr_t bstrName, _bstr_t bstrValue ) {
    HRESULT _hr = raw_savePreference(bstrName, bstrValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(416)
inline HRESULT IWMPTheme::IplaySound ( _bstr_t bstrFilename ) {
    HRESULT _hr = raw_playSound(bstrFilename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(417)
inline IDispatchPtr IWMPTheme::IopenViewRelativeInternal ( _bstr_t viewID, long nIndex, long x, long y, long nWidth, long nHeight, _bstr_t bstrHorizontalAlignment, _bstr_t bstrVerticalAlignment ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_openViewRelativeInternal(viewID, nIndex, x, y, nWidth, nHeight, bstrHorizontalAlignment, bstrVerticalAlignment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(418)
inline HRESULT IWMPTheme::IsetViewPosition ( _bstr_t viewID, long nIndex, long x, long y, long nWidth, long nHeight, _bstr_t bstrHorizontalAlignment, _bstr_t bstrVerticalAlignment ) {
    HRESULT _hr = raw_setViewPosition(viewID, nIndex, x, y, nWidth, nHeight, bstrHorizontalAlignment, bstrVerticalAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPLayoutSettingsDispatch wrapper method implementations
//

#pragma implementation_key(419)
inline _bstr_t IWMPLayoutSettingsDispatch::GeteffectType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_effectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(420)
inline void IWMPLayoutSettingsDispatch::PuteffectType ( _bstr_t pVal ) {
    HRESULT _hr = put_effectType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(421)
inline long IWMPLayoutSettingsDispatch::GeteffectPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_effectPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(422)
inline void IWMPLayoutSettingsDispatch::PuteffectPreset ( long pVal ) {
    HRESULT _hr = put_effectPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(423)
inline _bstr_t IWMPLayoutSettingsDispatch::GetsettingsView ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_settingsView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(424)
inline void IWMPLayoutSettingsDispatch::PutsettingsView ( _bstr_t pVal ) {
    HRESULT _hr = put_settingsView(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(425)
inline long IWMPLayoutSettingsDispatch::GetvideoZoom ( ) {
    long _result = 0;
    HRESULT _hr = get_videoZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(426)
inline void IWMPLayoutSettingsDispatch::PutvideoZoom ( long pVal ) {
    HRESULT _hr = put_videoZoom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(427)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetvideoShrinkToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_videoShrinkToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(428)
inline void IWMPLayoutSettingsDispatch::PutvideoShrinkToFit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_videoShrinkToFit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(429)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetvideoStretchToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_videoStretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(430)
inline void IWMPLayoutSettingsDispatch::PutvideoStretchToFit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_videoStretchToFit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(431)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetuserVideoStretchToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_userVideoStretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(432)
inline void IWMPLayoutSettingsDispatch::PutuserVideoStretchToFit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_userVideoStretchToFit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(433)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowCaptions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showCaptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline void IWMPLayoutSettingsDispatch::PutshowCaptions ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showCaptions(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(435)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowTitles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showTitles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(436)
inline void IWMPLayoutSettingsDispatch::PutshowTitles ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showTitles(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(437)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowEffects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showEffects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline void IWMPLayoutSettingsDispatch::PutshowEffects ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showEffects(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(439)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowFullScreenPlaylist ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showFullScreenPlaylist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(440)
inline void IWMPLayoutSettingsDispatch::PutshowFullScreenPlaylist ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showFullScreenPlaylist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(441)
inline _bstr_t IWMPLayoutSettingsDispatch::GetcontrastMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_contrastMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(442)
inline _bstr_t IWMPLayoutSettingsDispatch::IgetNamedString ( _bstr_t bstrName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getNamedString(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(443)
inline _bstr_t IWMPLayoutSettingsDispatch::IgetDurationStringFromSeconds ( long lDurationVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getDurationStringFromSeconds(lDurationVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(444)
inline _bstr_t IWMPLayoutSettingsDispatch::GetdisplayView ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_displayView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(445)
inline void IWMPLayoutSettingsDispatch::PutdisplayView ( _bstr_t pVal ) {
    HRESULT _hr = put_displayView(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(446)
inline _bstr_t IWMPLayoutSettingsDispatch::GetmetadataView ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_metadataView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(447)
inline void IWMPLayoutSettingsDispatch::PutmetadataView ( _bstr_t pVal ) {
    HRESULT _hr = put_metadataView(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(448)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowSettings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(449)
inline void IWMPLayoutSettingsDispatch::PutshowSettings ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showSettings(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(450)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowResizeBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showResizeBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline void IWMPLayoutSettingsDispatch::PutshowResizeBars ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showResizeBars(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(452)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowPlaylist ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showPlaylist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline void IWMPLayoutSettingsDispatch::PutshowPlaylist ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showPlaylist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(454)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowMetadata ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showMetadata(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(455)
inline void IWMPLayoutSettingsDispatch::PutshowMetadata ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showMetadata(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(456)
inline long IWMPLayoutSettingsDispatch::GetsettingsWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_settingsWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(457)
inline void IWMPLayoutSettingsDispatch::PutsettingsWidth ( long pVal ) {
    HRESULT _hr = put_settingsWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(458)
inline long IWMPLayoutSettingsDispatch::GetsettingsHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_settingsHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(459)
inline void IWMPLayoutSettingsDispatch::PutsettingsHeight ( long pVal ) {
    HRESULT _hr = put_settingsHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(460)
inline long IWMPLayoutSettingsDispatch::GetplaylistWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_playlistWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(461)
inline void IWMPLayoutSettingsDispatch::PutplaylistWidth ( long pVal ) {
    HRESULT _hr = put_playlistWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline long IWMPLayoutSettingsDispatch::GetplaylistHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_playlistHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline void IWMPLayoutSettingsDispatch::PutplaylistHeight ( long pVal ) {
    HRESULT _hr = put_playlistHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(464)
inline long IWMPLayoutSettingsDispatch::GetmetadataWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_metadataWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(465)
inline void IWMPLayoutSettingsDispatch::PutmetadataWidth ( long pVal ) {
    HRESULT _hr = put_metadataWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(466)
inline long IWMPLayoutSettingsDispatch::GetmetadataHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_metadataHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(467)
inline void IWMPLayoutSettingsDispatch::PutmetadataHeight ( long pVal ) {
    HRESULT _hr = put_metadataHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(468)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetfullScreenAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_fullScreenAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(469)
inline void IWMPLayoutSettingsDispatch::PutfullScreenAvailable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_fullScreenAvailable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(470)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetfullScreenRequest ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_fullScreenRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(471)
inline void IWMPLayoutSettingsDispatch::PutfullScreenRequest ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_fullScreenRequest(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(472)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetquickHide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_quickHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(473)
inline void IWMPLayoutSettingsDispatch::PutquickHide ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_quickHide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(474)
inline long IWMPLayoutSettingsDispatch::GetdisplayPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_displayPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(475)
inline void IWMPLayoutSettingsDispatch::PutdisplayPreset ( long pVal ) {
    HRESULT _hr = put_displayPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(476)
inline long IWMPLayoutSettingsDispatch::GetsettingsPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_settingsPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(477)
inline void IWMPLayoutSettingsDispatch::PutsettingsPreset ( long pVal ) {
    HRESULT _hr = put_settingsPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(478)
inline long IWMPLayoutSettingsDispatch::GetmetadataPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_metadataPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(479)
inline void IWMPLayoutSettingsDispatch::PutmetadataPreset ( long pVal ) {
    HRESULT _hr = put_metadataPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(480)
inline _bstr_t IWMPLayoutSettingsDispatch::GetuserDisplayView ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_userDisplayView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(481)
inline _bstr_t IWMPLayoutSettingsDispatch::GetuserWMPDisplayView ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_userWMPDisplayView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(482)
inline long IWMPLayoutSettingsDispatch::GetuserDisplayPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_userDisplayPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(483)
inline long IWMPLayoutSettingsDispatch::GetuserWMPDisplayPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_userWMPDisplayPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(484)
inline long IWMPLayoutSettingsDispatch::GetdynamicRangeControl ( ) {
    long _result = 0;
    HRESULT _hr = get_dynamicRangeControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(485)
inline void IWMPLayoutSettingsDispatch::PutdynamicRangeControl ( long pVal ) {
    HRESULT _hr = put_dynamicRangeControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(486)
inline float IWMPLayoutSettingsDispatch::GetslowRate ( ) {
    float _result = 0;
    HRESULT _hr = get_slowRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(487)
inline void IWMPLayoutSettingsDispatch::PutslowRate ( float pVal ) {
    HRESULT _hr = put_slowRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(488)
inline float IWMPLayoutSettingsDispatch::GetfastRate ( ) {
    float _result = 0;
    HRESULT _hr = get_fastRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(489)
inline void IWMPLayoutSettingsDispatch::PutfastRate ( float pVal ) {
    HRESULT _hr = put_fastRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(490)
inline float IWMPLayoutSettingsDispatch::GetbuttonHueShift ( ) {
    float _result = 0;
    HRESULT _hr = get_buttonHueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(491)
inline void IWMPLayoutSettingsDispatch::PutbuttonHueShift ( float pVal ) {
    HRESULT _hr = put_buttonHueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(492)
inline float IWMPLayoutSettingsDispatch::GetbuttonSaturation ( ) {
    float _result = 0;
    HRESULT _hr = get_buttonSaturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(493)
inline void IWMPLayoutSettingsDispatch::PutbuttonSaturation ( float pVal ) {
    HRESULT _hr = put_buttonSaturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(494)
inline float IWMPLayoutSettingsDispatch::GetbackHueShift ( ) {
    float _result = 0;
    HRESULT _hr = get_backHueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(495)
inline void IWMPLayoutSettingsDispatch::PutbackHueShift ( float pVal ) {
    HRESULT _hr = put_backHueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(496)
inline float IWMPLayoutSettingsDispatch::GetbackSaturation ( ) {
    float _result = 0;
    HRESULT _hr = get_backSaturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(497)
inline void IWMPLayoutSettingsDispatch::PutbackSaturation ( float pVal ) {
    HRESULT _hr = put_backSaturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(498)
inline long IWMPLayoutSettingsDispatch::GetvizRequest ( ) {
    long _result = 0;
    HRESULT _hr = get_vizRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(499)
inline void IWMPLayoutSettingsDispatch::PutvizRequest ( long pVal ) {
    HRESULT _hr = put_vizRequest(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(500)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorLight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorLight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(501)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorMedium ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorMedium(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(502)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorDark ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorDark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(503)
inline _bstr_t IWMPLayoutSettingsDispatch::GettoolbarButtonHighlight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_toolbarButtonHighlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(504)
inline _bstr_t IWMPLayoutSettingsDispatch::GettoolbarButtonShadow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_toolbarButtonShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(505)
inline _bstr_t IWMPLayoutSettingsDispatch::GettoolbarButtonFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_toolbarButtonFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(506)
inline _bstr_t IWMPLayoutSettingsDispatch::GetitemPlayingColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_itemPlayingColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(507)
inline _bstr_t IWMPLayoutSettingsDispatch::GetitemPlayingBackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_itemPlayingBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(508)
inline _bstr_t IWMPLayoutSettingsDispatch::GetitemErrorColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_itemErrorColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(509)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetappColorLimited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_appColorLimited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(510)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetappColorBlackBackground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_appColorBlackBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(511)
inline void IWMPLayoutSettingsDispatch::PutappColorBlackBackground ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_appColorBlackBackground(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(512)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorVideoBorder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorVideoBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(513)
inline void IWMPLayoutSettingsDispatch::PutappColorVideoBorder ( _bstr_t pVal ) {
    HRESULT _hr = put_appColorVideoBorder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(514)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(515)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(516)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux3 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(517)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux4 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(518)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux5 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(519)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux6 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(520)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux7 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(521)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux8 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux8(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(522)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux9 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux9(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(523)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux10 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(524)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux11 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux11(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(525)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux12 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux12(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(526)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux13 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux13(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(527)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux14 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux14(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(528)
inline _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux15 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorAux15(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(529)
inline _bstr_t IWMPLayoutSettingsDispatch::Getstatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(530)
inline void IWMPLayoutSettingsDispatch::Putstatus ( _bstr_t pVal ) {
    HRESULT _hr = put_status(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(531)
inline _bstr_t IWMPLayoutSettingsDispatch::GetuserWMPSettingsView ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_userWMPSettingsView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(532)
inline long IWMPLayoutSettingsDispatch::GetuserWMPSettingsPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_userWMPSettingsPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(533)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetuserWMPShowSettings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_userWMPShowSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline _bstr_t IWMPLayoutSettingsDispatch::GetuserWMPMetadataView ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_userWMPMetadataView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(535)
inline long IWMPLayoutSettingsDispatch::GetuserWMPMetadataPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_userWMPMetadataPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(536)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetuserWMPShowMetadata ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_userWMPShowMetadata(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(537)
inline long IWMPLayoutSettingsDispatch::GetcaptionsHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_captionsHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline void IWMPLayoutSettingsDispatch::PutcaptionsHeight ( long pVal ) {
    HRESULT _hr = put_captionsHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(539)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetsnapToVideo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_snapToVideo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(540)
inline void IWMPLayoutSettingsDispatch::PutsnapToVideo ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_snapToVideo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(541)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetpinFullScreenControls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_pinFullScreenControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(542)
inline void IWMPLayoutSettingsDispatch::PutpinFullScreenControls ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_pinFullScreenControls(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(543)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetisMultiMon ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMultiMon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(544)
inline float IWMPLayoutSettingsDispatch::GetexclusiveHueShift ( ) {
    float _result = 0;
    HRESULT _hr = get_exclusiveHueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(545)
inline void IWMPLayoutSettingsDispatch::PutexclusiveHueShift ( float pVal ) {
    HRESULT _hr = put_exclusiveHueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(546)
inline float IWMPLayoutSettingsDispatch::GetexclusiveSaturation ( ) {
    float _result = 0;
    HRESULT _hr = get_exclusiveSaturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(547)
inline void IWMPLayoutSettingsDispatch::PutexclusiveSaturation ( float pVal ) {
    HRESULT _hr = put_exclusiveSaturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(548)
inline VARIANT_BOOL IWMPLayoutSettingsDispatch::GetthemeBkgColorIsActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_themeBkgColorIsActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(549)
inline void IWMPLayoutSettingsDispatch::PutthemeBkgColorIsActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_themeBkgColorIsActive(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(550)
inline _bstr_t IWMPLayoutSettingsDispatch::GetthemeBkgColorActive ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_themeBkgColorActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(551)
inline _bstr_t IWMPLayoutSettingsDispatch::GetthemeBkgColorInactive ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_themeBkgColorInactive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPWindow wrapper method implementations
//

#pragma implementation_key(552)
inline HRESULT IWMPWindow::IsetWindowPos ( long x, long y, long height, long width ) {
    HRESULT _hr = raw_setWindowPos(x, y, height, width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(553)
inline long IWMPWindow::GetframeRate ( ) {
    long _result = 0;
    HRESULT _hr = get_frameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(554)
inline void IWMPWindow::PutframeRate ( long pVal ) {
    HRESULT _hr = put_frameRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(555)
inline long IWMPWindow::GetmouseX ( ) {
    long _result = 0;
    HRESULT _hr = get_mouseX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(556)
inline long IWMPWindow::GetmouseY ( ) {
    long _result = 0;
    HRESULT _hr = get_mouseY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(557)
inline void IWMPWindow::Putonsizing ( IDispatch * _arg1 ) {
    HRESULT _hr = put_onsizing(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(558)
inline HRESULT IWMPWindow::IopenViewAlwaysOnTop ( _bstr_t bstrViewID ) {
    HRESULT _hr = raw_openViewAlwaysOnTop(bstrViewID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPBrandDispatch wrapper method implementations
//

#pragma implementation_key(559)
inline _bstr_t IWMPBrandDispatch::GetfullServiceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fullServiceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(560)
inline _bstr_t IWMPBrandDispatch::GetfriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_friendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(561)
inline _bstr_t IWMPBrandDispatch::GetguideButtonText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_guideButtonText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(562)
inline _bstr_t IWMPBrandDispatch::GetguideButtonTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_guideButtonTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(563)
inline _bstr_t IWMPBrandDispatch::GetguideMenuText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_guideMenuText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(564)
inline _bstr_t IWMPBrandDispatch::GetguideAccText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_guideAccText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(565)
inline _bstr_t IWMPBrandDispatch::Gettask1ButtonText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_task1ButtonText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(566)
inline _bstr_t IWMPBrandDispatch::Gettask1ButtonTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_task1ButtonTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(567)
inline _bstr_t IWMPBrandDispatch::Gettask1MenuText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_task1MenuText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(568)
inline _bstr_t IWMPBrandDispatch::Gettask1AccText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_task1AccText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(569)
inline _bstr_t IWMPBrandDispatch::GetguideUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_guideUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(570)
inline _bstr_t IWMPBrandDispatch::Gettask1Url ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_task1Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(571)
inline _bstr_t IWMPBrandDispatch::GetimageLargeUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_imageLargeUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(572)
inline _bstr_t IWMPBrandDispatch::GetimageSmallUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_imageSmallUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(573)
inline _bstr_t IWMPBrandDispatch::GetimageMenuUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_imageMenuUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(574)
inline _bstr_t IWMPBrandDispatch::GetinfoCenterUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_infoCenterUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(575)
inline _bstr_t IWMPBrandDispatch::GetalbumInfoUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_albumInfoUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(576)
inline _bstr_t IWMPBrandDispatch::GetbuyCDUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_buyCDUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(577)
inline _bstr_t IWMPBrandDispatch::GethtmlViewUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_htmlViewUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(578)
inline _bstr_t IWMPBrandDispatch::GetnavigateUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_navigateUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(579)
inline _bstr_t IWMPBrandDispatch::GetcookieUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_cookieUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(580)
inline _bstr_t IWMPBrandDispatch::GetdownloadStatusUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_downloadStatusUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(581)
inline _bstr_t IWMPBrandDispatch::GetcolorPlayer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_colorPlayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(582)
inline _bstr_t IWMPBrandDispatch::GetcolorPlayerText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_colorPlayerText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(583)
inline long IWMPBrandDispatch::GetnavigateDispid ( ) {
    long _result = 0;
    HRESULT _hr = get_navigateDispid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(584)
inline _bstr_t IWMPBrandDispatch::GetnavigateParams ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_navigateParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(585)
inline _bstr_t IWMPBrandDispatch::GetnavigatePane ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_navigatePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(586)
inline _bstr_t IWMPBrandDispatch::GetselectedPane ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_selectedPane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(587)
inline void IWMPBrandDispatch::PutselectedPane ( _bstr_t pVal ) {
    HRESULT _hr = put_selectedPane(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(588)
inline HRESULT IWMPBrandDispatch::IsetNavigateProps ( _bstr_t bstrPane, long lDispid, _bstr_t bstrParams ) {
    HRESULT _hr = raw_setNavigateProps(bstrPane, lDispid, bstrParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(589)
inline _bstr_t IWMPBrandDispatch::IgetMediaParams ( IUnknown * pObject, _bstr_t bstrURL ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getMediaParams(pObject, bstrURL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(590)
inline void IWMPBrandDispatch::PutselectedTask ( long _arg1 ) {
    HRESULT _hr = put_selectedTask(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(591)
inline VARIANT_BOOL IWMPBrandDispatch::GetcontentPartnerSelected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_contentPartnerSelected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPNowPlayingHelperDispatch wrapper method implementations
//

#pragma implementation_key(592)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetviewFriendlyName ( _bstr_t bstrView ) {
    BSTR _result = 0;
    HRESULT _hr = get_viewFriendlyName(bstrView, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(593)
inline long IWMPNowPlayingHelperDispatch::GetviewPresetCount ( _bstr_t bstrView ) {
    long _result = 0;
    HRESULT _hr = get_viewPresetCount(bstrView, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(594)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetviewPresetName ( _bstr_t bstrView, long nPresetIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_viewPresetName(bstrView, nPresetIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(595)
inline _bstr_t IWMPNowPlayingHelperDispatch::GeteffectFriendlyName ( _bstr_t bstrEffect ) {
    BSTR _result = 0;
    HRESULT _hr = get_effectFriendlyName(bstrEffect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(596)
inline _bstr_t IWMPNowPlayingHelperDispatch::GeteffectPresetName ( _bstr_t bstrEffect, long nPresetIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_effectPresetName(bstrEffect, nPresetIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(597)
inline _bstr_t IWMPNowPlayingHelperDispatch::IresolveDisplayView ( VARIANT_BOOL fSafe ) {
    BSTR _result = 0;
    HRESULT _hr = raw_resolveDisplayView(fSafe, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(598)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::IisValidDisplayView ( _bstr_t bstrView ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isValidDisplayView(bstrView, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(599)
inline _bstr_t IWMPNowPlayingHelperDispatch::IgetSkinFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getSkinFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(600)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetcaptionsAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_captionsAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(601)
inline long IWMPNowPlayingHelperDispatch::GetlinkAvailable ( ) {
    long _result = 0;
    HRESULT _hr = get_linkAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(602)
inline long IWMPNowPlayingHelperDispatch::GetlinkRequest ( ) {
    long _result = 0;
    HRESULT _hr = get_linkRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(603)
inline void IWMPNowPlayingHelperDispatch::PutlinkRequest ( long pVal ) {
    HRESULT _hr = put_linkRequest(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(604)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetlinkRequestParams ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_linkRequestParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(605)
inline void IWMPNowPlayingHelperDispatch::PutlinkRequestParams ( _bstr_t pVal ) {
    HRESULT _hr = put_linkRequestParams(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(606)
inline long IWMPNowPlayingHelperDispatch::IgetCurrentArtID ( VARIANT_BOOL fLargeArt ) {
    long _result = 0;
    HRESULT _hr = raw_getCurrentArtID(fLargeArt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline _bstr_t IWMPNowPlayingHelperDispatch::IgetTimeString ( double dTime ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getTimeString(dTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(608)
inline _bstr_t IWMPNowPlayingHelperDispatch::IgetCurrentScriptCommand ( _bstr_t bstrType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getCurrentScriptCommand(bstrType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(609)
inline HRESULT IWMPNowPlayingHelperDispatch::IcalcLayout ( long lWidth, long lHeight, VARIANT_BOOL vbCaptions, VARIANT_BOOL vbBanner ) {
    HRESULT _hr = raw_calcLayout(lWidth, lHeight, vbCaptions, vbBanner);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(610)
inline long IWMPNowPlayingHelperDispatch::IgetLayoutSize ( long nProp ) {
    long _result = 0;
    HRESULT _hr = raw_getLayoutSize(nProp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(611)
inline IDispatchPtr IWMPNowPlayingHelperDispatch::IgetRootPlaylist ( IDispatch * pPlaylist ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_getRootPlaylist(pPlaylist, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(612)
inline _bstr_t IWMPNowPlayingHelperDispatch::IgetHTMLViewURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getHTMLViewURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(613)
inline IUnknownPtr IWMPNowPlayingHelperDispatch::GeteditObj ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_editObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(614)
inline void IWMPNowPlayingHelperDispatch::PuteditObj ( IUnknown * ppVal ) {
    HRESULT _hr = put_editObj(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(615)
inline _bstr_t IWMPNowPlayingHelperDispatch::IgetStatusString ( _bstr_t bstrStatusId ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getStatusString(bstrStatusId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(616)
inline long IWMPNowPlayingHelperDispatch::IgetStatusPct ( _bstr_t bstrStatusId ) {
    long _result = 0;
    HRESULT _hr = raw_getStatusPct(bstrStatusId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(617)
inline long IWMPNowPlayingHelperDispatch::IgetStatusResult ( _bstr_t bstrStatusId ) {
    long _result = 0;
    HRESULT _hr = raw_getStatusResult(bstrStatusId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(618)
inline long IWMPNowPlayingHelperDispatch::IgetStatusIcon ( _bstr_t bstrStatusId ) {
    long _result = 0;
    HRESULT _hr = raw_getStatusIcon(bstrStatusId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(619)
inline _bstr_t IWMPNowPlayingHelperDispatch::IgetStatusIdList ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getStatusIdList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(620)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetnotificationString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_notificationString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(621)
inline _bstr_t IWMPNowPlayingHelperDispatch::GethtmlViewBaseURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_htmlViewBaseURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(622)
inline void IWMPNowPlayingHelperDispatch::PuthtmlViewBaseURL ( _bstr_t pVal ) {
    HRESULT _hr = put_htmlViewBaseURL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(623)
inline _bstr_t IWMPNowPlayingHelperDispatch::GethtmlViewFullURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_htmlViewFullURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(624)
inline void IWMPNowPlayingHelperDispatch::PuthtmlViewFullURL ( _bstr_t pVal ) {
    HRESULT _hr = put_htmlViewFullURL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(625)
inline long IWMPNowPlayingHelperDispatch::GethtmlViewSecureLock ( ) {
    long _result = 0;
    HRESULT _hr = get_htmlViewSecureLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(626)
inline void IWMPNowPlayingHelperDispatch::PuthtmlViewSecureLock ( long pVal ) {
    HRESULT _hr = put_htmlViewSecureLock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(627)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GethtmlViewBusy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_htmlViewBusy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(628)
inline void IWMPNowPlayingHelperDispatch::PuthtmlViewBusy ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_htmlViewBusy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(629)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GethtmlViewShowCert ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_htmlViewShowCert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(630)
inline void IWMPNowPlayingHelperDispatch::PuthtmlViewShowCert ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_htmlViewShowCert(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(631)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetpreviousEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_previousEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(632)
inline void IWMPNowPlayingHelperDispatch::PutpreviousEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_previousEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(633)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetdoPreviousNow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_doPreviousNow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(634)
inline void IWMPNowPlayingHelperDispatch::PutdoPreviousNow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_doPreviousNow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(635)
inline long IWMPNowPlayingHelperDispatch::GetDPI ( ) {
    long _result = 0;
    HRESULT _hr = get_DPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(636)
inline HRESULT IWMPNowPlayingHelperDispatch::IclearColors ( ) {
    HRESULT _hr = raw_clearColors();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(637)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetlastMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_lastMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(638)
inline void IWMPNowPlayingHelperDispatch::PutlastMessage ( _bstr_t pVal ) {
    HRESULT _hr = put_lastMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(639)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetinVistaPlus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_inVistaPlus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(640)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetisBidi ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isBidi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(641)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetisOCX ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isOCX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(642)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GethoverTransportsEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_hoverTransportsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(643)
inline HRESULT IWMPNowPlayingHelperDispatch::IinitRipHelper ( ) {
    HRESULT _hr = raw_initRipHelper();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(644)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetisAudioCD ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isAudioCD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(645)
inline void IWMPNowPlayingHelperDispatch::PutisAudioCD ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_isAudioCD(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(646)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetcanRip ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_canRip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline void IWMPNowPlayingHelperDispatch::PutcanRip ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_canRip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(648)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetisRipping ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isRipping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(649)
inline void IWMPNowPlayingHelperDispatch::PutisRipping ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_isRipping(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(650)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetcurrentDrive ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentDrive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(651)
inline void IWMPNowPlayingHelperDispatch::PutcurrentDrive ( _bstr_t pVal ) {
    HRESULT _hr = put_currentDrive(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(652)
inline HRESULT IWMPNowPlayingHelperDispatch::IstartRip ( ) {
    HRESULT _hr = raw_startRip();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(653)
inline HRESULT IWMPNowPlayingHelperDispatch::IstopRip ( ) {
    HRESULT _hr = raw_stopRip();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(654)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetshowMMO ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showMMO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(655)
inline void IWMPNowPlayingHelperDispatch::PutshowMMO ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showMMO(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(656)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetMMOVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MMOVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(657)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetsuggestionsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_suggestionsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetsuggestionsTextColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_suggestionsTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(659)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetfontFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fontFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(660)
inline long IWMPNowPlayingHelperDispatch::GetfontSize ( ) {
    long _result = 0;
    HRESULT _hr = get_fontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(662)
inline long IWMPNowPlayingHelperDispatch::GetdoubleClickTime ( ) {
    long _result = 0;
    HRESULT _hr = get_doubleClickTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(663)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetplayAgain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_playAgain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(664)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetpreviousPlaylistAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_previousPlaylistAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(665)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetnextPlaylistAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_nextPlaylistAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline HRESULT IWMPNowPlayingHelperDispatch::InextPlaylist ( ) {
    HRESULT _hr = raw_nextPlaylist();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(667)
inline HRESULT IWMPNowPlayingHelperDispatch::IpreviousPlaylist ( ) {
    HRESULT _hr = raw_previousPlaylist();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(668)
inline HRESULT IWMPNowPlayingHelperDispatch::IplayOffsetMedia ( long iOffset ) {
    HRESULT _hr = raw_playOffsetMedia(iOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(669)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetbasketVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_basketVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(670)
inline void IWMPNowPlayingHelperDispatch::PutbasketVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_basketVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(671)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetmmoTextColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_mmoTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(672)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetbackgroundVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_backgroundVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline void IWMPNowPlayingHelperDispatch::PutbackgroundEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_backgroundEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(674)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetbackgroundEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_backgroundEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(675)
inline void IWMPNowPlayingHelperDispatch::PutbackgroundIndex ( long pVal ) {
    HRESULT _hr = put_backgroundIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(676)
inline long IWMPNowPlayingHelperDispatch::GetbackgroundIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_backgroundIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetupNext ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_upNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(678)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetplaybackOverlayVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_playbackOverlayVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(679)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::Getremoted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_remoted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(680)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetglassEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_glassEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GethighContrast ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_highContrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(682)
inline void IWMPNowPlayingHelperDispatch::PuttestHighContrast ( _bstr_t _arg1 ) {
    HRESULT _hr = put_testHighContrast(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(683)
inline void IWMPNowPlayingHelperDispatch::GetsessionPlaylistCount ( long * pVal ) {
    HRESULT _hr = get_sessionPlaylistCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(684)
inline HRESULT IWMPNowPlayingHelperDispatch::IsetGestureStatus ( IDispatch * pObject, long newVal ) {
    HRESULT _hr = raw_setGestureStatus(pObject, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(685)
inline _bstr_t IWMPNowPlayingHelperDispatch::GetmetadataString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_metadataString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(686)
inline void IWMPNowPlayingHelperDispatch::PutmetadataString ( _bstr_t pVal ) {
    HRESULT _hr = put_metadataString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(687)
inline long IWMPNowPlayingHelperDispatch::GetalbumArtAlpha ( ) {
    long _result = 0;
    HRESULT _hr = get_albumArtAlpha(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(688)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetplayerModeAlbumArtSelected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_playerModeAlbumArtSelected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetinFullScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_inFullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(690)
inline HRESULT IWMPNowPlayingHelperDispatch::IsyncToAlbumArt ( IDispatch * pObject, long iOffsetFromCurrentMedia, _bstr_t bstrFallbackImage ) {
    HRESULT _hr = raw_syncToAlbumArt(pObject, iOffsetFromCurrentMedia, bstrFallbackImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPNowDoingDispatch wrapper method implementations
//

#pragma implementation_key(691)
inline HRESULT IWMPNowDoingDispatch::IbuyContent ( ) {
    HRESULT _hr = raw_buyContent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(692)
inline HRESULT IWMPNowDoingDispatch::IhideBasket ( ) {
    HRESULT _hr = raw_hideBasket();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(693)
inline HRESULT IWMPNowDoingDispatch::IburnNavigateToStatus ( ) {
    HRESULT _hr = raw_burnNavigateToStatus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(694)
inline HRESULT IWMPNowDoingDispatch::IsyncNavigateToStatus ( ) {
    HRESULT _hr = raw_syncNavigateToStatus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(695)
inline long IWMPNowDoingDispatch::GetDPI ( ) {
    long _result = 0;
    HRESULT _hr = get_DPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(696)
inline _bstr_t IWMPNowDoingDispatch::Getmode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(697)
inline void IWMPNowDoingDispatch::Putburn_selectedDrive ( long pVal ) {
    HRESULT _hr = put_burn_selectedDrive(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(698)
inline long IWMPNowDoingDispatch::Getburn_selectedDrive ( ) {
    long _result = 0;
    HRESULT _hr = get_burn_selectedDrive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(699)
inline long IWMPNowDoingDispatch::Getsync_selectedDevice ( ) {
    long _result = 0;
    HRESULT _hr = get_sync_selectedDevice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(700)
inline void IWMPNowDoingDispatch::Putsync_selectedDevice ( long pVal ) {
    HRESULT _hr = put_sync_selectedDevice(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(701)
inline long IWMPNowDoingDispatch::Getburn_numDiscsSpanned ( ) {
    long _result = 0;
    HRESULT _hr = get_burn_numDiscsSpanned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline IDispatchPtr IWMPNowDoingDispatch::GeteditPlaylist ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_editPlaylist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(703)
inline _bstr_t IWMPNowDoingDispatch::GetbasketPlaylistName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_basketPlaylistName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(704)
inline VARIANT_BOOL IWMPNowDoingDispatch::GetisHighContrastMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isHighContrastMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(705)
inline VARIANT_BOOL IWMPNowDoingDispatch::GetallowRating ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_allowRating(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(706)
inline VARIANT_BOOL IWMPNowDoingDispatch::GetallowShop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_allowShop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(707)
inline _bstr_t IWMPNowDoingDispatch::Getburn_mediaType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_burn_mediaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(708)
inline _bstr_t IWMPNowDoingDispatch::Getburn_contentType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_burn_contentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(709)
inline long IWMPNowDoingDispatch::Getburn_freeSpace ( ) {
    long _result = 0;
    HRESULT _hr = get_burn_freeSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(710)
inline long IWMPNowDoingDispatch::Getburn_totalSpace ( ) {
    long _result = 0;
    HRESULT _hr = get_burn_totalSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(711)
inline _bstr_t IWMPNowDoingDispatch::Getburn_driveName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_burn_driveName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(712)
inline long IWMPNowDoingDispatch::Getburn_numDevices ( ) {
    long _result = 0;
    HRESULT _hr = get_burn_numDevices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(713)
inline long IWMPNowDoingDispatch::Getburn_spaceToUse ( ) {
    long _result = 0;
    HRESULT _hr = get_burn_spaceToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(714)
inline long IWMPNowDoingDispatch::Getburn_percentComplete ( ) {
    long _result = 0;
    HRESULT _hr = get_burn_percentComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline long IWMPNowDoingDispatch::Getsync_spaceToUse ( ) {
    long _result = 0;
    HRESULT _hr = get_sync_spaceToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(716)
inline long IWMPNowDoingDispatch::Getsync_spaceUsed ( ) {
    long _result = 0;
    HRESULT _hr = get_sync_spaceUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(717)
inline long IWMPNowDoingDispatch::Getsync_totalSpace ( ) {
    long _result = 0;
    HRESULT _hr = get_sync_totalSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(718)
inline _bstr_t IWMPNowDoingDispatch::Getsync_deviceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_sync_deviceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(719)
inline long IWMPNowDoingDispatch::Getsync_numDevices ( ) {
    long _result = 0;
    HRESULT _hr = get_sync_numDevices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(720)
inline _bstr_t IWMPNowDoingDispatch::Getsync_oemName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_sync_oemName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(721)
inline long IWMPNowDoingDispatch::Getsync_percentComplete ( ) {
    long _result = 0;
    HRESULT _hr = get_sync_percentComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(722)
inline HRESULT IWMPNowDoingDispatch::IlogData ( _bstr_t ID, _bstr_t data ) {
    HRESULT _hr = raw_logData(ID, data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(723)
inline _bstr_t IWMPNowDoingDispatch::IformatTime ( long value ) {
    BSTR _result = 0;
    HRESULT _hr = raw_formatTime(value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPHoverPreviewDispatch wrapper method implementations
//

#pragma implementation_key(724)
inline _bstr_t IWMPHoverPreviewDispatch::Gettitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(725)
inline _bstr_t IWMPHoverPreviewDispatch::Getalbum ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_album(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(726)
inline _bstr_t IWMPHoverPreviewDispatch::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(727)
inline void IWMPHoverPreviewDispatch::Putimage ( IDispatch * _arg1 ) {
    HRESULT _hr = put_image(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(728)
inline void IWMPHoverPreviewDispatch::PutautoClick ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_autoClick(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline void IWMPHoverPreviewDispatch::PutpreviewClick ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_previewClick(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(730)
inline HRESULT IWMPHoverPreviewDispatch::Idismiss ( ) {
    HRESULT _hr = raw_dismiss();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface IWMPButtonCtrlEvents wrapper method implementations
//

#pragma implementation_key(731)
inline HRESULT IWMPButtonCtrlEvents::Ionclick ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1400, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IWMPButtonCtrl wrapper method implementations
//

#pragma implementation_key(732)
inline _bstr_t IWMPButtonCtrl::Getimage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(733)
inline void IWMPButtonCtrl::Putimage ( _bstr_t pVal ) {
    HRESULT _hr = put_image(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(734)
inline _bstr_t IWMPButtonCtrl::GethoverImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_hoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(735)
inline void IWMPButtonCtrl::PuthoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(736)
inline _bstr_t IWMPButtonCtrl::GetdownImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_downImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(737)
inline void IWMPButtonCtrl::PutdownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_downImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(738)
inline _bstr_t IWMPButtonCtrl::GetdisabledImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_disabledImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(739)
inline void IWMPButtonCtrl::PutdisabledImage ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(740)
inline _bstr_t IWMPButtonCtrl::GethoverDownImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_hoverDownImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(741)
inline void IWMPButtonCtrl::PuthoverDownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverDownImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(742)
inline VARIANT_BOOL IWMPButtonCtrl::Gettiled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_tiled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(743)
inline void IWMPButtonCtrl::Puttiled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_tiled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(744)
inline _bstr_t IWMPButtonCtrl::GettransparencyColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_transparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(745)
inline void IWMPButtonCtrl::PuttransparencyColor ( _bstr_t pVal ) {
    HRESULT _hr = put_transparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(746)
inline VARIANT_BOOL IWMPButtonCtrl::Getdown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_down(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(747)
inline void IWMPButtonCtrl::Putdown ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_down(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(748)
inline VARIANT_BOOL IWMPButtonCtrl::Getsticky ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_sticky(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(749)
inline void IWMPButtonCtrl::Putsticky ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_sticky(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(750)
inline _bstr_t IWMPButtonCtrl::GetupToolTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_upToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(751)
inline void IWMPButtonCtrl::PutupToolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_upToolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(752)
inline _bstr_t IWMPButtonCtrl::GetdownToolTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_downToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(753)
inline void IWMPButtonCtrl::PutdownToolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_downToolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(754)
inline _bstr_t IWMPButtonCtrl::Getcursor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(755)
inline void IWMPButtonCtrl::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPListBoxCtrl wrapper method implementations
//

#pragma implementation_key(756)
inline long IWMPListBoxCtrl::GetselectedItem ( ) {
    long _result = 0;
    HRESULT _hr = get_selectedItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline void IWMPListBoxCtrl::PutselectedItem ( long pnPos ) {
    HRESULT _hr = put_selectedItem(pnPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(758)
inline VARIANT_BOOL IWMPListBoxCtrl::Getsorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_sorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(759)
inline void IWMPListBoxCtrl::Putsorted ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_sorted(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(760)
inline VARIANT_BOOL IWMPListBoxCtrl::Getmultiselect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_multiselect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(761)
inline void IWMPListBoxCtrl::Putmultiselect ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_multiselect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(762)
inline VARIANT_BOOL IWMPListBoxCtrl::GetreadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_readOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(763)
inline void IWMPListBoxCtrl::PutreadOnly ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_readOnly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(764)
inline _bstr_t IWMPListBoxCtrl::GetforegroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(765)
inline void IWMPListBoxCtrl::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(766)
inline _bstr_t IWMPListBoxCtrl::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(767)
inline void IWMPListBoxCtrl::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline long IWMPListBoxCtrl::GetfontSize ( ) {
    long _result = 0;
    HRESULT _hr = get_fontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline void IWMPListBoxCtrl::PutfontSize ( long pVal ) {
    HRESULT _hr = put_fontSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline _bstr_t IWMPListBoxCtrl::GetfontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(771)
inline void IWMPListBoxCtrl::PutfontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_fontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline _bstr_t IWMPListBoxCtrl::GetfontFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fontFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(773)
inline void IWMPListBoxCtrl::PutfontFace ( _bstr_t pVal ) {
    HRESULT _hr = put_fontFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline long IWMPListBoxCtrl::GetitemCount ( ) {
    long _result = 0;
    HRESULT _hr = get_itemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(775)
inline long IWMPListBoxCtrl::GetfirstVisibleItem ( ) {
    long _result = 0;
    HRESULT _hr = get_firstVisibleItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(776)
inline void IWMPListBoxCtrl::PutfirstVisibleItem ( long pVal ) {
    HRESULT _hr = put_firstVisibleItem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(777)
inline void IWMPListBoxCtrl::PutpopUp ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_popUp(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(778)
inline long IWMPListBoxCtrl::GetfocusItem ( ) {
    long _result = 0;
    HRESULT _hr = get_focusItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(779)
inline void IWMPListBoxCtrl::PutfocusItem ( long pVal ) {
    HRESULT _hr = put_focusItem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(780)
inline VARIANT_BOOL IWMPListBoxCtrl::Getborder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(781)
inline void IWMPListBoxCtrl::Putborder ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_border(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(782)
inline _bstr_t IWMPListBoxCtrl::IgetItem ( long nPos ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getItem(nPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(783)
inline HRESULT IWMPListBoxCtrl::IinsertItem ( long nPos, _bstr_t newVal ) {
    HRESULT _hr = raw_insertItem(nPos, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(784)
inline HRESULT IWMPListBoxCtrl::IappendItem ( _bstr_t newVal ) {
    HRESULT _hr = raw_appendItem(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(785)
inline HRESULT IWMPListBoxCtrl::IreplaceItem ( long nPos, _bstr_t newVal ) {
    HRESULT _hr = raw_replaceItem(nPos, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(786)
inline HRESULT IWMPListBoxCtrl::IdeleteItem ( long nPos ) {
    HRESULT _hr = raw_deleteItem(nPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(787)
inline HRESULT IWMPListBoxCtrl::IdeleteAll ( ) {
    HRESULT _hr = raw_deleteAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(788)
inline long IWMPListBoxCtrl::IfindItem ( long nStartIndex, _bstr_t newVal ) {
    long _result = 0;
    HRESULT _hr = raw_findItem(nStartIndex, newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(789)
inline long IWMPListBoxCtrl::IgetNextSelectedItem ( long nStartIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getNextSelectedItem(nStartIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline HRESULT IWMPListBoxCtrl::IsetSelectedState ( long nPos, VARIANT_BOOL vbSelected ) {
    HRESULT _hr = raw_setSelectedState(nPos, vbSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(791)
inline HRESULT IWMPListBoxCtrl::Ishow ( ) {
    HRESULT _hr = raw_show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(792)
inline HRESULT IWMPListBoxCtrl::Idismiss ( ) {
    HRESULT _hr = raw_dismiss();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPListBoxItem wrapper method implementations
//

#pragma implementation_key(793)
inline void IWMPListBoxItem::Putvalue ( _bstr_t _arg1 ) {
    HRESULT _hr = put_value(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPPlaylistCtrlColumn wrapper method implementations
//

#pragma implementation_key(794)
inline _bstr_t IWMPPlaylistCtrlColumn::GetcolumnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_columnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(795)
inline void IWMPPlaylistCtrlColumn::PutcolumnName ( _bstr_t pVal ) {
    HRESULT _hr = put_columnName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(796)
inline _bstr_t IWMPPlaylistCtrlColumn::GetcolumnID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_columnID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(797)
inline void IWMPPlaylistCtrlColumn::PutcolumnID ( _bstr_t pVal ) {
    HRESULT _hr = put_columnID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(798)
inline _bstr_t IWMPPlaylistCtrlColumn::GetcolumnResizeMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_columnResizeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(799)
inline void IWMPPlaylistCtrlColumn::PutcolumnResizeMode ( _bstr_t pVal ) {
    HRESULT _hr = put_columnResizeMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(800)
inline long IWMPPlaylistCtrlColumn::GetcolumnWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_columnWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(801)
inline void IWMPPlaylistCtrlColumn::PutcolumnWidth ( long pVal ) {
    HRESULT _hr = put_columnWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IWMPSliderCtrlEvents wrapper method implementations
//

#pragma implementation_key(802)
inline HRESULT IWMPSliderCtrlEvents::Iondragbegin ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1536, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(803)
inline HRESULT IWMPSliderCtrlEvents::Iondragend ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1537, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(804)
inline HRESULT IWMPSliderCtrlEvents::Ionpositionchange ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1538, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IWMPSliderCtrl wrapper method implementations
//

#pragma implementation_key(805)
inline _bstr_t IWMPSliderCtrl::Getdirection ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(806)
inline void IWMPSliderCtrl::Putdirection ( _bstr_t pVal ) {
    HRESULT _hr = put_direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(807)
inline VARIANT_BOOL IWMPSliderCtrl::Getslide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_slide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline void IWMPSliderCtrl::Putslide ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_slide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(809)
inline VARIANT_BOOL IWMPSliderCtrl::Gettiled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_tiled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(810)
inline void IWMPSliderCtrl::Puttiled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_tiled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(811)
inline _bstr_t IWMPSliderCtrl::GetforegroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(812)
inline void IWMPSliderCtrl::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(813)
inline _bstr_t IWMPSliderCtrl::GetforegroundEndColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_foregroundEndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(814)
inline void IWMPSliderCtrl::PutforegroundEndColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundEndColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(815)
inline _bstr_t IWMPSliderCtrl::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(816)
inline void IWMPSliderCtrl::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(817)
inline _bstr_t IWMPSliderCtrl::GetbackgroundEndColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundEndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(818)
inline void IWMPSliderCtrl::PutbackgroundEndColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundEndColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(819)
inline _bstr_t IWMPSliderCtrl::GetdisabledColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_disabledColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(820)
inline void IWMPSliderCtrl::PutdisabledColor ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(821)
inline _bstr_t IWMPSliderCtrl::GettransparencyColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_transparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(822)
inline void IWMPSliderCtrl::PuttransparencyColor ( _bstr_t pVal ) {
    HRESULT _hr = put_transparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(823)
inline _bstr_t IWMPSliderCtrl::GetforegroundImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_foregroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(824)
inline void IWMPSliderCtrl::PutforegroundImage ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(825)
inline _bstr_t IWMPSliderCtrl::GetbackgroundImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(826)
inline void IWMPSliderCtrl::PutbackgroundImage ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(827)
inline _bstr_t IWMPSliderCtrl::GetbackgroundHoverImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundHoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(828)
inline void IWMPSliderCtrl::PutbackgroundHoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundHoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(829)
inline _bstr_t IWMPSliderCtrl::GetdisabledImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_disabledImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(830)
inline void IWMPSliderCtrl::PutdisabledImage ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(831)
inline _bstr_t IWMPSliderCtrl::GetthumbImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_thumbImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(832)
inline void IWMPSliderCtrl::PutthumbImage ( _bstr_t pVal ) {
    HRESULT _hr = put_thumbImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(833)
inline _bstr_t IWMPSliderCtrl::GetthumbHoverImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_thumbHoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(834)
inline void IWMPSliderCtrl::PutthumbHoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_thumbHoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(835)
inline _bstr_t IWMPSliderCtrl::GetthumbDownImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_thumbDownImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(836)
inline void IWMPSliderCtrl::PutthumbDownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_thumbDownImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(837)
inline _bstr_t IWMPSliderCtrl::GetthumbDisabledImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_thumbDisabledImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(838)
inline void IWMPSliderCtrl::PutthumbDisabledImage ( _bstr_t pVal ) {
    HRESULT _hr = put_thumbDisabledImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(839)
inline float IWMPSliderCtrl::Getmin ( ) {
    float _result = 0;
    HRESULT _hr = get_min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(840)
inline void IWMPSliderCtrl::Putmin ( float pVal ) {
    HRESULT _hr = put_min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(841)
inline float IWMPSliderCtrl::Getmax ( ) {
    float _result = 0;
    HRESULT _hr = get_max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(842)
inline void IWMPSliderCtrl::Putmax ( float pVal ) {
    HRESULT _hr = put_max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(843)
inline float IWMPSliderCtrl::Getvalue ( ) {
    float _result = 0;
    HRESULT _hr = get_value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(844)
inline void IWMPSliderCtrl::Putvalue ( float pVal ) {
    HRESULT _hr = put_value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(845)
inline _bstr_t IWMPSliderCtrl::GettoolTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_toolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(846)
inline void IWMPSliderCtrl::PuttoolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_toolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(847)
inline _bstr_t IWMPSliderCtrl::Getcursor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(848)
inline void IWMPSliderCtrl::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(849)
inline int IWMPSliderCtrl::GetborderSize ( ) {
    int _result = 0;
    HRESULT _hr = get_borderSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(850)
inline void IWMPSliderCtrl::PutborderSize ( int pVal ) {
    HRESULT _hr = put_borderSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline _bstr_t IWMPSliderCtrl::GetforegroundHoverImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_foregroundHoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(852)
inline void IWMPSliderCtrl::PutforegroundHoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundHoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(853)
inline float IWMPSliderCtrl::GetforegroundProgress ( ) {
    float _result = 0;
    HRESULT _hr = get_foregroundProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline void IWMPSliderCtrl::PutforegroundProgress ( float pVal ) {
    HRESULT _hr = put_foregroundProgress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(855)
inline VARIANT_BOOL IWMPSliderCtrl::GetuseForegroundProgress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_useForegroundProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline void IWMPSliderCtrl::PutuseForegroundProgress ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_useForegroundProgress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IWMPVideoCtrlEvents wrapper method implementations
//

#pragma implementation_key(857)
inline HRESULT IWMPVideoCtrlEvents::Ionvideostart ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1658, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(858)
inline HRESULT IWMPVideoCtrlEvents::Ionvideoend ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1659, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IWMPVideoCtrl wrapper method implementations
//

#pragma implementation_key(859)
inline void IWMPVideoCtrl::Putwindowless ( VARIANT_BOOL pbClipped ) {
    HRESULT _hr = put_windowless(pbClipped);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(860)
inline VARIANT_BOOL IWMPVideoCtrl::Getwindowless ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_windowless(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(861)
inline void IWMPVideoCtrl::Putcursor ( _bstr_t pbstrCursor ) {
    HRESULT _hr = put_cursor(pbstrCursor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(862)
inline _bstr_t IWMPVideoCtrl::Getcursor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(863)
inline void IWMPVideoCtrl::PutbackgroundColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_backgroundColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(864)
inline _bstr_t IWMPVideoCtrl::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(865)
inline void IWMPVideoCtrl::PutmaintainAspectRatio ( VARIANT_BOOL pbMaintainAspectRatio ) {
    HRESULT _hr = put_maintainAspectRatio(pbMaintainAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(866)
inline VARIANT_BOOL IWMPVideoCtrl::GetmaintainAspectRatio ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_maintainAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(867)
inline void IWMPVideoCtrl::PuttoolTip ( _bstr_t bstrToolTip ) {
    HRESULT _hr = put_toolTip(bstrToolTip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(868)
inline _bstr_t IWMPVideoCtrl::GettoolTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_toolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(869)
inline VARIANT_BOOL IWMPVideoCtrl::GetfullScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline void IWMPVideoCtrl::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(871)
inline void IWMPVideoCtrl::PutshrinkToFit ( VARIANT_BOOL pbShrinkToFit ) {
    HRESULT _hr = put_shrinkToFit(pbShrinkToFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(872)
inline VARIANT_BOOL IWMPVideoCtrl::GetshrinkToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_shrinkToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(873)
inline void IWMPVideoCtrl::PutstretchToFit ( VARIANT_BOOL pbStretchToFit ) {
    HRESULT _hr = put_stretchToFit(pbStretchToFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(874)
inline VARIANT_BOOL IWMPVideoCtrl::GetstretchToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_stretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(875)
inline void IWMPVideoCtrl::Putzoom ( long pzoom ) {
    HRESULT _hr = put_zoom(pzoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(876)
inline long IWMPVideoCtrl::Getzoom ( ) {
    long _result = 0;
    HRESULT _hr = get_zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPEffectsCtrl wrapper method implementations
//

#pragma implementation_key(877)
inline VARIANT_BOOL IWMPEffectsCtrl::Getwindowed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_windowed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(878)
inline void IWMPEffectsCtrl::Putwindowed ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_windowed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(879)
inline VARIANT_BOOL IWMPEffectsCtrl::GetallowAll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_allowAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline void IWMPEffectsCtrl::PutallowAll ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_allowAll(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline void IWMPEffectsCtrl::PutcurrentEffectType ( _bstr_t pVal ) {
    HRESULT _hr = put_currentEffectType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(882)
inline _bstr_t IWMPEffectsCtrl::GetcurrentEffectType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentEffectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(883)
inline _bstr_t IWMPEffectsCtrl::GetcurrentEffectTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentEffectTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(884)
inline HRESULT IWMPEffectsCtrl::Inext ( ) {
    HRESULT _hr = raw_next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(885)
inline HRESULT IWMPEffectsCtrl::Iprevious ( ) {
    HRESULT _hr = raw_previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(886)
inline HRESULT IWMPEffectsCtrl::Isettings ( ) {
    HRESULT _hr = raw_settings();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(887)
inline IDispatchPtr IWMPEffectsCtrl::GetcurrentEffect ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_currentEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(888)
inline void IWMPEffectsCtrl::PutcurrentEffect ( IDispatch * p ) {
    HRESULT _hr = put_currentEffect(p);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(889)
inline HRESULT IWMPEffectsCtrl::InextEffect ( ) {
    HRESULT _hr = raw_nextEffect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(890)
inline HRESULT IWMPEffectsCtrl::IpreviousEffect ( ) {
    HRESULT _hr = raw_previousEffect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(891)
inline HRESULT IWMPEffectsCtrl::InextPreset ( ) {
    HRESULT _hr = raw_nextPreset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(892)
inline HRESULT IWMPEffectsCtrl::IpreviousPreset ( ) {
    HRESULT _hr = raw_previousPreset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(893)
inline long IWMPEffectsCtrl::GetcurrentPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_currentPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(894)
inline void IWMPEffectsCtrl::PutcurrentPreset ( long pVal ) {
    HRESULT _hr = put_currentPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(895)
inline _bstr_t IWMPEffectsCtrl::GetcurrentPresetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentPresetTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(896)
inline long IWMPEffectsCtrl::GetcurrentEffectPresetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_currentEffectPresetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline VARIANT_BOOL IWMPEffectsCtrl::GetfullScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(898)
inline void IWMPEffectsCtrl::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(899)
inline VARIANT_BOOL IWMPEffectsCtrl::GeteffectCanGoFullScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_effectCanGoFullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(900)
inline VARIANT_BOOL IWMPEffectsCtrl::GeteffectHasPropertyPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_effectHasPropertyPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(901)
inline long IWMPEffectsCtrl::GeteffectCount ( ) {
    long _result = 0;
    HRESULT _hr = get_effectCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(902)
inline _bstr_t IWMPEffectsCtrl::GeteffectTitle ( long index ) {
    BSTR _result = 0;
    HRESULT _hr = get_effectTitle(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(903)
inline _bstr_t IWMPEffectsCtrl::GeteffectType ( long index ) {
    BSTR _result = 0;
    HRESULT _hr = get_effectType(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPEqualizerSettingsCtrl wrapper method implementations
//

#pragma implementation_key(904)
inline VARIANT_BOOL IWMPEqualizerSettingsCtrl::Getbypass ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_bypass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(905)
inline void IWMPEqualizerSettingsCtrl::Putbypass ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_bypass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(906)
inline float IWMPEqualizerSettingsCtrl::GetgainLevel1 ( ) {
    float _result = 0;
    HRESULT _hr = get_gainLevel1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(907)
inline void IWMPEqualizerSettingsCtrl::PutgainLevel1 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel1(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(908)
inline float IWMPEqualizerSettingsCtrl::GetgainLevel2 ( ) {
    float _result = 0;
    HRESULT _hr = get_gainLevel2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(909)
inline void IWMPEqualizerSettingsCtrl::PutgainLevel2 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel2(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(910)
inline float IWMPEqualizerSettingsCtrl::GetgainLevel3 ( ) {
    float _result = 0;
    HRESULT _hr = get_gainLevel3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(911)
inline void IWMPEqualizerSettingsCtrl::PutgainLevel3 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel3(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(912)
inline float IWMPEqualizerSettingsCtrl::GetgainLevel4 ( ) {
    float _result = 0;
    HRESULT _hr = get_gainLevel4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(913)
inline void IWMPEqualizerSettingsCtrl::PutgainLevel4 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel4(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(914)
inline float IWMPEqualizerSettingsCtrl::GetgainLevel5 ( ) {
    float _result = 0;
    HRESULT _hr = get_gainLevel5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(915)
inline void IWMPEqualizerSettingsCtrl::PutgainLevel5 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel5(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(916)
inline float IWMPEqualizerSettingsCtrl::GetgainLevel6 ( ) {
    float _result = 0;
    HRESULT _hr = get_gainLevel6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(917)
inline void IWMPEqualizerSettingsCtrl::PutgainLevel6 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel6(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(918)
inline float IWMPEqualizerSettingsCtrl::GetgainLevel7 ( ) {
    float _result = 0;
    HRESULT _hr = get_gainLevel7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(919)
inline void IWMPEqualizerSettingsCtrl::PutgainLevel7 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel7(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(920)
inline float IWMPEqualizerSettingsCtrl::GetgainLevel8 ( ) {
    float _result = 0;
    HRESULT _hr = get_gainLevel8(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(921)
inline void IWMPEqualizerSettingsCtrl::PutgainLevel8 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel8(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(922)
inline float IWMPEqualizerSettingsCtrl::GetgainLevel9 ( ) {
    float _result = 0;
    HRESULT _hr = get_gainLevel9(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(923)
inline void IWMPEqualizerSettingsCtrl::PutgainLevel9 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel9(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(924)
inline float IWMPEqualizerSettingsCtrl::GetgainLevel10 ( ) {
    float _result = 0;
    HRESULT _hr = get_gainLevel10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline void IWMPEqualizerSettingsCtrl::PutgainLevel10 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel10(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(926)
inline float IWMPEqualizerSettingsCtrl::GetgainLevels ( long iIndex ) {
    float _result = 0;
    HRESULT _hr = get_gainLevels(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(927)
inline void IWMPEqualizerSettingsCtrl::PutgainLevels ( long iIndex, float pflLevel ) {
    HRESULT _hr = put_gainLevels(iIndex, pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(928)
inline HRESULT IWMPEqualizerSettingsCtrl::Ireset ( ) {
    HRESULT _hr = raw_reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(929)
inline long IWMPEqualizerSettingsCtrl::Getbands ( ) {
    long _result = 0;
    HRESULT _hr = get_bands(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline HRESULT IWMPEqualizerSettingsCtrl::InextPreset ( ) {
    HRESULT _hr = raw_nextPreset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(931)
inline HRESULT IWMPEqualizerSettingsCtrl::IpreviousPreset ( ) {
    HRESULT _hr = raw_previousPreset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(932)
inline long IWMPEqualizerSettingsCtrl::GetcurrentPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_currentPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(933)
inline void IWMPEqualizerSettingsCtrl::PutcurrentPreset ( long pVal ) {
    HRESULT _hr = put_currentPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(934)
inline _bstr_t IWMPEqualizerSettingsCtrl::GetcurrentPresetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentPresetTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(935)
inline long IWMPEqualizerSettingsCtrl::GetpresetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_presetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(936)
inline VARIANT_BOOL IWMPEqualizerSettingsCtrl::GetenhancedAudio ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enhancedAudio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(937)
inline void IWMPEqualizerSettingsCtrl::PutenhancedAudio ( VARIANT_BOOL pfVal ) {
    HRESULT _hr = put_enhancedAudio(pfVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(938)
inline long IWMPEqualizerSettingsCtrl::GetspeakerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_speakerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline void IWMPEqualizerSettingsCtrl::PutspeakerSize ( long plVal ) {
    HRESULT _hr = put_speakerSize(plVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline _bstr_t IWMPEqualizerSettingsCtrl::GetcurrentSpeakerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentSpeakerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(941)
inline long IWMPEqualizerSettingsCtrl::GettruBassLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_truBassLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(942)
inline void IWMPEqualizerSettingsCtrl::PuttruBassLevel ( long plTruBassLevel ) {
    HRESULT _hr = put_truBassLevel(plTruBassLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(943)
inline long IWMPEqualizerSettingsCtrl::GetwowLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_wowLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(944)
inline void IWMPEqualizerSettingsCtrl::PutwowLevel ( long plWowLevel ) {
    HRESULT _hr = put_wowLevel(plWowLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(945)
inline float IWMPEqualizerSettingsCtrl::GetsplineTension ( ) {
    float _result = 0;
    HRESULT _hr = get_splineTension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(946)
inline void IWMPEqualizerSettingsCtrl::PutsplineTension ( float pflSplineTension ) {
    HRESULT _hr = put_splineTension(pflSplineTension);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(947)
inline VARIANT_BOOL IWMPEqualizerSettingsCtrl::GetenableSplineTension ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enableSplineTension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(948)
inline void IWMPEqualizerSettingsCtrl::PutenableSplineTension ( VARIANT_BOOL pfEnableSplineTension ) {
    HRESULT _hr = put_enableSplineTension(pfEnableSplineTension);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(949)
inline _bstr_t IWMPEqualizerSettingsCtrl::GetpresetTitle ( long iIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_presetTitle(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(950)
inline VARIANT_BOOL IWMPEqualizerSettingsCtrl::Getnormalization ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_normalization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline void IWMPEqualizerSettingsCtrl::Putnormalization ( VARIANT_BOOL pfVal ) {
    HRESULT _hr = put_normalization(pfVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(952)
inline float IWMPEqualizerSettingsCtrl::GetnormalizationAverage ( ) {
    float _result = 0;
    HRESULT _hr = get_normalizationAverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline float IWMPEqualizerSettingsCtrl::GetnormalizationPeak ( ) {
    float _result = 0;
    HRESULT _hr = get_normalizationPeak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(954)
inline VARIANT_BOOL IWMPEqualizerSettingsCtrl::GetcrossFade ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_crossFade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline void IWMPEqualizerSettingsCtrl::PutcrossFade ( VARIANT_BOOL pfVal ) {
    HRESULT _hr = put_crossFade(pfVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(956)
inline long IWMPEqualizerSettingsCtrl::GetcrossFadeWindow ( ) {
    long _result = 0;
    HRESULT _hr = get_crossFadeWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline void IWMPEqualizerSettingsCtrl::PutcrossFadeWindow ( long plWindow ) {
    HRESULT _hr = put_crossFadeWindow(plWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPVideoSettingsCtrl wrapper method implementations
//

#pragma implementation_key(958)
inline long IWMPVideoSettingsCtrl::Getbrightness ( ) {
    long _result = 0;
    HRESULT _hr = get_brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(959)
inline void IWMPVideoSettingsCtrl::Putbrightness ( long pVal ) {
    HRESULT _hr = put_brightness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(960)
inline long IWMPVideoSettingsCtrl::Getcontrast ( ) {
    long _result = 0;
    HRESULT _hr = get_contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(961)
inline void IWMPVideoSettingsCtrl::Putcontrast ( long pVal ) {
    HRESULT _hr = put_contrast(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(962)
inline long IWMPVideoSettingsCtrl::Gethue ( ) {
    long _result = 0;
    HRESULT _hr = get_hue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(963)
inline void IWMPVideoSettingsCtrl::Puthue ( long pVal ) {
    HRESULT _hr = put_hue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(964)
inline long IWMPVideoSettingsCtrl::Getsaturation ( ) {
    long _result = 0;
    HRESULT _hr = get_saturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(965)
inline void IWMPVideoSettingsCtrl::Putsaturation ( long pVal ) {
    HRESULT _hr = put_saturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(966)
inline HRESULT IWMPVideoSettingsCtrl::Ireset ( ) {
    HRESULT _hr = raw_reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPDolbyDigitalSettingsCtrl wrapper method implementations
//

#pragma implementation_key(967)
inline HRESULT IWMPDolbyDigitalSettingsCtrl::Ireset ( ) {
    HRESULT _hr = raw_reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(968)
inline long IWMPDolbyDigitalSettingsCtrl::GetcurrentPreset ( ) {
    long _result = 0;
    HRESULT _hr = get_currentPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline void IWMPDolbyDigitalSettingsCtrl::PutcurrentPreset ( long plCurrentPreset ) {
    HRESULT _hr = put_currentPreset(plCurrentPreset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPEditCtrl wrapper method implementations
//

#pragma implementation_key(970)
inline _bstr_t IWMPEditCtrl::Getvalue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(971)
inline void IWMPEditCtrl::Putvalue ( _bstr_t pVal ) {
    HRESULT _hr = put_value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(972)
inline VARIANT_BOOL IWMPEditCtrl::Getborder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(973)
inline void IWMPEditCtrl::Putborder ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_border(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(974)
inline _bstr_t IWMPEditCtrl::Getjustification ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_justification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(975)
inline void IWMPEditCtrl::Putjustification ( _bstr_t pVal ) {
    HRESULT _hr = put_justification(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(976)
inline _bstr_t IWMPEditCtrl::GeteditStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_editStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(977)
inline void IWMPEditCtrl::PuteditStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_editStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(978)
inline VARIANT_BOOL IWMPEditCtrl::GetwordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_wordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(979)
inline void IWMPEditCtrl::PutwordWrap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_wordWrap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(980)
inline VARIANT_BOOL IWMPEditCtrl::GetreadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_readOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline void IWMPEditCtrl::PutreadOnly ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_readOnly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(982)
inline _bstr_t IWMPEditCtrl::GetforegroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(983)
inline void IWMPEditCtrl::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(984)
inline _bstr_t IWMPEditCtrl::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(985)
inline void IWMPEditCtrl::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(986)
inline long IWMPEditCtrl::GetfontSize ( ) {
    long _result = 0;
    HRESULT _hr = get_fontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(987)
inline void IWMPEditCtrl::PutfontSize ( long pVal ) {
    HRESULT _hr = put_fontSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(988)
inline _bstr_t IWMPEditCtrl::GetfontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(989)
inline void IWMPEditCtrl::PutfontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_fontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(990)
inline _bstr_t IWMPEditCtrl::GetfontFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fontFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(991)
inline void IWMPEditCtrl::PutfontFace ( _bstr_t pVal ) {
    HRESULT _hr = put_fontFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(992)
inline long IWMPEditCtrl::GettextLimit ( ) {
    long _result = 0;
    HRESULT _hr = get_textLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline void IWMPEditCtrl::PuttextLimit ( long pVal ) {
    HRESULT _hr = put_textLimit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(994)
inline long IWMPEditCtrl::GetlineCount ( ) {
    long _result = 0;
    HRESULT _hr = get_lineCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(995)
inline _bstr_t IWMPEditCtrl::IgetLine ( long nIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getLine(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(996)
inline long IWMPEditCtrl::IgetSelectionStart ( ) {
    long _result = 0;
    HRESULT _hr = raw_getSelectionStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline long IWMPEditCtrl::IgetSelectionEnd ( ) {
    long _result = 0;
    HRESULT _hr = raw_getSelectionEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(998)
inline HRESULT IWMPEditCtrl::IsetSelection ( long nStart, long nEnd ) {
    HRESULT _hr = raw_setSelection(nStart, nEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(999)
inline HRESULT IWMPEditCtrl::IreplaceSelection ( _bstr_t newVal ) {
    HRESULT _hr = raw_replaceSelection(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1000)
inline long IWMPEditCtrl::IgetLineIndex ( long nIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getLineIndex(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1001)
inline long IWMPEditCtrl::IgetLineFromChar ( long nPosition ) {
    long _result = 0;
    HRESULT _hr = raw_getLineFromChar(nPosition, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPSkinList wrapper method implementations
//

#pragma implementation_key(1002)
inline HRESULT IWMPSkinList::IupdateBasketColumns ( ) {
    HRESULT _hr = raw_updateBasketColumns();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1003)
inline HRESULT IWMPSkinList::IhighContrastChange ( ) {
    HRESULT _hr = raw_highContrastChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPPluginUIHost wrapper method implementations
//

#pragma implementation_key(1004)
inline _bstr_t IWMPPluginUIHost::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1005)
inline void IWMPPluginUIHost::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1006)
inline _bstr_t IWMPPluginUIHost::GetobjectID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_objectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1007)
inline void IWMPPluginUIHost::PutobjectID ( _bstr_t pVal ) {
    HRESULT _hr = put_objectID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1008)
inline _variant_t IWMPPluginUIHost::IgetProperty ( _bstr_t bstrName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getProperty(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1009)
inline HRESULT IWMPPluginUIHost::IsetProperty ( _bstr_t bstrName, const _variant_t & newVal ) {
    HRESULT _hr = raw_setProperty(bstrName, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPMenuCtrl wrapper method implementations
//

#pragma implementation_key(1010)
inline HRESULT IWMPMenuCtrl::IdeleteAllItems ( ) {
    HRESULT _hr = raw_deleteAllItems();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1011)
inline HRESULT IWMPMenuCtrl::IappendItem ( long nID, _bstr_t bstrItem ) {
    HRESULT _hr = raw_appendItem(nID, bstrItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1012)
inline HRESULT IWMPMenuCtrl::IappendSeparator ( ) {
    HRESULT _hr = raw_appendSeparator();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1013)
inline HRESULT IWMPMenuCtrl::IenableItem ( long nID, VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_enableItem(nID, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1014)
inline HRESULT IWMPMenuCtrl::IcheckItem ( long nID, VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_checkItem(nID, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1015)
inline HRESULT IWMPMenuCtrl::IcheckRadioItem ( long nID, VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_checkRadioItem(nID, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1016)
inline long IWMPMenuCtrl::GetshowFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_showFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1017)
inline void IWMPMenuCtrl::PutshowFlags ( long pVal ) {
    HRESULT _hr = put_showFlags(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1018)
inline long IWMPMenuCtrl::Ishow ( ) {
    long _result = 0;
    HRESULT _hr = raw_show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1019)
inline HRESULT IWMPMenuCtrl::IshowEx ( long nID ) {
    HRESULT _hr = raw_showEx(nID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPAutoMenuCtrl wrapper method implementations
//

#pragma implementation_key(1020)
inline HRESULT IWMPAutoMenuCtrl::Ishow ( _bstr_t newVal ) {
    HRESULT _hr = raw_show(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPRegionalButtonCtrl wrapper method implementations
//

#pragma implementation_key(1021)
inline _bstr_t IWMPRegionalButtonCtrl::Getimage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1022)
inline void IWMPRegionalButtonCtrl::Putimage ( _bstr_t pVal ) {
    HRESULT _hr = put_image(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1023)
inline _bstr_t IWMPRegionalButtonCtrl::GethoverImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_hoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1024)
inline void IWMPRegionalButtonCtrl::PuthoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1025)
inline _bstr_t IWMPRegionalButtonCtrl::GetdownImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_downImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1026)
inline void IWMPRegionalButtonCtrl::PutdownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_downImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1027)
inline _bstr_t IWMPRegionalButtonCtrl::GethoverDownImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_hoverDownImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1028)
inline void IWMPRegionalButtonCtrl::PuthoverDownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverDownImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline _bstr_t IWMPRegionalButtonCtrl::GethoverHoverImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_hoverHoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1030)
inline void IWMPRegionalButtonCtrl::PuthoverHoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverHoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline _bstr_t IWMPRegionalButtonCtrl::GetdisabledImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_disabledImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1032)
inline void IWMPRegionalButtonCtrl::PutdisabledImage ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1033)
inline _bstr_t IWMPRegionalButtonCtrl::GetmappingImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_mappingImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1034)
inline void IWMPRegionalButtonCtrl::PutmappingImage ( _bstr_t pVal ) {
    HRESULT _hr = put_mappingImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1035)
inline _bstr_t IWMPRegionalButtonCtrl::GettransparencyColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_transparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1036)
inline void IWMPRegionalButtonCtrl::PuttransparencyColor ( _bstr_t pVal ) {
    HRESULT _hr = put_transparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1037)
inline _bstr_t IWMPRegionalButtonCtrl::Getcursor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1038)
inline void IWMPRegionalButtonCtrl::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1039)
inline VARIANT_BOOL IWMPRegionalButtonCtrl::GetshowBackground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1040)
inline void IWMPRegionalButtonCtrl::PutshowBackground ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showBackground(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1041)
inline VARIANT_BOOL IWMPRegionalButtonCtrl::Getradio ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_radio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline void IWMPRegionalButtonCtrl::Putradio ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_radio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1043)
inline long IWMPRegionalButtonCtrl::GetbuttonCount ( ) {
    long _result = 0;
    HRESULT _hr = get_buttonCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1044)
inline IDispatchPtr IWMPRegionalButtonCtrl::IcreateButton ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_createButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1045)
inline IDispatchPtr IWMPRegionalButtonCtrl::IgetButton ( long nButton ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_getButton(nButton, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1046)
inline HRESULT IWMPRegionalButtonCtrl::IClick ( long nButton ) {
    HRESULT _hr = raw_Click(nButton);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1047)
inline float IWMPRegionalButtonCtrl::GethueShift ( ) {
    float _result = 0;
    HRESULT _hr = get_hueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1048)
inline void IWMPRegionalButtonCtrl::PuthueShift ( float pVal ) {
    HRESULT _hr = put_hueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1049)
inline float IWMPRegionalButtonCtrl::Getsaturation ( ) {
    float _result = 0;
    HRESULT _hr = get_saturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1050)
inline void IWMPRegionalButtonCtrl::Putsaturation ( float pVal ) {
    HRESULT _hr = put_saturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IWMPRegionalButtonEvents wrapper method implementations
//

#pragma implementation_key(1051)
inline HRESULT IWMPRegionalButtonEvents::Ionblur ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14f0, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1052)
inline HRESULT IWMPRegionalButtonEvents::Ionfocus ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14f1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1053)
inline HRESULT IWMPRegionalButtonEvents::Ionclick ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14f2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1054)
inline HRESULT IWMPRegionalButtonEvents::Iondblclick ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14f3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1055)
inline HRESULT IWMPRegionalButtonEvents::Ionmousedown ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14f4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1056)
inline HRESULT IWMPRegionalButtonEvents::Ionmouseup ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14f5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1057)
inline HRESULT IWMPRegionalButtonEvents::Ionmousemove ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14f6, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1058)
inline HRESULT IWMPRegionalButtonEvents::Ionmouseover ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14f7, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1059)
inline HRESULT IWMPRegionalButtonEvents::Ionmouseout ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14f8, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1060)
inline HRESULT IWMPRegionalButtonEvents::Ionkeypress ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14f9, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1061)
inline HRESULT IWMPRegionalButtonEvents::Ionkeydown ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14fa, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1062)
inline HRESULT IWMPRegionalButtonEvents::Ionkeyup ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14fb, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IWMPRegionalButton wrapper method implementations
//

#pragma implementation_key(1063)
inline _bstr_t IWMPRegionalButton::GetupToolTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_upToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1064)
inline void IWMPRegionalButton::PutupToolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_upToolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1065)
inline _bstr_t IWMPRegionalButton::GetdownToolTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_downToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1066)
inline void IWMPRegionalButton::PutdownToolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_downToolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1067)
inline _bstr_t IWMPRegionalButton::GetmappingColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_mappingColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1068)
inline void IWMPRegionalButton::PutmappingColor ( _bstr_t pVal ) {
    HRESULT _hr = put_mappingColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1069)
inline VARIANT_BOOL IWMPRegionalButton::Getenabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1070)
inline void IWMPRegionalButton::Putenabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_enabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1071)
inline VARIANT_BOOL IWMPRegionalButton::Getsticky ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_sticky(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1072)
inline void IWMPRegionalButton::Putsticky ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_sticky(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1073)
inline VARIANT_BOOL IWMPRegionalButton::Getdown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_down(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1074)
inline void IWMPRegionalButton::Putdown ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_down(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1075)
inline long IWMPRegionalButton::Getindex ( ) {
    long _result = 0;
    HRESULT _hr = get_index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1076)
inline VARIANT_BOOL IWMPRegionalButton::GettabStop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_tabStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1077)
inline void IWMPRegionalButton::PuttabStop ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_tabStop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1078)
inline _bstr_t IWMPRegionalButton::Getcursor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1079)
inline void IWMPRegionalButton::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1080)
inline HRESULT IWMPRegionalButton::IClick ( ) {
    HRESULT _hr = raw_Click();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1081)
inline _bstr_t IWMPRegionalButton::GetaccName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_accName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1082)
inline void IWMPRegionalButton::PutaccName ( _bstr_t pszName ) {
    HRESULT _hr = put_accName(pszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1083)
inline _bstr_t IWMPRegionalButton::GetaccDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_accDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1084)
inline void IWMPRegionalButton::PutaccDescription ( _bstr_t pszDescription ) {
    HRESULT _hr = put_accDescription(pszDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1085)
inline _bstr_t IWMPRegionalButton::GetaccKeyboardShortcut ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_accKeyboardShortcut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1086)
inline void IWMPRegionalButton::PutaccKeyboardShortcut ( _bstr_t pszShortcut ) {
    HRESULT _hr = put_accKeyboardShortcut(pszShortcut);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IWMPCustomSliderCtrlEvents wrapper method implementations
//

#pragma implementation_key(1087)
inline HRESULT IWMPCustomSliderCtrlEvents::Iondragbegin ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x139c, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1088)
inline HRESULT IWMPCustomSliderCtrlEvents::Iondragend ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x139d, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1089)
inline HRESULT IWMPCustomSliderCtrlEvents::Ionpositionchange ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x139e, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IWMPCustomSlider wrapper method implementations
//

#pragma implementation_key(1090)
inline _bstr_t IWMPCustomSlider::Getcursor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1091)
inline void IWMPCustomSlider::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1092)
inline float IWMPCustomSlider::Getmin ( ) {
    float _result = 0;
    HRESULT _hr = get_min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1093)
inline void IWMPCustomSlider::Putmin ( float pVal ) {
    HRESULT _hr = put_min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1094)
inline float IWMPCustomSlider::Getmax ( ) {
    float _result = 0;
    HRESULT _hr = get_max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1095)
inline void IWMPCustomSlider::Putmax ( float pVal ) {
    HRESULT _hr = put_max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1096)
inline float IWMPCustomSlider::Getvalue ( ) {
    float _result = 0;
    HRESULT _hr = get_value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1097)
inline void IWMPCustomSlider::Putvalue ( float pVal ) {
    HRESULT _hr = put_value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1098)
inline _bstr_t IWMPCustomSlider::GettoolTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_toolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1099)
inline void IWMPCustomSlider::PuttoolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_toolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1100)
inline _bstr_t IWMPCustomSlider::GetpositionImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_positionImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1101)
inline void IWMPCustomSlider::PutpositionImage ( _bstr_t pVal ) {
    HRESULT _hr = put_positionImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1102)
inline _bstr_t IWMPCustomSlider::Getimage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1103)
inline void IWMPCustomSlider::Putimage ( _bstr_t pVal ) {
    HRESULT _hr = put_image(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1104)
inline _bstr_t IWMPCustomSlider::GethoverImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_hoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1105)
inline void IWMPCustomSlider::PuthoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1106)
inline _bstr_t IWMPCustomSlider::GetdisabledImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_disabledImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1107)
inline void IWMPCustomSlider::PutdisabledImage ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1108)
inline _bstr_t IWMPCustomSlider::GetdownImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_downImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1109)
inline void IWMPCustomSlider::PutdownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_downImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1110)
inline _bstr_t IWMPCustomSlider::GettransparencyColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_transparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1111)
inline void IWMPCustomSlider::PuttransparencyColor ( _bstr_t pVal ) {
    HRESULT _hr = put_transparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPTextCtrl wrapper method implementations
//

#pragma implementation_key(1112)
inline _bstr_t IWMPTextCtrl::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1113)
inline void IWMPTextCtrl::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1114)
inline _bstr_t IWMPTextCtrl::GetfontFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fontFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1115)
inline void IWMPTextCtrl::PutfontFace ( _bstr_t pVal ) {
    HRESULT _hr = put_fontFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1116)
inline _bstr_t IWMPTextCtrl::GetfontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1117)
inline void IWMPTextCtrl::PutfontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_fontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1118)
inline long IWMPTextCtrl::GetfontSize ( ) {
    long _result = 0;
    HRESULT _hr = get_fontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1119)
inline void IWMPTextCtrl::PutfontSize ( long pVal ) {
    HRESULT _hr = put_fontSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1120)
inline _bstr_t IWMPTextCtrl::GetforegroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1121)
inline void IWMPTextCtrl::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1122)
inline _bstr_t IWMPTextCtrl::GethoverBackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_hoverBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1123)
inline void IWMPTextCtrl::PuthoverBackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverBackgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1124)
inline _bstr_t IWMPTextCtrl::GethoverForegroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_hoverForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1125)
inline void IWMPTextCtrl::PuthoverForegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverForegroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1126)
inline _bstr_t IWMPTextCtrl::GethoverFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_hoverFontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1127)
inline void IWMPTextCtrl::PuthoverFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverFontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1128)
inline _bstr_t IWMPTextCtrl::Getvalue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1129)
inline void IWMPTextCtrl::Putvalue ( _bstr_t pVal ) {
    HRESULT _hr = put_value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1130)
inline _bstr_t IWMPTextCtrl::GettoolTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_toolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1131)
inline void IWMPTextCtrl::PuttoolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_toolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1132)
inline _bstr_t IWMPTextCtrl::GetdisabledFontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_disabledFontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1133)
inline void IWMPTextCtrl::PutdisabledFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledFontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1134)
inline _bstr_t IWMPTextCtrl::GetdisabledForegroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_disabledForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1135)
inline void IWMPTextCtrl::PutdisabledForegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledForegroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1136)
inline _bstr_t IWMPTextCtrl::GetdisabledBackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_disabledBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1137)
inline void IWMPTextCtrl::PutdisabledBackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledBackgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1138)
inline VARIANT_BOOL IWMPTextCtrl::GetfontSmoothing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_fontSmoothing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1139)
inline void IWMPTextCtrl::PutfontSmoothing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_fontSmoothing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1140)
inline _bstr_t IWMPTextCtrl::Getjustification ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_justification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1141)
inline void IWMPTextCtrl::Putjustification ( _bstr_t pVal ) {
    HRESULT _hr = put_justification(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1142)
inline VARIANT_BOOL IWMPTextCtrl::GetwordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_wordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1143)
inline void IWMPTextCtrl::PutwordWrap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_wordWrap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1144)
inline _bstr_t IWMPTextCtrl::Getcursor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1145)
inline void IWMPTextCtrl::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1146)
inline VARIANT_BOOL IWMPTextCtrl::Getscrolling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_scrolling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1147)
inline void IWMPTextCtrl::Putscrolling ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_scrolling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1148)
inline _bstr_t IWMPTextCtrl::GetscrollingDirection ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_scrollingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1149)
inline void IWMPTextCtrl::PutscrollingDirection ( _bstr_t pVal ) {
    HRESULT _hr = put_scrollingDirection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1150)
inline int IWMPTextCtrl::GetscrollingDelay ( ) {
    int _result = 0;
    HRESULT _hr = get_scrollingDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1151)
inline void IWMPTextCtrl::PutscrollingDelay ( int pVal ) {
    HRESULT _hr = put_scrollingDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1152)
inline int IWMPTextCtrl::GetscrollingAmount ( ) {
    int _result = 0;
    HRESULT _hr = get_scrollingAmount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1153)
inline void IWMPTextCtrl::PutscrollingAmount ( int pVal ) {
    HRESULT _hr = put_scrollingAmount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1154)
inline int IWMPTextCtrl::GettextWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_textWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1155)
inline VARIANT_BOOL IWMPTextCtrl::GetonGlass ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_onGlass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1156)
inline void IWMPTextCtrl::PutonGlass ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_onGlass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1157)
inline VARIANT_BOOL IWMPTextCtrl::GetdisableGlassBlurBackground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_disableGlassBlurBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1158)
inline void IWMPTextCtrl::PutdisableGlassBlurBackground ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_disableGlassBlurBackground(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITaskCntrCtrl wrapper method implementations
//

#pragma implementation_key(1159)
inline IUnknownPtr ITaskCntrCtrl::GetCurrentContainer ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_CurrentContainer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1160)
inline void ITaskCntrCtrl::PutCurrentContainer ( IUnknown * ppUnk ) {
    HRESULT _hr = put_CurrentContainer(ppUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1161)
inline HRESULT ITaskCntrCtrl::IActivate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _WMPCoreEvents wrapper method implementations
//

#pragma implementation_key(1162)
inline HRESULT _WMPCoreEvents::IOpenStateChange ( long NewState ) {
    return _com_dispatch_method(this, 0x1389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewState);
}

#pragma implementation_key(1163)
inline HRESULT _WMPCoreEvents::IPlayStateChange ( long NewState ) {
    return _com_dispatch_method(this, 0x13ed, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewState);
}

#pragma implementation_key(1164)
inline HRESULT _WMPCoreEvents::IAudioLanguageChange ( long LangID ) {
    return _com_dispatch_method(this, 0x13ee, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", LangID);
}

#pragma implementation_key(1165)
inline HRESULT _WMPCoreEvents::IStatusChange ( ) {
    return _com_dispatch_method(this, 0x138a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1166)
inline HRESULT _WMPCoreEvents::IScriptCommand ( _bstr_t scType, _bstr_t Param ) {
    return _com_dispatch_method(this, 0x14b5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)scType, (BSTR)Param);
}

#pragma implementation_key(1167)
inline HRESULT _WMPCoreEvents::INewStream ( ) {
    return _com_dispatch_method(this, 0x151b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1168)
inline HRESULT _WMPCoreEvents::IDisconnect ( long Result ) {
    return _com_dispatch_method(this, 0x1519, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Result);
}

#pragma implementation_key(1169)
inline HRESULT _WMPCoreEvents::IBuffering ( VARIANT_BOOL Start ) {
    return _com_dispatch_method(this, 0x151a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b", Start);
}

#pragma implementation_key(1170)
inline HRESULT _WMPCoreEvents::IError ( ) {
    return _com_dispatch_method(this, 0x157d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1171)
inline HRESULT _WMPCoreEvents::IWarning ( long WarningType, long Param, _bstr_t Description ) {
    return _com_dispatch_method(this, 0x15e1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0008", WarningType, Param, (BSTR)Description);
}

#pragma implementation_key(1172)
inline HRESULT _WMPCoreEvents::IEndOfStream ( long Result ) {
    return _com_dispatch_method(this, 0x1451, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Result);
}

#pragma implementation_key(1173)
inline HRESULT _WMPCoreEvents::IPositionChange ( double oldPosition, double newPosition ) {
    return _com_dispatch_method(this, 0x1452, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005", oldPosition, newPosition);
}

#pragma implementation_key(1174)
inline HRESULT _WMPCoreEvents::IMarkerHit ( long MarkerNum ) {
    return _com_dispatch_method(this, 0x1453, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", MarkerNum);
}

#pragma implementation_key(1175)
inline HRESULT _WMPCoreEvents::IDurationUnitChange ( long NewDurationUnit ) {
    return _com_dispatch_method(this, 0x1454, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewDurationUnit);
}

#pragma implementation_key(1176)
inline HRESULT _WMPCoreEvents::ICdromMediaChange ( long CdromNum ) {
    return _com_dispatch_method(this, 0x1645, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", CdromNum);
}

#pragma implementation_key(1177)
inline HRESULT _WMPCoreEvents::IPlaylistChange ( IDispatch * Playlist, enum WMPPlaylistChangeEventType change ) {
    return _com_dispatch_method(this, 0x16a9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", Playlist, change);
}

#pragma implementation_key(1178)
inline HRESULT _WMPCoreEvents::ICurrentPlaylistChange ( enum WMPPlaylistChangeEventType change ) {
    return _com_dispatch_method(this, 0x16ac, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", change);
}

#pragma implementation_key(1179)
inline HRESULT _WMPCoreEvents::ICurrentPlaylistItemAvailable ( _bstr_t bstrItemName ) {
    return _com_dispatch_method(this, 0x16ad, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrItemName);
}

#pragma implementation_key(1180)
inline HRESULT _WMPCoreEvents::IMediaChange ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x16aa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(1181)
inline HRESULT _WMPCoreEvents::ICurrentMediaItemAvailable ( _bstr_t bstrItemName ) {
    return _com_dispatch_method(this, 0x16ab, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrItemName);
}

#pragma implementation_key(1182)
inline HRESULT _WMPCoreEvents::ICurrentItemChange ( IDispatch * pdispMedia ) {
    return _com_dispatch_method(this, 0x16ae, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pdispMedia);
}

#pragma implementation_key(1183)
inline HRESULT _WMPCoreEvents::IMediaCollectionChange ( ) {
    return _com_dispatch_method(this, 0x16af, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1184)
inline HRESULT _WMPCoreEvents::IMediaCollectionAttributeStringAdded ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal ) {
    return _com_dispatch_method(this, 0x16b0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrAttribVal);
}

#pragma implementation_key(1185)
inline HRESULT _WMPCoreEvents::IMediaCollectionAttributeStringRemoved ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal ) {
    return _com_dispatch_method(this, 0x16b1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrAttribVal);
}

#pragma implementation_key(1186)
inline HRESULT _WMPCoreEvents::IMediaCollectionAttributeStringChanged ( _bstr_t bstrAttribName, _bstr_t bstrOldAttribVal, _bstr_t bstrNewAttribVal ) {
    return _com_dispatch_method(this, 0x16bc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrOldAttribVal, (BSTR)bstrNewAttribVal);
}

#pragma implementation_key(1187)
inline HRESULT _WMPCoreEvents::IPlaylistCollectionChange ( ) {
    return _com_dispatch_method(this, 0x16b2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1188)
inline HRESULT _WMPCoreEvents::IPlaylistCollectionPlaylistAdded ( _bstr_t bstrPlaylistName ) {
    return _com_dispatch_method(this, 0x16b3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrPlaylistName);
}

#pragma implementation_key(1189)
inline HRESULT _WMPCoreEvents::IPlaylistCollectionPlaylistRemoved ( _bstr_t bstrPlaylistName ) {
    return _com_dispatch_method(this, 0x16b4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrPlaylistName);
}

#pragma implementation_key(1190)
inline HRESULT _WMPCoreEvents::IPlaylistCollectionPlaylistSetAsDeleted ( _bstr_t bstrPlaylistName, VARIANT_BOOL varfIsDeleted ) {
    return _com_dispatch_method(this, 0x16ba, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x000b", (BSTR)bstrPlaylistName, varfIsDeleted);
}

#pragma implementation_key(1191)
inline HRESULT _WMPCoreEvents::IModeChange ( _bstr_t ModeName, VARIANT_BOOL NewValue ) {
    return _com_dispatch_method(this, 0x16bb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x000b", (BSTR)ModeName, NewValue);
}

#pragma implementation_key(1192)
inline HRESULT _WMPCoreEvents::IMediaError ( IDispatch * pMediaObject ) {
    return _com_dispatch_method(this, 0x16bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pMediaObject);
}

#pragma implementation_key(1193)
inline HRESULT _WMPCoreEvents::IOpenPlaylistSwitch ( IDispatch * pItem ) {
    return _com_dispatch_method(this, 0x16bf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pItem);
}

#pragma implementation_key(1194)
inline HRESULT _WMPCoreEvents::IDomainChange ( _bstr_t strDomain ) {
    return _com_dispatch_method(this, 0x16be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)strDomain);
}

#pragma implementation_key(1195)
inline HRESULT _WMPCoreEvents::IStringCollectionChange ( IDispatch * pdispStringCollection, enum WMPStringCollectionChangeEventType change, long lCollectionIndex ) {
    return _com_dispatch_method(this, 0x16c0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", pdispStringCollection, change, lCollectionIndex);
}

#pragma implementation_key(1196)
inline HRESULT _WMPCoreEvents::IMediaCollectionMediaAdded ( IDispatch * pdispMedia ) {
    return _com_dispatch_method(this, 0x16c1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pdispMedia);
}

#pragma implementation_key(1197)
inline HRESULT _WMPCoreEvents::IMediaCollectionMediaRemoved ( IDispatch * pdispMedia ) {
    return _com_dispatch_method(this, 0x16c2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pdispMedia);
}

//
// interface IWMPGraphEventHandler wrapper method implementations
//

#pragma implementation_key(1198)
inline HRESULT IWMPGraphEventHandler::INotifyGraphStateChange ( ULONG_PTR punkGraph, long lGraphState ) {
    HRESULT _hr = raw_NotifyGraphStateChange(punkGraph, lGraphState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1199)
inline HRESULT IWMPGraphEventHandler::IAsyncNotifyGraphStateChange ( ULONG_PTR punkGraph, long lGraphState ) {
    HRESULT _hr = raw_AsyncNotifyGraphStateChange(punkGraph, lGraphState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1200)
inline HRESULT IWMPGraphEventHandler::INotifyRateChange ( ULONG_PTR punkGraph, double dRate ) {
    HRESULT _hr = raw_NotifyRateChange(punkGraph, dRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1201)
inline HRESULT IWMPGraphEventHandler::INotifyPlaybackEnd ( ULONG_PTR punkGraph, _bstr_t bstrQueuedUrl, ULONG_PTR dwCurrentContext ) {
    HRESULT _hr = raw_NotifyPlaybackEnd(punkGraph, bstrQueuedUrl, dwCurrentContext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1202)
inline HRESULT IWMPGraphEventHandler::INotifyStreamEnd ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyStreamEnd(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1203)
inline HRESULT IWMPGraphEventHandler::INotifyScriptCommand ( ULONG_PTR punkGraph, _bstr_t bstrCommand, _bstr_t bstrParam ) {
    HRESULT _hr = raw_NotifyScriptCommand(punkGraph, bstrCommand, bstrParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1204)
inline HRESULT IWMPGraphEventHandler::INotifyEarlyScriptCommand ( ULONG_PTR punkGraph, _bstr_t bstrCommand, _bstr_t bstrParam, double dTime ) {
    HRESULT _hr = raw_NotifyEarlyScriptCommand(punkGraph, bstrCommand, bstrParam, dTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1205)
inline HRESULT IWMPGraphEventHandler::INotifyMarkerHit ( ULONG_PTR punkGraph, long lMarker ) {
    HRESULT _hr = raw_NotifyMarkerHit(punkGraph, lMarker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1206)
inline HRESULT IWMPGraphEventHandler::INotifyGraphError ( ULONG_PTR punkGraph, long lErrMajor, long lErrMinor, long lCondition, _bstr_t bstrInfo, IUnknown * punkGraphData ) {
    HRESULT _hr = raw_NotifyGraphError(punkGraph, lErrMajor, lErrMinor, lCondition, bstrInfo, punkGraphData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1207)
inline HRESULT IWMPGraphEventHandler::INotifyAcquireCredentials ( ULONG_PTR punkGraph, _bstr_t bstrRealm, _bstr_t bstrSite, _bstr_t bstrUser, _bstr_t bstrPassword, unsigned long * pdwFlags, VARIANT_BOOL * pfCancel ) {
    HRESULT _hr = raw_NotifyAcquireCredentials(punkGraph, bstrRealm, bstrSite, bstrUser, bstrPassword, pdwFlags, pfCancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1208)
inline HRESULT IWMPGraphEventHandler::INotifyUntrustedLicense ( ULONG_PTR punkGraph, _bstr_t bstrURL, VARIANT_BOOL * pfCancel ) {
    HRESULT _hr = raw_NotifyUntrustedLicense(punkGraph, bstrURL, pfCancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1209)
inline HRESULT IWMPGraphEventHandler::INotifyLicenseDialog ( ULONG_PTR punkGraph, _bstr_t bstrURL, _bstr_t bstrContent, unsigned char * pPostData, unsigned long dwPostDataSize, long lResult ) {
    HRESULT _hr = raw_NotifyLicenseDialog(punkGraph, bstrURL, bstrContent, pPostData, dwPostDataSize, lResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1210)
inline HRESULT IWMPGraphEventHandler::INotifyNeedsIndividualization ( ULONG_PTR punkGraph, VARIANT_BOOL * pfResult ) {
    HRESULT _hr = raw_NotifyNeedsIndividualization(punkGraph, pfResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1211)
inline HRESULT IWMPGraphEventHandler::INotifyNewMetadata ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyNewMetadata(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1212)
inline HRESULT IWMPGraphEventHandler::INotifyNewMediaCaps ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyNewMediaCaps(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1213)
inline HRESULT IWMPGraphEventHandler::INotifyDisconnect ( ULONG_PTR punkGraph, long lResult ) {
    HRESULT _hr = raw_NotifyDisconnect(punkGraph, lResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1214)
inline HRESULT IWMPGraphEventHandler::INotifySave ( ULONG_PTR punkGraph, long fStarted, long lResult ) {
    HRESULT _hr = raw_NotifySave(punkGraph, fStarted, lResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1215)
inline HRESULT IWMPGraphEventHandler::INotifyDelayClose ( ULONG_PTR punkGraph, VARIANT_BOOL fDelay ) {
    HRESULT _hr = raw_NotifyDelayClose(punkGraph, fDelay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1216)
inline HRESULT IWMPGraphEventHandler::INotifyDVD ( ULONG_PTR punkGraph, long lEventCode, long lParam1, long lParam2 ) {
    HRESULT _hr = raw_NotifyDVD(punkGraph, lEventCode, lParam1, lParam2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1217)
inline HRESULT IWMPGraphEventHandler::INotifyRequestAppThreadAction ( ULONG_PTR punkGraph, unsigned long dwAction ) {
    HRESULT _hr = raw_NotifyRequestAppThreadAction(punkGraph, dwAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1218)
inline HRESULT IWMPGraphEventHandler::INotifyPrerollReady ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyPrerollReady(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1219)
inline HRESULT IWMPGraphEventHandler::INotifyNewIcons ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyNewIcons(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1220)
inline HRESULT IWMPGraphEventHandler::INotifyStepComplete ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyStepComplete(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1221)
inline HRESULT IWMPGraphEventHandler::INotifyNewBitrate ( ULONG_PTR punkGraph, unsigned long dwBitrate ) {
    HRESULT _hr = raw_NotifyNewBitrate(punkGraph, dwBitrate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1222)
inline HRESULT IWMPGraphEventHandler::INotifyGraphCreationPreRender ( ULONG_PTR punkGraph, ULONG_PTR punkFilterGraph, ULONG_PTR punkCardeaEncConfig, ULONG_PTR phrContinue, ULONG_PTR hEventToSet ) {
    HRESULT _hr = raw_NotifyGraphCreationPreRender(punkGraph, punkFilterGraph, punkCardeaEncConfig, phrContinue, hEventToSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1223)
inline HRESULT IWMPGraphEventHandler::INotifyGraphCreationPostRender ( ULONG_PTR punkGraph, ULONG_PTR punkFilterGraph, ULONG_PTR phrContinue, ULONG_PTR hEventToSet ) {
    HRESULT _hr = raw_NotifyGraphCreationPostRender(punkGraph, punkFilterGraph, phrContinue, hEventToSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1224)
inline HRESULT IWMPGraphEventHandler::INotifyGraphUserEvent ( ULONG_PTR punkGraph, long EventCode ) {
    HRESULT _hr = raw_NotifyGraphUserEvent(punkGraph, EventCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1225)
inline HRESULT IWMPGraphEventHandler::INotifyRevocation ( ULONG_PTR punkGraph, VARIANT_BOOL * pfResult ) {
    HRESULT _hr = raw_NotifyRevocation(punkGraph, pfResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1226)
inline HRESULT IWMPGraphEventHandler::INotifyNeedsWMGraphIndividualization ( ULONG_PTR punkGraph, ULONG_PTR phWnd, ULONG_PTR hIndivEvent, VARIANT_BOOL * pfCancel, VARIANT_BOOL * pfResult ) {
    HRESULT _hr = raw_NotifyNeedsWMGraphIndividualization(punkGraph, phWnd, hIndivEvent, pfCancel, pfResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1227)
inline HRESULT IWMPGraphEventHandler::INotifyNeedsFullscreen ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyNeedsFullscreen(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBattery wrapper method implementations
//

#pragma implementation_key(1228)
inline long IBattery::GetpresetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_presetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1229)
inline IDispatchPtr IBattery::Getpreset ( long nIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_preset(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IBatteryPreset wrapper method implementations
//

#pragma implementation_key(1230)
inline _bstr_t IBatteryPreset::Gettitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1231)
inline void IBatteryPreset::Puttitle ( _bstr_t pVal ) {
    HRESULT _hr = put_title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBarsEffect wrapper method implementations
//

#pragma implementation_key(1232)
inline long IBarsEffect::GetdisplayMode ( ) {
    long _result = 0;
    HRESULT _hr = get_displayMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1233)
inline void IBarsEffect::PutdisplayMode ( long pVal ) {
    HRESULT _hr = put_displayMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1234)
inline VARIANT_BOOL IBarsEffect::GetshowPeaks ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_showPeaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1235)
inline void IBarsEffect::PutshowPeaks ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showPeaks(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1236)
inline long IBarsEffect::GetpeakHangTime ( ) {
    long _result = 0;
    HRESULT _hr = get_peakHangTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1237)
inline void IBarsEffect::PutpeakHangTime ( long pVal ) {
    HRESULT _hr = put_peakHangTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1238)
inline float IBarsEffect::GetpeakFallbackAcceleration ( ) {
    float _result = 0;
    HRESULT _hr = get_peakFallbackAcceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1239)
inline void IBarsEffect::PutpeakFallbackAcceleration ( float pVal ) {
    HRESULT _hr = put_peakFallbackAcceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1240)
inline float IBarsEffect::GetpeakFallbackSpeed ( ) {
    float _result = 0;
    HRESULT _hr = get_peakFallbackSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1241)
inline void IBarsEffect::PutpeakFallbackSpeed ( float pVal ) {
    HRESULT _hr = put_peakFallbackSpeed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1242)
inline float IBarsEffect::GetlevelFallbackAcceleration ( ) {
    float _result = 0;
    HRESULT _hr = get_levelFallbackAcceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1243)
inline void IBarsEffect::PutlevelFallbackAcceleration ( float pVal ) {
    HRESULT _hr = put_levelFallbackAcceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1244)
inline float IBarsEffect::GetlevelFallbackSpeed ( ) {
    float _result = 0;
    HRESULT _hr = get_levelFallbackSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1245)
inline void IBarsEffect::PutlevelFallbackSpeed ( float pVal ) {
    HRESULT _hr = put_levelFallbackSpeed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1246)
inline _bstr_t IBarsEffect::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1247)
inline void IBarsEffect::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1248)
inline _bstr_t IBarsEffect::GetlevelColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_levelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1249)
inline void IBarsEffect::PutlevelColor ( _bstr_t pVal ) {
    HRESULT _hr = put_levelColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1250)
inline _bstr_t IBarsEffect::GetpeakColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_peakColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1251)
inline void IBarsEffect::PutpeakColor ( _bstr_t pVal ) {
    HRESULT _hr = put_peakColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1252)
inline long IBarsEffect::GethorizontalSpacing ( ) {
    long _result = 0;
    HRESULT _hr = get_horizontalSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1253)
inline void IBarsEffect::PuthorizontalSpacing ( long pVal ) {
    HRESULT _hr = put_horizontalSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1254)
inline long IBarsEffect::GetlevelWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_levelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1255)
inline void IBarsEffect::PutlevelWidth ( long pVal ) {
    HRESULT _hr = put_levelWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1256)
inline float IBarsEffect::GetlevelScale ( ) {
    float _result = 0;
    HRESULT _hr = get_levelScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1257)
inline void IBarsEffect::PutlevelScale ( float pVal ) {
    HRESULT _hr = put_levelScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1258)
inline long IBarsEffect::GetfadeRate ( ) {
    long _result = 0;
    HRESULT _hr = get_fadeRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1259)
inline void IBarsEffect::PutfadeRate ( long pVal ) {
    HRESULT _hr = put_fadeRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1260)
inline long IBarsEffect::GetfadeMode ( ) {
    long _result = 0;
    HRESULT _hr = get_fadeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1261)
inline void IBarsEffect::PutfadeMode ( long pVal ) {
    HRESULT _hr = put_fadeMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1262)
inline VARIANT_BOOL IBarsEffect::Gettransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1263)
inline void IBarsEffect::Puttransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_transparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPExternal wrapper method implementations
//

#pragma implementation_key(1264)
inline _bstr_t IWMPExternal::Getversion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1265)
inline _bstr_t IWMPExternal::GetappColorLight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorLight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1266)
inline void IWMPExternal::PutOnColorChange ( IDispatch * _arg1 ) {
    HRESULT _hr = put_OnColorChange(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPExternalColors wrapper method implementations
//

#pragma implementation_key(1267)
inline _bstr_t IWMPExternalColors::GetappColorMedium ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorMedium(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1268)
inline _bstr_t IWMPExternalColors::GetappColorDark ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorDark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1269)
inline _bstr_t IWMPExternalColors::GetappColorButtonHighlight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorButtonHighlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1270)
inline _bstr_t IWMPExternalColors::GetappColorButtonShadow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorButtonShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1271)
inline _bstr_t IWMPExternalColors::GetappColorButtonHoverFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_appColorButtonHoverFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPSubscriptionServiceLimited wrapper method implementations
//

#pragma implementation_key(1272)
inline HRESULT IWMPSubscriptionServiceLimited::INavigateTaskPaneURL ( _bstr_t bstrKeyName, _bstr_t bstrTaskPane, _bstr_t bstrParams ) {
    HRESULT _hr = raw_NavigateTaskPaneURL(bstrKeyName, bstrTaskPane, bstrParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1273)
inline void IWMPSubscriptionServiceLimited::PutSelectedTaskPane ( _bstr_t bstrTaskPane ) {
    HRESULT _hr = put_SelectedTaskPane(bstrTaskPane);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1274)
inline _bstr_t IWMPSubscriptionServiceLimited::GetSelectedTaskPane ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SelectedTaskPane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPDownloadItem wrapper method implementations
//

#pragma implementation_key(1275)
inline _bstr_t IWMPDownloadItem::GetsourceURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_sourceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1276)
inline long IWMPDownloadItem::Getsize ( ) {
    long _result = 0;
    HRESULT _hr = get_size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1277)
inline _bstr_t IWMPDownloadItem::Gettype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1278)
inline long IWMPDownloadItem::Getprogress ( ) {
    long _result = 0;
    HRESULT _hr = get_progress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1279)
inline enum WMPSubscriptionDownloadState IWMPDownloadItem::GetdownloadState ( ) {
    enum WMPSubscriptionDownloadState _result;
    HRESULT _hr = get_downloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1280)
inline HRESULT IWMPDownloadItem::Ipause ( ) {
    HRESULT _hr = raw_pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1281)
inline HRESULT IWMPDownloadItem::Iresume ( ) {
    HRESULT _hr = raw_resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1282)
inline HRESULT IWMPDownloadItem::Icancel ( ) {
    HRESULT _hr = raw_cancel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPDownloadItem2 wrapper method implementations
//

#pragma implementation_key(1283)
inline _bstr_t IWMPDownloadItem2::IgetItemInfo ( _bstr_t bstrItemName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getItemInfo(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPDownloadCollection wrapper method implementations
//

#pragma implementation_key(1284)
inline long IWMPDownloadCollection::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1285)
inline long IWMPDownloadCollection::Getcount ( ) {
    long _result = 0;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1286)
inline IWMPDownloadItem2Ptr IWMPDownloadCollection::IItem ( long lItem ) {
    struct IWMPDownloadItem2 * _result = 0;
    HRESULT _hr = raw_Item(lItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDownloadItem2Ptr(_result, false);
}

#pragma implementation_key(1287)
inline IWMPDownloadItem2Ptr IWMPDownloadCollection::IstartDownload ( _bstr_t bstrSourceURL, _bstr_t bstrType ) {
    struct IWMPDownloadItem2 * _result = 0;
    HRESULT _hr = raw_startDownload(bstrSourceURL, bstrType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDownloadItem2Ptr(_result, false);
}

#pragma implementation_key(1288)
inline HRESULT IWMPDownloadCollection::IremoveItem ( long lItem ) {
    HRESULT _hr = raw_removeItem(lItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1289)
inline HRESULT IWMPDownloadCollection::Iclear ( ) {
    HRESULT _hr = raw_clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPDownloadManager wrapper method implementations
//

#pragma implementation_key(1290)
inline IWMPDownloadCollectionPtr IWMPDownloadManager::IgetDownloadCollection ( long lCollectionId ) {
    struct IWMPDownloadCollection * _result = 0;
    HRESULT _hr = raw_getDownloadCollection(lCollectionId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDownloadCollectionPtr(_result, false);
}

#pragma implementation_key(1291)
inline IWMPDownloadCollectionPtr IWMPDownloadManager::IcreateDownloadCollection ( ) {
    struct IWMPDownloadCollection * _result = 0;
    HRESULT _hr = raw_createDownloadCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDownloadCollectionPtr(_result, false);
}

//
// interface IWMPSubscriptionServiceExternal wrapper method implementations
//

#pragma implementation_key(1292)
inline IWMPDownloadManagerPtr IWMPSubscriptionServiceExternal::GetDownloadManager ( ) {
    struct IWMPDownloadManager * _result = 0;
    HRESULT _hr = get_DownloadManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDownloadManagerPtr(_result, false);
}

//
// interface IWMPSubscriptionServicePlayMedia wrapper method implementations
//

#pragma implementation_key(1293)
inline HRESULT IWMPSubscriptionServicePlayMedia::IplayMedia ( _bstr_t bstrURL ) {
    HRESULT _hr = raw_playMedia(bstrURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPDiscoExternal wrapper method implementations
//

#pragma implementation_key(1294)
inline void IWMPDiscoExternal::PutOnLoginChange ( IDispatch * _arg1 ) {
    HRESULT _hr = put_OnLoginChange(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1295)
inline VARIANT_BOOL IWMPDiscoExternal::GetuserLoggedIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_userLoggedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1296)
inline HRESULT IWMPDiscoExternal::IattemptLogin ( ) {
    HRESULT _hr = raw_attemptLogin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1297)
inline _bstr_t IWMPDiscoExternal::GetaccountType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_accountType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1298)
inline void IWMPDiscoExternal::PutOnViewChange ( IDispatch * _arg1 ) {
    HRESULT _hr = put_OnViewChange(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1299)
inline HRESULT IWMPDiscoExternal::IchangeView ( _bstr_t bstrLibraryLocationType, _bstr_t bstrLibraryLocationID, _bstr_t bstrFilter, _bstr_t bstrViewParams ) {
    HRESULT _hr = raw_changeView(bstrLibraryLocationType, bstrLibraryLocationID, bstrFilter, bstrViewParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1300)
inline HRESULT IWMPDiscoExternal::IchangeViewOnlineList ( _bstr_t bstrLibraryLocationType, _bstr_t bstrLibraryLocationID, _bstr_t bstrParams, _bstr_t bstrFriendlyName, _bstr_t bstrListType, _bstr_t bstrViewMode ) {
    HRESULT _hr = raw_changeViewOnlineList(bstrLibraryLocationType, bstrLibraryLocationID, bstrParams, bstrFriendlyName, bstrListType, bstrViewMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1301)
inline _bstr_t IWMPDiscoExternal::GetlibraryLocationType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_libraryLocationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1302)
inline _bstr_t IWMPDiscoExternal::GetlibraryLocationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_libraryLocationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1303)
inline _bstr_t IWMPDiscoExternal::GetselectedItemType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_selectedItemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1304)
inline _bstr_t IWMPDiscoExternal::GetselectedItemID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_selectedItemID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1305)
inline _bstr_t IWMPDiscoExternal::Getfilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1306)
inline _bstr_t IWMPDiscoExternal::Gettask ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_task(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1307)
inline _bstr_t IWMPDiscoExternal::GetviewParameters ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_viewParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1308)
inline HRESULT IWMPDiscoExternal::IcancelNavigate ( ) {
    HRESULT _hr = raw_cancelNavigate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1309)
inline HRESULT IWMPDiscoExternal::IshowPopup ( long lPopupIndex, _bstr_t bstrParameters ) {
    HRESULT _hr = raw_showPopup(lPopupIndex, bstrParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1310)
inline HRESULT IWMPDiscoExternal::IaddToBasket ( _bstr_t bstrViewType, _bstr_t bstrViewIDs ) {
    HRESULT _hr = raw_addToBasket(bstrViewType, bstrViewIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1311)
inline _bstr_t IWMPDiscoExternal::GetbasketTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_basketTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1312)
inline HRESULT IWMPDiscoExternal::Iplay ( _bstr_t bstrLibraryLocationType, _bstr_t bstrLibraryLocationIDs ) {
    HRESULT _hr = raw_play(bstrLibraryLocationType, bstrLibraryLocationIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1313)
inline HRESULT IWMPDiscoExternal::Idownload ( _bstr_t bstrViewType, _bstr_t bstrViewIDs ) {
    HRESULT _hr = raw_download(bstrViewType, bstrViewIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1314)
inline HRESULT IWMPDiscoExternal::Ibuy ( _bstr_t bstrViewType, _bstr_t bstrViewIDs ) {
    HRESULT _hr = raw_buy(bstrViewType, bstrViewIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1315)
inline HRESULT IWMPDiscoExternal::IsaveCurrentViewToLibrary ( _bstr_t bstrFriendlyListType, VARIANT_BOOL fDynamic ) {
    HRESULT _hr = raw_saveCurrentViewToLibrary(bstrFriendlyListType, fDynamic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1316)
inline HRESULT IWMPDiscoExternal::Iauthenticate ( long lAuthenticationIndex ) {
    HRESULT _hr = raw_authenticate(lAuthenticationIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1317)
inline HRESULT IWMPDiscoExternal::IsendMessage ( _bstr_t bstrMsg, _bstr_t bstrParam ) {
    HRESULT _hr = raw_sendMessage(bstrMsg, bstrParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1318)
inline void IWMPDiscoExternal::PutOnSendMessageComplete ( IDispatch * _arg1 ) {
    HRESULT _hr = put_OnSendMessageComplete(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1319)
inline void IWMPDiscoExternal::PutignoreIEHistory ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_ignoreIEHistory(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1320)
inline VARIANT_BOOL IWMPDiscoExternal::GetpluginRunning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_pluginRunning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1321)
inline VARIANT_BOOL IWMPDiscoExternal::GettemplateBeingDisplayedInLocalLibrary ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_templateBeingDisplayedInLocalLibrary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1322)
inline void IWMPDiscoExternal::PutOnChangeViewError ( IDispatch * _arg1 ) {
    HRESULT _hr = put_OnChangeViewError(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1323)
inline void IWMPDiscoExternal::PutOnChangeViewOnlineListError ( IDispatch * _arg1 ) {
    HRESULT _hr = put_OnChangeViewOnlineListError(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPCDDVDWizardExternal wrapper method implementations
//

#pragma implementation_key(1324)
inline HRESULT IWMPCDDVDWizardExternal::IWriteNames ( _bstr_t bstrTOC, _bstr_t bstrMetadata ) {
    HRESULT _hr = raw_WriteNames(bstrTOC, bstrMetadata);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1325)
inline HRESULT IWMPCDDVDWizardExternal::IReturnToMainTask ( ) {
    HRESULT _hr = raw_ReturnToMainTask();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1326)
inline HRESULT IWMPCDDVDWizardExternal::IWriteNamesEx ( enum WMP_WRITENAMESEX_TYPE type, _bstr_t bstrTypeId, _bstr_t bstrMetadata, VARIANT_BOOL fRenameRegroupFiles ) {
    HRESULT _hr = raw_WriteNamesEx(type, bstrTypeId, bstrMetadata, fRenameRegroupFiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1327)
inline _bstr_t IWMPCDDVDWizardExternal::IGetMDQByRequestID ( _bstr_t bstrRequestID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetMDQByRequestID(bstrRequestID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1328)
inline HRESULT IWMPCDDVDWizardExternal::IEditMetadata ( ) {
    HRESULT _hr = raw_EditMetadata();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1329)
inline VARIANT_BOOL IWMPCDDVDWizardExternal::IIsMetadataAvailableForEdit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMetadataAvailableForEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1330)
inline HRESULT IWMPCDDVDWizardExternal::IBuyCD ( _bstr_t bstrTitle, _bstr_t bstrArtist, _bstr_t bstrAlbum, _bstr_t bstrUFID, _bstr_t bstrWMID ) {
    HRESULT _hr = raw_BuyCD(bstrTitle, bstrArtist, bstrAlbum, bstrUFID, bstrWMID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPOfflineExternal wrapper method implementations
//

#pragma implementation_key(1331)
inline HRESULT IWMPOfflineExternal::IforceOnline ( ) {
    HRESULT _hr = raw_forceOnline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPDMRAVTransportService wrapper method implementations
//

#pragma implementation_key(1332)
inline _bstr_t IWMPDMRAVTransportService::GetTransportState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TransportState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1333)
inline _bstr_t IWMPDMRAVTransportService::GetTransportStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TransportStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1334)
inline _bstr_t IWMPDMRAVTransportService::GetPlaybackStorageMedium ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlaybackStorageMedium(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1335)
inline _bstr_t IWMPDMRAVTransportService::GetRecordStorageMedium ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RecordStorageMedium(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1336)
inline _bstr_t IWMPDMRAVTransportService::GetPossiblePlaybackStorageMedia ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PossiblePlaybackStorageMedia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1337)
inline _bstr_t IWMPDMRAVTransportService::GetPossibleRecordStorageMedia ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PossibleRecordStorageMedia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1338)
inline _bstr_t IWMPDMRAVTransportService::GetCurrentPlayMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentPlayMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1339)
inline _bstr_t IWMPDMRAVTransportService::GetTransportPlaySpeed ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TransportPlaySpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1340)
inline _bstr_t IWMPDMRAVTransportService::GetRecordMediumWriteStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RecordMediumWriteStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1341)
inline _bstr_t IWMPDMRAVTransportService::GetCurrentRecordQualityMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentRecordQualityMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1342)
inline _bstr_t IWMPDMRAVTransportService::GetPossibleRecordQualityModes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PossibleRecordQualityModes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1343)
inline unsigned long IWMPDMRAVTransportService::GetNumberOfTracks ( ) {
    unsigned long _result = 0;
    HRESULT _hr = get_NumberOfTracks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1344)
inline unsigned long IWMPDMRAVTransportService::GetCurrentTrack ( ) {
    unsigned long _result = 0;
    HRESULT _hr = get_CurrentTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1345)
inline _bstr_t IWMPDMRAVTransportService::GetCurrentTrackDuration ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentTrackDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1346)
inline _bstr_t IWMPDMRAVTransportService::GetCurrentMediaDuration ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentMediaDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1347)
inline _bstr_t IWMPDMRAVTransportService::GetCurrentTrackMetaData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentTrackMetaData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1348)
inline _bstr_t IWMPDMRAVTransportService::GetCurrentTrackURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentTrackURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1349)
inline _bstr_t IWMPDMRAVTransportService::GetAVTransportURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AVTransportURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1350)
inline _bstr_t IWMPDMRAVTransportService::GetAVTransportURIMetaData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AVTransportURIMetaData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1351)
inline _bstr_t IWMPDMRAVTransportService::GetNextAVTransportURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NextAVTransportURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1352)
inline _bstr_t IWMPDMRAVTransportService::GetNextAVTransportURIMetaData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NextAVTransportURIMetaData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1353)
inline _bstr_t IWMPDMRAVTransportService::GetRelativeTimePosition ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RelativeTimePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1354)
inline _bstr_t IWMPDMRAVTransportService::GetAbsoluteTimePosition ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AbsoluteTimePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1355)
inline long IWMPDMRAVTransportService::GetRelativeCounterPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_RelativeCounterPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1356)
inline long IWMPDMRAVTransportService::GetAbsoluteCounterPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_AbsoluteCounterPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1357)
inline _bstr_t IWMPDMRAVTransportService::GetCurrentTransportActions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentTransportActions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1358)
inline _bstr_t IWMPDMRAVTransportService::GetLastChange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1359)
inline _bstr_t IWMPDMRAVTransportService::GetA_ARG_TYPE_SeekMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_SeekMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1360)
inline _bstr_t IWMPDMRAVTransportService::GetA_ARG_TYPE_SeekTarget ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_SeekTarget(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1361)
inline unsigned long IWMPDMRAVTransportService::GetA_ARG_TYPE_InstanceID ( ) {
    unsigned long _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_InstanceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1362)
inline _bstr_t IWMPDMRAVTransportService::GetCurrentProtocolInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentProtocolInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1363)
inline HRESULT IWMPDMRAVTransportService::ISetAVTransportURI ( IUnknown * punkRemoteEndpointInfo, unsigned long ulInstanceID, _bstr_t bstrCurrentURI, _bstr_t bstrCurrentURIMetaData ) {
    HRESULT _hr = raw_SetAVTransportURI(punkRemoteEndpointInfo, ulInstanceID, bstrCurrentURI, bstrCurrentURIMetaData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1364)
inline HRESULT IWMPDMRAVTransportService::IGetMediaInfo ( unsigned long ulInstanceID, unsigned long * pulNumTracks, BSTR * pbstrMediaDuration, BSTR * pbstrCurrentURI, BSTR * pbstrCurrentURIMetaData, BSTR * pbstrNextURI, BSTR * pNextURIMetaData, BSTR * pbstrPlayMedium, BSTR * pbstrRecordMedium, BSTR * pbstrWriteStatus ) {
    HRESULT _hr = raw_GetMediaInfo(ulInstanceID, pulNumTracks, pbstrMediaDuration, pbstrCurrentURI, pbstrCurrentURIMetaData, pbstrNextURI, pNextURIMetaData, pbstrPlayMedium, pbstrRecordMedium, pbstrWriteStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1365)
inline HRESULT IWMPDMRAVTransportService::IGetTransportInfo ( unsigned long ulInstanceID, BSTR * pbstrCurrentTransportState, BSTR * pbstrCurrentTransportStatus, BSTR * pbstrCurrentSpeed ) {
    HRESULT _hr = raw_GetTransportInfo(ulInstanceID, pbstrCurrentTransportState, pbstrCurrentTransportStatus, pbstrCurrentSpeed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1366)
inline HRESULT IWMPDMRAVTransportService::IGetPositionInfo ( unsigned long ulInstanceID, unsigned long * pTrack, BSTR * pbstrTrackDuration, BSTR * pbstrTrackMetaData, BSTR * pbstrTrackURI, BSTR * pbstrRelTime, BSTR * pbstrAbsTime, long * plRelCount, long * plAbsCount ) {
    HRESULT _hr = raw_GetPositionInfo(ulInstanceID, pTrack, pbstrTrackDuration, pbstrTrackMetaData, pbstrTrackURI, pbstrRelTime, pbstrAbsTime, plRelCount, plAbsCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1367)
inline HRESULT IWMPDMRAVTransportService::IGetDeviceCapabilities ( unsigned long ulInstanceID, BSTR * pbstrPlayMedia, BSTR * pbstrRecMedia, BSTR * pbstrRecQualityModes ) {
    HRESULT _hr = raw_GetDeviceCapabilities(ulInstanceID, pbstrPlayMedia, pbstrRecMedia, pbstrRecQualityModes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1368)
inline HRESULT IWMPDMRAVTransportService::IGetTransportSettings ( unsigned long ulInstanceID, BSTR * pbstrPlayMode, BSTR * pbstrRecQualityMode ) {
    HRESULT _hr = raw_GetTransportSettings(ulInstanceID, pbstrPlayMode, pbstrRecQualityMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1369)
inline HRESULT IWMPDMRAVTransportService::Istop ( unsigned long ulInstanceID ) {
    HRESULT _hr = raw_stop(ulInstanceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1370)
inline HRESULT IWMPDMRAVTransportService::Iplay ( unsigned long ulInstanceID, _bstr_t bstrSpeed ) {
    HRESULT _hr = raw_play(ulInstanceID, bstrSpeed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1371)
inline HRESULT IWMPDMRAVTransportService::Ipause ( unsigned long ulInstanceID ) {
    HRESULT _hr = raw_pause(ulInstanceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1372)
inline HRESULT IWMPDMRAVTransportService::ISeek ( unsigned long ulInstanceID, _bstr_t bstrUnit, _bstr_t bstrTarget ) {
    HRESULT _hr = raw_Seek(ulInstanceID, bstrUnit, bstrTarget);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1373)
inline HRESULT IWMPDMRAVTransportService::Inext ( unsigned long ulInstanceID ) {
    HRESULT _hr = raw_next(ulInstanceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1374)
inline HRESULT IWMPDMRAVTransportService::Iprevious ( unsigned long ulInstanceID ) {
    HRESULT _hr = raw_previous(ulInstanceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1375)
inline HRESULT IWMPDMRAVTransportService::IGetCurrentTransportActions ( unsigned long ulInstanceID, BSTR * pbstrActions ) {
    HRESULT _hr = raw_GetCurrentTransportActions(ulInstanceID, pbstrActions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPDMRConnectionManagerService wrapper method implementations
//

#pragma implementation_key(1376)
inline _bstr_t IWMPDMRConnectionManagerService::GetSourceProtocolInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceProtocolInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1377)
inline _bstr_t IWMPDMRConnectionManagerService::GetSinkProtocolInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SinkProtocolInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1378)
inline _bstr_t IWMPDMRConnectionManagerService::GetCurrentConnectionIDs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentConnectionIDs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1379)
inline _bstr_t IWMPDMRConnectionManagerService::GetA_ARG_TYPE_ConnectionStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_ConnectionStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1380)
inline _bstr_t IWMPDMRConnectionManagerService::GetA_ARG_TYPE_ConnectionManager ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_ConnectionManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1381)
inline _bstr_t IWMPDMRConnectionManagerService::GetA_ARG_TYPE_Direction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1382)
inline _bstr_t IWMPDMRConnectionManagerService::GetA_ARG_TYPE_ProtocolInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_ProtocolInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1383)
inline long IWMPDMRConnectionManagerService::GetA_ARG_TYPE_ConnectionID ( ) {
    long _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_ConnectionID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1384)
inline long IWMPDMRConnectionManagerService::GetA_ARG_TYPE_AVTransportID ( ) {
    long _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_AVTransportID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1385)
inline long IWMPDMRConnectionManagerService::GetA_ARG_TYPE_RcsID ( ) {
    long _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_RcsID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1386)
inline HRESULT IWMPDMRConnectionManagerService::IGetProtocolInfo ( BSTR * pbstrSource, BSTR * pbstrSink ) {
    HRESULT _hr = raw_GetProtocolInfo(pbstrSource, pbstrSink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1387)
inline HRESULT IWMPDMRConnectionManagerService::IGetCurrentConnectionIDs ( BSTR * pbstrConnectionIDs ) {
    HRESULT _hr = raw_GetCurrentConnectionIDs(pbstrConnectionIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1388)
inline HRESULT IWMPDMRConnectionManagerService::IGetCurrentConnectionInfo ( long lConnectionID, long * plResID, long * plAVTransportID, BSTR * pbstrProtocolInfo, BSTR * pbstrPeerConnectionManager, long * plPeerConnectionID, BSTR * pbstrDirection, BSTR * pbstrStatus ) {
    HRESULT _hr = raw_GetCurrentConnectionInfo(lConnectionID, plResID, plAVTransportID, pbstrProtocolInfo, pbstrPeerConnectionManager, plPeerConnectionID, pbstrDirection, pbstrStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPDMRRenderingControlService wrapper method implementations
//

#pragma implementation_key(1389)
inline _bstr_t IWMPDMRRenderingControlService::GetLastChange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1390)
inline _bstr_t IWMPDMRRenderingControlService::GetPresetNameList ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PresetNameList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1391)
inline VARIANT_BOOL IWMPDMRRenderingControlService::Getmute ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_mute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1392)
inline unsigned short IWMPDMRRenderingControlService::Getvolume ( ) {
    unsigned short _result = 0;
    HRESULT _hr = get_volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1393)
inline _bstr_t IWMPDMRRenderingControlService::GetA_ARG_TYPE_Channel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_Channel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1394)
inline unsigned long IWMPDMRRenderingControlService::GetA_ARG_TYPE_InstanceID ( ) {
    unsigned long _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_InstanceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1395)
inline _bstr_t IWMPDMRRenderingControlService::GetA_ARG_TYPE_PresetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_A_ARG_TYPE_PresetName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1396)
inline HRESULT IWMPDMRRenderingControlService::IListPresets ( unsigned long ulInstanceID, BSTR * pbstrCurrentPresetList ) {
    HRESULT _hr = raw_ListPresets(ulInstanceID, pbstrCurrentPresetList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1397)
inline HRESULT IWMPDMRRenderingControlService::ISelectPreset ( unsigned long ulInstanceID, _bstr_t bstrPresetName ) {
    HRESULT _hr = raw_SelectPreset(ulInstanceID, bstrPresetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1398)
inline HRESULT IWMPDMRRenderingControlService::IGetMute ( unsigned long ulInstanceID, _bstr_t bstrChannel, VARIANT_BOOL * pbCurrentMute ) {
    HRESULT _hr = raw_GetMute(ulInstanceID, bstrChannel, pbCurrentMute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1399)
inline HRESULT IWMPDMRRenderingControlService::ISetMute ( unsigned long ulInstanceID, _bstr_t bstrChannel, VARIANT_BOOL bDesiredMute ) {
    HRESULT _hr = raw_SetMute(ulInstanceID, bstrChannel, bDesiredMute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1400)
inline HRESULT IWMPDMRRenderingControlService::IGetVolume ( unsigned long ulInstanceID, _bstr_t bstrChannel, unsigned short * puiCurrentVolume ) {
    HRESULT _hr = raw_GetVolume(ulInstanceID, bstrChannel, puiCurrentVolume);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1401)
inline HRESULT IWMPDMRRenderingControlService::ISetVolume ( unsigned long ulInstanceID, _bstr_t bstrChannel, unsigned short uiDesiredVolume ) {
    HRESULT _hr = raw_SetVolume(ulInstanceID, bstrChannel, uiDesiredVolume);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPCdromBurn wrapper method implementations
//

#pragma implementation_key(1402)
inline VARIANT_BOOL IWMPCdromBurn::IisAvailable ( _bstr_t bstrItem ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isAvailable(bstrItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1403)
inline _bstr_t IWMPCdromBurn::IgetItemInfo ( _bstr_t bstrItem ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getItemInfo(bstrItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1404)
inline _bstr_t IWMPCdromBurn::Getlabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1405)
inline void IWMPCdromBurn::Putlabel ( _bstr_t pbstrLabel ) {
    HRESULT _hr = put_label(pbstrLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1406)
inline enum WMPBurnFormat IWMPCdromBurn::GetburnFormat ( ) {
    enum WMPBurnFormat _result;
    HRESULT _hr = get_burnFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1407)
inline void IWMPCdromBurn::PutburnFormat ( enum WMPBurnFormat pwmpbf ) {
    HRESULT _hr = put_burnFormat(pwmpbf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1408)
inline IWMPPlaylistPtr IWMPCdromBurn::GetburnPlaylist ( ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = get_burnPlaylist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1409)
inline void IWMPCdromBurn::PutburnPlaylist ( struct IWMPPlaylist * ppPlaylist ) {
    HRESULT _hr = put_burnPlaylist(ppPlaylist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1410)
inline HRESULT IWMPCdromBurn::IrefreshStatus ( ) {
    HRESULT _hr = raw_refreshStatus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1411)
inline enum WMPBurnState IWMPCdromBurn::GetburnState ( ) {
    enum WMPBurnState _result;
    HRESULT _hr = get_burnState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1412)
inline long IWMPCdromBurn::GetburnProgress ( ) {
    long _result = 0;
    HRESULT _hr = get_burnProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1413)
inline HRESULT IWMPCdromBurn::IstartBurn ( ) {
    HRESULT _hr = raw_startBurn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1414)
inline HRESULT IWMPCdromBurn::IstopBurn ( ) {
    HRESULT _hr = raw_stopBurn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1415)
inline HRESULT IWMPCdromBurn::Ierase ( ) {
    HRESULT _hr = raw_erase();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPPlaylist wrapper method implementations
//

#pragma implementation_key(1416)
inline long IWMPPlaylist::Getcount ( ) {
    long _result = 0;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1417)
inline _bstr_t IWMPPlaylist::Getname ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1418)
inline void IWMPPlaylist::Putname ( _bstr_t pbstrName ) {
    HRESULT _hr = put_name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1419)
inline long IWMPPlaylist::GetattributeCount ( ) {
    long _result = 0;
    HRESULT _hr = get_attributeCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1420)
inline _bstr_t IWMPPlaylist::GetattributeName ( long lIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_attributeName(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1421)
inline IWMPMediaPtr IWMPPlaylist::GetItem ( long lIndex ) {
    struct IWMPMedia * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

#pragma implementation_key(1422)
inline _bstr_t IWMPPlaylist::IgetItemInfo ( _bstr_t bstrName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getItemInfo(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1423)
inline HRESULT IWMPPlaylist::IsetItemInfo ( _bstr_t bstrName, _bstr_t bstrValue ) {
    HRESULT _hr = raw_setItemInfo(bstrName, bstrValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1424)
inline VARIANT_BOOL IWMPPlaylist::GetisIdentical ( struct IWMPPlaylist * pIWMPPlaylist ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isIdentical(pIWMPPlaylist, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1425)
inline HRESULT IWMPPlaylist::Iclear ( ) {
    HRESULT _hr = raw_clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1426)
inline HRESULT IWMPPlaylist::IinsertItem ( long lIndex, struct IWMPMedia * pIWMPMedia ) {
    HRESULT _hr = raw_insertItem(lIndex, pIWMPMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1427)
inline HRESULT IWMPPlaylist::IappendItem ( struct IWMPMedia * pIWMPMedia ) {
    HRESULT _hr = raw_appendItem(pIWMPMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1428)
inline HRESULT IWMPPlaylist::IremoveItem ( struct IWMPMedia * pIWMPMedia ) {
    HRESULT _hr = raw_removeItem(pIWMPMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1429)
inline HRESULT IWMPPlaylist::ImoveItem ( long lIndexOld, long lIndexNew ) {
    HRESULT _hr = raw_moveItem(lIndexOld, lIndexNew);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPMedia wrapper method implementations
//

#pragma implementation_key(1430)
inline VARIANT_BOOL IWMPMedia::GetisIdentical ( struct IWMPMedia * pIWMPMedia ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isIdentical(pIWMPMedia, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1431)
inline _bstr_t IWMPMedia::GetsourceURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_sourceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1432)
inline _bstr_t IWMPMedia::Getname ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1433)
inline void IWMPMedia::Putname ( _bstr_t pbstrName ) {
    HRESULT _hr = put_name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1434)
inline long IWMPMedia::GetimageSourceWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_imageSourceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1435)
inline long IWMPMedia::GetimageSourceHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_imageSourceHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1436)
inline long IWMPMedia::GetmarkerCount ( ) {
    long _result = 0;
    HRESULT _hr = get_markerCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1437)
inline double IWMPMedia::IgetMarkerTime ( long MarkerNum ) {
    double _result = 0;
    HRESULT _hr = raw_getMarkerTime(MarkerNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1438)
inline _bstr_t IWMPMedia::IgetMarkerName ( long MarkerNum ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getMarkerName(MarkerNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1439)
inline double IWMPMedia::Getduration ( ) {
    double _result = 0;
    HRESULT _hr = get_duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1440)
inline _bstr_t IWMPMedia::GetdurationString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_durationString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1441)
inline long IWMPMedia::GetattributeCount ( ) {
    long _result = 0;
    HRESULT _hr = get_attributeCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1442)
inline _bstr_t IWMPMedia::IgetAttributeName ( long lIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getAttributeName(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1443)
inline _bstr_t IWMPMedia::IgetItemInfo ( _bstr_t bstrItemName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getItemInfo(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1444)
inline HRESULT IWMPMedia::IsetItemInfo ( _bstr_t bstrItemName, _bstr_t bstrVal ) {
    HRESULT _hr = raw_setItemInfo(bstrItemName, bstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1445)
inline _bstr_t IWMPMedia::IgetItemInfoByAtom ( long lAtom ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getItemInfoByAtom(lAtom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1446)
inline VARIANT_BOOL IWMPMedia::IisMemberOf ( struct IWMPPlaylist * pPlaylist ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isMemberOf(pPlaylist, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1447)
inline VARIANT_BOOL IWMPMedia::IisReadOnlyItem ( _bstr_t bstrItemName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isReadOnlyItem(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPMediaCollection wrapper method implementations
//

#pragma implementation_key(1448)
inline IWMPMediaPtr IWMPMediaCollection::Iadd ( _bstr_t bstrURL ) {
    struct IWMPMedia * _result = 0;
    HRESULT _hr = raw_add(bstrURL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

#pragma implementation_key(1449)
inline IWMPPlaylistPtr IWMPMediaCollection::IgetAll ( ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_getAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1450)
inline IWMPPlaylistPtr IWMPMediaCollection::IgetByName ( _bstr_t bstrName ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_getByName(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1451)
inline IWMPPlaylistPtr IWMPMediaCollection::IgetByGenre ( _bstr_t bstrGenre ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_getByGenre(bstrGenre, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1452)
inline IWMPPlaylistPtr IWMPMediaCollection::IgetByAuthor ( _bstr_t bstrAuthor ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_getByAuthor(bstrAuthor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1453)
inline IWMPPlaylistPtr IWMPMediaCollection::IgetByAlbum ( _bstr_t bstrAlbum ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_getByAlbum(bstrAlbum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1454)
inline IWMPPlaylistPtr IWMPMediaCollection::IgetByAttribute ( _bstr_t bstrAttribute, _bstr_t bstrValue ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_getByAttribute(bstrAttribute, bstrValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1455)
inline HRESULT IWMPMediaCollection::Iremove ( struct IWMPMedia * pItem, VARIANT_BOOL varfDeleteFile ) {
    HRESULT _hr = raw_remove(pItem, varfDeleteFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1456)
inline IWMPStringCollectionPtr IWMPMediaCollection::IgetAttributeStringCollection ( _bstr_t bstrAttribute, _bstr_t bstrMediaType ) {
    struct IWMPStringCollection * _result = 0;
    HRESULT _hr = raw_getAttributeStringCollection(bstrAttribute, bstrMediaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPStringCollectionPtr(_result, false);
}

#pragma implementation_key(1457)
inline long IWMPMediaCollection::IgetMediaAtom ( _bstr_t bstrItemName ) {
    long _result = 0;
    HRESULT _hr = raw_getMediaAtom(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1458)
inline HRESULT IWMPMediaCollection::IsetDeleted ( struct IWMPMedia * pItem, VARIANT_BOOL varfIsDeleted ) {
    HRESULT _hr = raw_setDeleted(pItem, varfIsDeleted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1459)
inline VARIANT_BOOL IWMPMediaCollection::IisDeleted ( struct IWMPMedia * pItem ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isDeleted(pItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPLibrary wrapper method implementations
//

#pragma implementation_key(1460)
inline _bstr_t IWMPLibrary::Getname ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1461)
inline enum WMPLibraryType IWMPLibrary::Gettype ( ) {
    enum WMPLibraryType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1462)
inline IWMPMediaCollectionPtr IWMPLibrary::GetmediaCollection ( ) {
    struct IWMPMediaCollection * _result = 0;
    HRESULT _hr = get_mediaCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaCollectionPtr(_result, false);
}

#pragma implementation_key(1463)
inline VARIANT_BOOL IWMPLibrary::IisIdentical ( struct IWMPLibrary * pIWMPLibrary ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isIdentical(pIWMPLibrary, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPControls wrapper method implementations
//

#pragma implementation_key(1464)
inline VARIANT_BOOL IWMPControls::GetisAvailable ( _bstr_t bstrItem ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isAvailable(bstrItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1465)
inline HRESULT IWMPControls::Iplay ( ) {
    HRESULT _hr = raw_play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1466)
inline HRESULT IWMPControls::Istop ( ) {
    HRESULT _hr = raw_stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1467)
inline HRESULT IWMPControls::Ipause ( ) {
    HRESULT _hr = raw_pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1468)
inline HRESULT IWMPControls::IfastForward ( ) {
    HRESULT _hr = raw_fastForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1469)
inline HRESULT IWMPControls::IfastReverse ( ) {
    HRESULT _hr = raw_fastReverse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1470)
inline double IWMPControls::GetcurrentPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_currentPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1471)
inline void IWMPControls::PutcurrentPosition ( double pdCurrentPosition ) {
    HRESULT _hr = put_currentPosition(pdCurrentPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1472)
inline _bstr_t IWMPControls::GetcurrentPositionString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentPositionString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1473)
inline HRESULT IWMPControls::Inext ( ) {
    HRESULT _hr = raw_next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1474)
inline HRESULT IWMPControls::Iprevious ( ) {
    HRESULT _hr = raw_previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1475)
inline IWMPMediaPtr IWMPControls::GetcurrentItem ( ) {
    struct IWMPMedia * _result = 0;
    HRESULT _hr = get_currentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

#pragma implementation_key(1476)
inline void IWMPControls::PutcurrentItem ( struct IWMPMedia * ppIWMPMedia ) {
    HRESULT _hr = put_currentItem(ppIWMPMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1477)
inline long IWMPControls::GetcurrentMarker ( ) {
    long _result = 0;
    HRESULT _hr = get_currentMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1478)
inline void IWMPControls::PutcurrentMarker ( long plMarker ) {
    HRESULT _hr = put_currentMarker(plMarker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1479)
inline HRESULT IWMPControls::IplayItem ( struct IWMPMedia * pIWMPMedia ) {
    HRESULT _hr = raw_playItem(pIWMPMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPPlaylistArray wrapper method implementations
//

#pragma implementation_key(1480)
inline long IWMPPlaylistArray::Getcount ( ) {
    long _result = 0;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1481)
inline IWMPPlaylistPtr IWMPPlaylistArray::IItem ( long lIndex ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

//
// interface IWMPPlaylistCollection wrapper method implementations
//

#pragma implementation_key(1482)
inline IWMPPlaylistPtr IWMPPlaylistCollection::InewPlaylist ( _bstr_t bstrName ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_newPlaylist(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1483)
inline IWMPPlaylistArrayPtr IWMPPlaylistCollection::IgetAll ( ) {
    struct IWMPPlaylistArray * _result = 0;
    HRESULT _hr = raw_getAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistArrayPtr(_result, false);
}

#pragma implementation_key(1484)
inline IWMPPlaylistArrayPtr IWMPPlaylistCollection::IgetByName ( _bstr_t bstrName ) {
    struct IWMPPlaylistArray * _result = 0;
    HRESULT _hr = raw_getByName(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistArrayPtr(_result, false);
}

#pragma implementation_key(1485)
inline HRESULT IWMPPlaylistCollection::Iremove ( struct IWMPPlaylist * pItem ) {
    HRESULT _hr = raw_remove(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1486)
inline HRESULT IWMPPlaylistCollection::IsetDeleted ( struct IWMPPlaylist * pItem, VARIANT_BOOL varfIsDeleted ) {
    HRESULT _hr = raw_setDeleted(pItem, varfIsDeleted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1487)
inline VARIANT_BOOL IWMPPlaylistCollection::IisDeleted ( struct IWMPPlaylist * pItem ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isDeleted(pItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1488)
inline IWMPPlaylistPtr IWMPPlaylistCollection::IimportPlaylist ( struct IWMPPlaylist * pItem ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_importPlaylist(pItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

//
// interface IWMPCdrom wrapper method implementations
//

#pragma implementation_key(1489)
inline _bstr_t IWMPCdrom::GetdriveSpecifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_driveSpecifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1490)
inline IWMPPlaylistPtr IWMPCdrom::GetPlaylist ( ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = get_Playlist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1491)
inline HRESULT IWMPCdrom::Ieject ( ) {
    HRESULT _hr = raw_eject();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPCdromCollection wrapper method implementations
//

#pragma implementation_key(1492)
inline long IWMPCdromCollection::Getcount ( ) {
    long _result = 0;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1493)
inline IWMPCdromPtr IWMPCdromCollection::IItem ( long lIndex ) {
    struct IWMPCdrom * _result = 0;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPCdromPtr(_result, false);
}

#pragma implementation_key(1494)
inline IWMPCdromPtr IWMPCdromCollection::IgetByDriveSpecifier ( _bstr_t bstrDriveSpecifier ) {
    struct IWMPCdrom * _result = 0;
    HRESULT _hr = raw_getByDriveSpecifier(bstrDriveSpecifier, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPCdromPtr(_result, false);
}

//
// interface IWMPCore wrapper method implementations
//

#pragma implementation_key(1495)
inline HRESULT IWMPCore::Iclose ( ) {
    HRESULT _hr = raw_close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1496)
inline _bstr_t IWMPCore::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1497)
inline void IWMPCore::PutURL ( _bstr_t pbstrURL ) {
    HRESULT _hr = put_URL(pbstrURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1498)
inline enum WMPOpenState IWMPCore::GetopenState ( ) {
    enum WMPOpenState _result;
    HRESULT _hr = get_openState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1499)
inline enum WMPPlayState IWMPCore::GetplayState ( ) {
    enum WMPPlayState _result;
    HRESULT _hr = get_playState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1500)
inline IWMPControlsPtr IWMPCore::Getcontrols ( ) {
    struct IWMPControls * _result = 0;
    HRESULT _hr = get_controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPControlsPtr(_result, false);
}

#pragma implementation_key(1501)
inline IWMPSettingsPtr IWMPCore::Getsettings ( ) {
    struct IWMPSettings * _result = 0;
    HRESULT _hr = get_settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPSettingsPtr(_result, false);
}

#pragma implementation_key(1502)
inline IWMPMediaPtr IWMPCore::GetcurrentMedia ( ) {
    struct IWMPMedia * _result = 0;
    HRESULT _hr = get_currentMedia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

#pragma implementation_key(1503)
inline void IWMPCore::PutcurrentMedia ( struct IWMPMedia * ppMedia ) {
    HRESULT _hr = put_currentMedia(ppMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1504)
inline IWMPMediaCollectionPtr IWMPCore::GetmediaCollection ( ) {
    struct IWMPMediaCollection * _result = 0;
    HRESULT _hr = get_mediaCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaCollectionPtr(_result, false);
}

#pragma implementation_key(1505)
inline IWMPPlaylistCollectionPtr IWMPCore::GetplaylistCollection ( ) {
    struct IWMPPlaylistCollection * _result = 0;
    HRESULT _hr = get_playlistCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistCollectionPtr(_result, false);
}

#pragma implementation_key(1506)
inline _bstr_t IWMPCore::GetversionInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_versionInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1507)
inline HRESULT IWMPCore::IlaunchURL ( _bstr_t bstrURL ) {
    HRESULT _hr = raw_launchURL(bstrURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1508)
inline IWMPNetworkPtr IWMPCore::Getnetwork ( ) {
    struct IWMPNetwork * _result = 0;
    HRESULT _hr = get_network(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPNetworkPtr(_result, false);
}

#pragma implementation_key(1509)
inline IWMPPlaylistPtr IWMPCore::GetcurrentPlaylist ( ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = get_currentPlaylist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1510)
inline void IWMPCore::PutcurrentPlaylist ( struct IWMPPlaylist * ppPL ) {
    HRESULT _hr = put_currentPlaylist(ppPL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1511)
inline IWMPCdromCollectionPtr IWMPCore::GetcdromCollection ( ) {
    struct IWMPCdromCollection * _result = 0;
    HRESULT _hr = get_cdromCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPCdromCollectionPtr(_result, false);
}

#pragma implementation_key(1512)
inline IWMPClosedCaptionPtr IWMPCore::GetclosedCaption ( ) {
    struct IWMPClosedCaption * _result = 0;
    HRESULT _hr = get_closedCaption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPClosedCaptionPtr(_result, false);
}

#pragma implementation_key(1513)
inline VARIANT_BOOL IWMPCore::GetisOnline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isOnline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1514)
inline IWMPErrorPtr IWMPCore::GetError ( ) {
    struct IWMPError * _result = 0;
    HRESULT _hr = get_Error(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPErrorPtr(_result, false);
}

#pragma implementation_key(1515)
inline _bstr_t IWMPCore::Getstatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPCore2 wrapper method implementations
//

#pragma implementation_key(1516)
inline IWMPDVDPtr IWMPCore2::Getdvd ( ) {
    struct IWMPDVD * _result = 0;
    HRESULT _hr = get_dvd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDVDPtr(_result, false);
}

//
// interface IWMPCore3 wrapper method implementations
//

#pragma implementation_key(1517)
inline IWMPPlaylistPtr IWMPCore3::InewPlaylist ( _bstr_t bstrName, _bstr_t bstrURL ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_newPlaylist(bstrName, bstrURL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1518)
inline IWMPMediaPtr IWMPCore3::InewMedia ( _bstr_t bstrURL ) {
    struct IWMPMedia * _result = 0;
    HRESULT _hr = raw_newMedia(bstrURL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

//
// interface IWMPPlayer4 wrapper method implementations
//

#pragma implementation_key(1519)
inline VARIANT_BOOL IWMPPlayer4::Getenabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1520)
inline void IWMPPlayer4::Putenabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1521)
inline VARIANT_BOOL IWMPPlayer4::GetfullScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline void IWMPPlayer4::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1523)
inline VARIANT_BOOL IWMPPlayer4::GetenableContextMenu ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enableContextMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1524)
inline void IWMPPlayer4::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu ) {
    HRESULT _hr = put_enableContextMenu(pbEnableContextMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1525)
inline void IWMPPlayer4::PutuiMode ( _bstr_t pbstrMode ) {
    HRESULT _hr = put_uiMode(pbstrMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1526)
inline _bstr_t IWMPPlayer4::GetuiMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_uiMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1527)
inline VARIANT_BOOL IWMPPlayer4::GetstretchToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_stretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1528)
inline void IWMPPlayer4::PutstretchToFit ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_stretchToFit(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1529)
inline VARIANT_BOOL IWMPPlayer4::GetwindowlessVideo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_windowlessVideo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1530)
inline void IWMPPlayer4::PutwindowlessVideo ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_windowlessVideo(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1531)
inline VARIANT_BOOL IWMPPlayer4::GetisRemote ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isRemote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1532)
inline IWMPPlayerApplicationPtr IWMPPlayer4::GetplayerApplication ( ) {
    struct IWMPPlayerApplication * _result = 0;
    HRESULT _hr = get_playerApplication(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlayerApplicationPtr(_result, false);
}

#pragma implementation_key(1533)
inline HRESULT IWMPPlayer4::IopenPlayer ( _bstr_t bstrURL ) {
    HRESULT _hr = raw_openPlayer(bstrURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPPlayer3 wrapper method implementations
//

#pragma implementation_key(1534)
inline VARIANT_BOOL IWMPPlayer3::Getenabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1535)
inline void IWMPPlayer3::Putenabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1536)
inline VARIANT_BOOL IWMPPlayer3::GetfullScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1537)
inline void IWMPPlayer3::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1538)
inline VARIANT_BOOL IWMPPlayer3::GetenableContextMenu ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enableContextMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1539)
inline void IWMPPlayer3::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu ) {
    HRESULT _hr = put_enableContextMenu(pbEnableContextMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1540)
inline void IWMPPlayer3::PutuiMode ( _bstr_t pbstrMode ) {
    HRESULT _hr = put_uiMode(pbstrMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1541)
inline _bstr_t IWMPPlayer3::GetuiMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_uiMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1542)
inline VARIANT_BOOL IWMPPlayer3::GetstretchToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_stretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1543)
inline void IWMPPlayer3::PutstretchToFit ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_stretchToFit(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1544)
inline VARIANT_BOOL IWMPPlayer3::GetwindowlessVideo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_windowlessVideo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1545)
inline void IWMPPlayer3::PutwindowlessVideo ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_windowlessVideo(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPPlayer2 wrapper method implementations
//

#pragma implementation_key(1546)
inline VARIANT_BOOL IWMPPlayer2::Getenabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1547)
inline void IWMPPlayer2::Putenabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1548)
inline VARIANT_BOOL IWMPPlayer2::GetfullScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1549)
inline void IWMPPlayer2::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1550)
inline VARIANT_BOOL IWMPPlayer2::GetenableContextMenu ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enableContextMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1551)
inline void IWMPPlayer2::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu ) {
    HRESULT _hr = put_enableContextMenu(pbEnableContextMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1552)
inline void IWMPPlayer2::PutuiMode ( _bstr_t pbstrMode ) {
    HRESULT _hr = put_uiMode(pbstrMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1553)
inline _bstr_t IWMPPlayer2::GetuiMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_uiMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1554)
inline VARIANT_BOOL IWMPPlayer2::GetstretchToFit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_stretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1555)
inline void IWMPPlayer2::PutstretchToFit ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_stretchToFit(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1556)
inline VARIANT_BOOL IWMPPlayer2::GetwindowlessVideo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_windowlessVideo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1557)
inline void IWMPPlayer2::PutwindowlessVideo ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_windowlessVideo(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPPlayer wrapper method implementations
//

#pragma implementation_key(1558)
inline VARIANT_BOOL IWMPPlayer::Getenabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1559)
inline void IWMPPlayer::Putenabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1560)
inline VARIANT_BOOL IWMPPlayer::GetfullScreen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1561)
inline void IWMPPlayer::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1562)
inline VARIANT_BOOL IWMPPlayer::GetenableContextMenu ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_enableContextMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1563)
inline void IWMPPlayer::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu ) {
    HRESULT _hr = put_enableContextMenu(pbEnableContextMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1564)
inline void IWMPPlayer::PutuiMode ( _bstr_t pbstrMode ) {
    HRESULT _hr = put_uiMode(pbstrMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1565)
inline _bstr_t IWMPPlayer::GetuiMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_uiMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPControls2 wrapper method implementations
//

#pragma implementation_key(1566)
inline HRESULT IWMPControls2::Istep ( long lStep ) {
    HRESULT _hr = raw_step(lStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPMedia2 wrapper method implementations
//

#pragma implementation_key(1567)
inline IWMPErrorItemPtr IWMPMedia2::GetError ( ) {
    struct IWMPErrorItem * _result = 0;
    HRESULT _hr = get_Error(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPErrorItemPtr(_result, false);
}

//
// interface IWMPMedia3 wrapper method implementations
//

#pragma implementation_key(1568)
inline long IWMPMedia3::IgetAttributeCountByType ( _bstr_t bstrType, _bstr_t bstrLanguage ) {
    long _result = 0;
    HRESULT _hr = raw_getAttributeCountByType(bstrType, bstrLanguage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1569)
inline _variant_t IWMPMedia3::IgetItemInfoByType ( _bstr_t bstrType, _bstr_t bstrLanguage, long lIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getItemInfoByType(bstrType, bstrLanguage, lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IWMPControls3 wrapper method implementations
//

#pragma implementation_key(1570)
inline long IWMPControls3::GetaudioLanguageCount ( ) {
    long _result = 0;
    HRESULT _hr = get_audioLanguageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1571)
inline long IWMPControls3::IgetAudioLanguageID ( long lIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getAudioLanguageID(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1572)
inline _bstr_t IWMPControls3::IgetAudioLanguageDescription ( long lIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getAudioLanguageDescription(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1573)
inline long IWMPControls3::GetcurrentAudioLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_currentAudioLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1574)
inline void IWMPControls3::PutcurrentAudioLanguage ( long plLangID ) {
    HRESULT _hr = put_currentAudioLanguage(plLangID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1575)
inline long IWMPControls3::GetcurrentAudioLanguageIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_currentAudioLanguageIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1576)
inline void IWMPControls3::PutcurrentAudioLanguageIndex ( long plIndex ) {
    HRESULT _hr = put_currentAudioLanguageIndex(plIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1577)
inline _bstr_t IWMPControls3::IgetLanguageName ( long lLangID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getLanguageName(lLangID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1578)
inline _bstr_t IWMPControls3::GetcurrentPositionTimecode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_currentPositionTimecode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1579)
inline void IWMPControls3::PutcurrentPositionTimecode ( _bstr_t bstrTimecode ) {
    HRESULT _hr = put_currentPositionTimecode(bstrTimecode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPMediaCollection2 wrapper method implementations
//

#pragma implementation_key(1580)
inline IWMPQueryPtr IWMPMediaCollection2::IcreateQuery ( ) {
    struct IWMPQuery * _result = 0;
    HRESULT _hr = raw_createQuery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPQueryPtr(_result, false);
}

#pragma implementation_key(1581)
inline IWMPPlaylistPtr IWMPMediaCollection2::IgetPlaylistByQuery ( struct IWMPQuery * pQuery, _bstr_t bstrMediaType, _bstr_t bstrSortAttribute, VARIANT_BOOL fSortAscending ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_getPlaylistByQuery(pQuery, bstrMediaType, bstrSortAttribute, fSortAscending, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1582)
inline IWMPStringCollectionPtr IWMPMediaCollection2::IgetStringCollectionByQuery ( _bstr_t bstrAttribute, struct IWMPQuery * pQuery, _bstr_t bstrMediaType, _bstr_t bstrSortAttribute, VARIANT_BOOL fSortAscending ) {
    struct IWMPStringCollection * _result = 0;
    HRESULT _hr = raw_getStringCollectionByQuery(bstrAttribute, pQuery, bstrMediaType, bstrSortAttribute, fSortAscending, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPStringCollectionPtr(_result, false);
}

#pragma implementation_key(1583)
inline IWMPPlaylistPtr IWMPMediaCollection2::IgetByAttributeAndMediaType ( _bstr_t bstrAttribute, _bstr_t bstrValue, _bstr_t bstrMediaType ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = raw_getByAttributeAndMediaType(bstrAttribute, bstrValue, bstrMediaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

//
// interface IWMPLibraryServices wrapper method implementations
//

#pragma implementation_key(1584)
inline long IWMPLibraryServices::IgetCountByType ( enum WMPLibraryType wmplt ) {
    long _result = 0;
    HRESULT _hr = raw_getCountByType(wmplt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1585)
inline IWMPLibraryPtr IWMPLibraryServices::IgetLibraryByType ( enum WMPLibraryType wmplt, long lIndex ) {
    struct IWMPLibrary * _result = 0;
    HRESULT _hr = raw_getLibraryByType(wmplt, lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPLibraryPtr(_result, false);
}

//
// interface IWMPLibrary2 wrapper method implementations
//

#pragma implementation_key(1586)
inline _bstr_t IWMPLibrary2::IgetItemInfo ( _bstr_t bstrItemName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_getItemInfo(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPSyncDevice3 wrapper method implementations
//

#pragma implementation_key(1587)
inline HRESULT IWMPSyncDevice3::IestimateSyncSize ( struct IWMPPlaylist * pNonRulePlaylist, struct IWMPPlaylist * pRulesPlaylist ) {
    HRESULT _hr = raw_estimateSyncSize(pNonRulePlaylist, pRulesPlaylist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1588)
inline HRESULT IWMPSyncDevice3::IcancelEstimation ( ) {
    HRESULT _hr = raw_cancelEstimation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPPlaylistCtrl wrapper method implementations
//

#pragma implementation_key(1589)
inline IWMPPlaylistPtr IWMPPlaylistCtrl::GetPlaylist ( ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = get_Playlist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1590)
inline void IWMPPlaylistCtrl::PutPlaylist ( struct IWMPPlaylist * ppdispPlaylist ) {
    HRESULT _hr = put_Playlist(ppdispPlaylist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1591)
inline _bstr_t IWMPPlaylistCtrl::Getcolumns ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1592)
inline void IWMPPlaylistCtrl::Putcolumns ( _bstr_t pbstrColumns ) {
    HRESULT _hr = put_columns(pbstrColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1593)
inline long IWMPPlaylistCtrl::GetcolumnCount ( ) {
    long _result = 0;
    HRESULT _hr = get_columnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1594)
inline _bstr_t IWMPPlaylistCtrl::GetcolumnOrder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_columnOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1595)
inline void IWMPPlaylistCtrl::PutcolumnOrder ( _bstr_t pbstrColumnOrder ) {
    HRESULT _hr = put_columnOrder(pbstrColumnOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1596)
inline VARIANT_BOOL IWMPPlaylistCtrl::GetcolumnsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_columnsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1597)
inline void IWMPPlaylistCtrl::PutcolumnsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_columnsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1598)
inline VARIANT_BOOL IWMPPlaylistCtrl::GetdropDownVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_dropDownVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1599)
inline void IWMPPlaylistCtrl::PutdropDownVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_dropDownVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1600)
inline VARIANT_BOOL IWMPPlaylistCtrl::GetplaylistItemsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_playlistItemsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1601)
inline void IWMPPlaylistCtrl::PutplaylistItemsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_playlistItemsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1602)
inline VARIANT_BOOL IWMPPlaylistCtrl::GetcheckboxesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_checkboxesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1603)
inline void IWMPPlaylistCtrl::PutcheckboxesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_checkboxesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1604)
inline _bstr_t IWMPPlaylistCtrl::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1605)
inline void IWMPPlaylistCtrl::PutbackgroundColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_backgroundColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1606)
inline _bstr_t IWMPPlaylistCtrl::GetforegroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1607)
inline void IWMPPlaylistCtrl::PutforegroundColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_foregroundColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1608)
inline _bstr_t IWMPPlaylistCtrl::GetdisabledItemColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_disabledItemColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1609)
inline void IWMPPlaylistCtrl::PutdisabledItemColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_disabledItemColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1610)
inline _bstr_t IWMPPlaylistCtrl::GetitemPlayingColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_itemPlayingColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1611)
inline void IWMPPlaylistCtrl::PutitemPlayingColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_itemPlayingColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1612)
inline _bstr_t IWMPPlaylistCtrl::GetitemPlayingBackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_itemPlayingBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1613)
inline void IWMPPlaylistCtrl::PutitemPlayingBackgroundColor ( _bstr_t pbstrBackgroundColor ) {
    HRESULT _hr = put_itemPlayingBackgroundColor(pbstrBackgroundColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1614)
inline _bstr_t IWMPPlaylistCtrl::GetbackgroundImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1615)
inline void IWMPPlaylistCtrl::PutbackgroundImage ( _bstr_t pbstrImage ) {
    HRESULT _hr = put_backgroundImage(pbstrImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1616)
inline VARIANT_BOOL IWMPPlaylistCtrl::GetallowItemEditing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_allowItemEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1617)
inline void IWMPPlaylistCtrl::PutallowItemEditing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_allowItemEditing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1618)
inline VARIANT_BOOL IWMPPlaylistCtrl::GetallowColumnSorting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_allowColumnSorting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1619)
inline void IWMPPlaylistCtrl::PutallowColumnSorting ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_allowColumnSorting(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1620)
inline _bstr_t IWMPPlaylistCtrl::GetdropDownList ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_dropDownList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1621)
inline void IWMPPlaylistCtrl::PutdropDownList ( _bstr_t pbstrList ) {
    HRESULT _hr = put_dropDownList(pbstrList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1622)
inline _bstr_t IWMPPlaylistCtrl::GetdropDownToolTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_dropDownToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1623)
inline void IWMPPlaylistCtrl::PutdropDownToolTip ( _bstr_t pbstrToolTip ) {
    HRESULT _hr = put_dropDownToolTip(pbstrToolTip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1624)
inline VARIANT_BOOL IWMPPlaylistCtrl::Getcopying ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_copying(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1625)
inline void IWMPPlaylistCtrl::Putcopying ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_copying(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1626)
inline HRESULT IWMPPlaylistCtrl::Icopy ( ) {
    HRESULT _hr = raw_copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1627)
inline HRESULT IWMPPlaylistCtrl::IabortCopy ( ) {
    HRESULT _hr = raw_abortCopy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1628)
inline HRESULT IWMPPlaylistCtrl::IdeleteSelected ( ) {
    HRESULT _hr = raw_deleteSelected();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1629)
inline HRESULT IWMPPlaylistCtrl::IdeleteSelectedFromLibrary ( ) {
    HRESULT _hr = raw_deleteSelectedFromLibrary();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1630)
inline HRESULT IWMPPlaylistCtrl::ImoveSelectedUp ( ) {
    HRESULT _hr = raw_moveSelectedUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1631)
inline HRESULT IWMPPlaylistCtrl::ImoveSelectedDown ( ) {
    HRESULT _hr = raw_moveSelectedDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1632)
inline HRESULT IWMPPlaylistCtrl::IaddSelectedToPlaylist ( struct IWMPPlaylist * pdispPlaylist ) {
    HRESULT _hr = raw_addSelectedToPlaylist(pdispPlaylist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1633)
inline long IWMPPlaylistCtrl::IgetNextSelectedItem ( long nStartIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getNextSelectedItem(nStartIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1634)
inline long IWMPPlaylistCtrl::IgetNextCheckedItem ( long nStartIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getNextCheckedItem(nStartIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1635)
inline HRESULT IWMPPlaylistCtrl::IsetSelectedState ( long nIndex, VARIANT_BOOL vbSelected ) {
    HRESULT _hr = raw_setSelectedState(nIndex, vbSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1636)
inline HRESULT IWMPPlaylistCtrl::IsetCheckedState ( long nIndex, VARIANT_BOOL vbChecked ) {
    HRESULT _hr = raw_setCheckedState(nIndex, vbChecked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1637)
inline HRESULT IWMPPlaylistCtrl::IsortColumn ( long nIndex ) {
    HRESULT _hr = raw_sortColumn(nIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1638)
inline HRESULT IWMPPlaylistCtrl::IsetColumnResizeMode ( long nIndex, _bstr_t newMode ) {
    HRESULT _hr = raw_setColumnResizeMode(nIndex, newMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1639)
inline HRESULT IWMPPlaylistCtrl::IsetColumnWidth ( long nIndex, long nWidth ) {
    HRESULT _hr = raw_setColumnWidth(nIndex, nWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1640)
inline _bstr_t IWMPPlaylistCtrl::GetitemErrorColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_itemErrorColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1641)
inline void IWMPPlaylistCtrl::PutitemErrorColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_itemErrorColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1642)
inline long IWMPPlaylistCtrl::GetitemCount ( ) {
    long _result = 0;
    HRESULT _hr = get_itemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1643)
inline IWMPMediaPtr IWMPPlaylistCtrl::GetitemMedia ( long nIndex ) {
    struct IWMPMedia * _result = 0;
    HRESULT _hr = get_itemMedia(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

#pragma implementation_key(1644)
inline IWMPPlaylistPtr IWMPPlaylistCtrl::GetitemPlaylist ( long nIndex ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = get_itemPlaylist(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1645)
inline long IWMPPlaylistCtrl::IgetNextSelectedItem2 ( long nStartIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getNextSelectedItem2(nStartIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1646)
inline long IWMPPlaylistCtrl::IgetNextCheckedItem2 ( long nStartIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getNextCheckedItem2(nStartIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1647)
inline HRESULT IWMPPlaylistCtrl::IsetSelectedState2 ( long nIndex, VARIANT_BOOL vbSelected ) {
    HRESULT _hr = raw_setSelectedState2(nIndex, vbSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1648)
inline HRESULT IWMPPlaylistCtrl::IsetCheckedState2 ( long nIndex, VARIANT_BOOL vbChecked ) {
    HRESULT _hr = raw_setCheckedState2(nIndex, vbChecked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1649)
inline _bstr_t IWMPPlaylistCtrl::GetleftStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_leftStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1650)
inline void IWMPPlaylistCtrl::PutleftStatus ( _bstr_t pbstrStatus ) {
    HRESULT _hr = put_leftStatus(pbstrStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1651)
inline _bstr_t IWMPPlaylistCtrl::GetrightStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_rightStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1652)
inline void IWMPPlaylistCtrl::PutrightStatus ( _bstr_t pbstrStatus ) {
    HRESULT _hr = put_rightStatus(pbstrStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1653)
inline VARIANT_BOOL IWMPPlaylistCtrl::GeteditButtonVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_editButtonVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1654)
inline void IWMPPlaylistCtrl::PuteditButtonVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_editButtonVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1655)
inline _bstr_t IWMPPlaylistCtrl::GetdropDownImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_dropDownImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1656)
inline void IWMPPlaylistCtrl::PutdropDownImage ( _bstr_t pbstrImage ) {
    HRESULT _hr = put_dropDownImage(pbstrImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1657)
inline _bstr_t IWMPPlaylistCtrl::GetdropDownBackgroundImage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_dropDownBackgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1658)
inline void IWMPPlaylistCtrl::PutdropDownBackgroundImage ( _bstr_t pbstrImage ) {
    HRESULT _hr = put_dropDownBackgroundImage(pbstrImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1659)
inline float IWMPPlaylistCtrl::GethueShift ( ) {
    float _result = 0;
    HRESULT _hr = get_hueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1660)
inline void IWMPPlaylistCtrl::PuthueShift ( float pVal ) {
    HRESULT _hr = put_hueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1661)
inline float IWMPPlaylistCtrl::Getsaturation ( ) {
    float _result = 0;
    HRESULT _hr = get_saturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1662)
inline void IWMPPlaylistCtrl::Putsaturation ( float pVal ) {
    HRESULT _hr = put_saturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1663)
inline _bstr_t IWMPPlaylistCtrl::GetstatusColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_statusColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1664)
inline void IWMPPlaylistCtrl::PutstatusColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_statusColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1665)
inline VARIANT_BOOL IWMPPlaylistCtrl::GettoolbarVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_toolbarVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1666)
inline void IWMPPlaylistCtrl::PuttoolbarVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_toolbarVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1667)
inline _bstr_t IWMPPlaylistCtrl::GetitemSelectedColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_itemSelectedColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1668)
inline void IWMPPlaylistCtrl::PutitemSelectedColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_itemSelectedColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1669)
inline _bstr_t IWMPPlaylistCtrl::GetitemSelectedFocusLostColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_itemSelectedFocusLostColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1670)
inline void IWMPPlaylistCtrl::PutitemSelectedFocusLostColor ( _bstr_t pbstrFocusLostColor ) {
    HRESULT _hr = put_itemSelectedFocusLostColor(pbstrFocusLostColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1671)
inline _bstr_t IWMPPlaylistCtrl::GetitemSelectedBackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_itemSelectedBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1672)
inline void IWMPPlaylistCtrl::PutitemSelectedBackgroundColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_itemSelectedBackgroundColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1673)
inline _bstr_t IWMPPlaylistCtrl::GetitemSelectedBackgroundFocusLostColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_itemSelectedBackgroundFocusLostColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1674)
inline void IWMPPlaylistCtrl::PutitemSelectedBackgroundFocusLostColor ( _bstr_t pbstrFocusLostColor ) {
    HRESULT _hr = put_itemSelectedBackgroundFocusLostColor(pbstrFocusLostColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1675)
inline _bstr_t IWMPPlaylistCtrl::GetbackgroundSplitColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundSplitColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1676)
inline void IWMPPlaylistCtrl::PutbackgroundSplitColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_backgroundSplitColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline _bstr_t IWMPPlaylistCtrl::GetstatusTextColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_statusTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1678)
inline void IWMPPlaylistCtrl::PutstatusTextColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_statusTextColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPLibraryTreeCtrl wrapper method implementations
//

#pragma implementation_key(1679)
inline VARIANT_BOOL IWMPLibraryTreeCtrl::GetdropDownVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_dropDownVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1680)
inline void IWMPLibraryTreeCtrl::PutdropDownVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_dropDownVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1681)
inline _bstr_t IWMPLibraryTreeCtrl::GetforegroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1682)
inline void IWMPLibraryTreeCtrl::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1683)
inline _bstr_t IWMPLibraryTreeCtrl::GetbackgroundColor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1684)
inline void IWMPLibraryTreeCtrl::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1685)
inline long IWMPLibraryTreeCtrl::GetfontSize ( ) {
    long _result = 0;
    HRESULT _hr = get_fontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1686)
inline void IWMPLibraryTreeCtrl::PutfontSize ( long pVal ) {
    HRESULT _hr = put_fontSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1687)
inline _bstr_t IWMPLibraryTreeCtrl::GetfontStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1688)
inline void IWMPLibraryTreeCtrl::PutfontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_fontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1689)
inline _bstr_t IWMPLibraryTreeCtrl::GetfontFace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_fontFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1690)
inline void IWMPLibraryTreeCtrl::PutfontFace ( _bstr_t pVal ) {
    HRESULT _hr = put_fontFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1691)
inline _bstr_t IWMPLibraryTreeCtrl::Getfilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1692)
inline void IWMPLibraryTreeCtrl::Putfilter ( _bstr_t pVal ) {
    HRESULT _hr = put_filter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1693)
inline _bstr_t IWMPLibraryTreeCtrl::GetexpandState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_expandState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1694)
inline void IWMPLibraryTreeCtrl::PutexpandState ( _bstr_t pVal ) {
    HRESULT _hr = put_expandState(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1695)
inline IWMPPlaylistPtr IWMPLibraryTreeCtrl::GetPlaylist ( ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = get_Playlist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1696)
inline void IWMPLibraryTreeCtrl::PutPlaylist ( struct IWMPPlaylist * ppPlaylist ) {
    HRESULT _hr = put_Playlist(ppPlaylist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1697)
inline IWMPPlaylistPtr IWMPLibraryTreeCtrl::GetselectedPlaylist ( ) {
    struct IWMPPlaylist * _result = 0;
    HRESULT _hr = get_selectedPlaylist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1698)
inline IWMPMediaPtr IWMPLibraryTreeCtrl::GetselectedMedia ( ) {
    struct IWMPMedia * _result = 0;
    HRESULT _hr = get_selectedMedia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}
