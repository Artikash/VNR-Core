/** omajinai.qml
 *  9/29/2012 jichi
 */
import QtQuick 1.1
import QtDesktop 0.1 as Desktop
import org.sakuradite.reader 1.0 as Plugin
import '../../../imports/qmleffects' as Effects
import '../../../js/util.js' as Util
import '../../../js/sakurakit.js' as Sk

Item { id: root_
  implicitWidth: 500; implicitHeight: 400
  property color effectColor: '#2d5f5f'
  property real velocity: 0.08

  // - Private -

  clip: true

  //property variant freeway: [] // [bool free] Deficiency in QML
  property QtObject lanes: ListModel {} // [int:bool free]
  property int _LANE_HEIGHT: 30

  Plugin.SubtitleEditorManagerProxy { id: subedit_ }

  Plugin.BBCodeParser { id: bbcode_ }
  function renderBBCode(t) {
    return ~t.indexOf('[') ? bbcode_.parse(t) : t
  }

  //Component.onCompleted: console.log("omajinai.qml: pass")
  Repeater { id: repeater_
    anchors.fill: parent
    model: ListModel { id: model_ }

    delegate: Item { id: danmaku_
      width: text_.width
      height: text_.height

      y: _LANE_HEIGHT * model.lane
      x: root_.width
      property real currentX

      Component.onCompleted: {
        model.comment.deletedChanged.connect(remove)
        start()
      }

      //states: State { name: '*'
      //  PropertyChanges { target: danmaku_; x: root_.width }
      //}

      function remove() {
        root_.lanes.get(model.lane).free = true
        model_.remove(model.index)
      }

      SequentialAnimation { id: runningAni_
        NumberAnimation {
          target: danmaku_; property: 'x'; to: -danmaku_.width
          // The longer the danmaku is, the faster the velocity is
          duration: Math.max(1,
            (danmaku_.currentX + danmaku_.width/4) / root_.velocity)
        }
        ScriptAction { script: danmaku_.remove() }
      }

      //function pause() {
      //  if (runningAni_.running && !runningAni_.paused)
      //    runningAni_.pause()
      //}
      //function resume() {
      //  if (runningAni_.paused)
      //    runningAni_.resume()
      //}
      function resume() { start() }
      function pause() { stop() }
      function stop() {
        if (runningAni_.running)
          runningAni_.stop()
      }
      function start() {
        if (!runningAni_.running) {
          currentX = x
          runningAni_.start()
        }
      }

      Text {  id: text_
        text: renderText(model.comment.text)
        font.pixelSize: 20
        color: 'snow'

        effect: Effects.TextShadow {
          blurRadius: 8; offset: '1,1'
          color: toolTip_.containsMouse ? 'red' : root_.effectColor
        }

        wrapMode: Text.NoWrap
        textFormat: Text.RichText
        font.family: Util.fontFamilyForLanguage(model.comment.language)
        font.bold: true //Util.isAsianLanguage(model.comment.language)
        //font.italic: Util.isLatinLanguage(model.comment.language)

        function renderText(t) {
          return '<span style="background-color:rgba(0,0,0,10)">' + renderBBCode(t) + '</span>'
        }
      }

      MouseArea { id: mouse_
        anchors.fill: parent
        acceptedButtons: Qt.LeftButton | Qt.RightButton
        drag.target: danmaku_; drag.axis: Drag.XandYAxis
        onDoubleClicked: danmaku_.resume()
        onClicked: {
          danmaku_.pause()
          if (mouse.button === Qt.RightButton) {
            var gp = mapToItem(null, x + mouse.x, y + mouse.y)
            menu_.popup(model, gp.x, gp.y)
          }
        }
      }

      Desktop.TooltipArea { id: toolTip_
        anchors.fill: parent
        text: commentSummary(model.comment)
      }

      function commentSummary(c) {
        var us = '@' + c.userName
        var lang = c.language
        lang = "(" + lang + ")"
        var sec = c.updateTimestamp > 0 ? c.updateTimestamp : c.timestamp
        var ts = Util.timestampToString(sec)
        return us + lang + ' ' + ts
      }
    }
  }

  Plugin.OmajinaiBean { id: bean_
    Component.onCompleted: {
      bean_.showComment.connect(root_.show)
      bean_.clear.connect(root_.clear)
    }
  }

  Desktop.Menu { id: menu_
    //Desktop.MenuItem {
    //  text: Sk.tr("Pause") + " (" + Sk.tr("Click") + ")"
    //  onTriggered: menu_.getItem().pause()
    //}
    Desktop.MenuItem {
      text: Sk.tr("Resume") + " (" + Sk.tr("Double-click") + ")"
      onTriggered: menu_.getItem().resume()
    }
    Desktop.MenuItem {
      text: Sk.tr("Edit")
      onTriggered: subedit_.showComment(menu_.getComment())
    }
    Desktop.Separator {}
    Desktop.MenuItem {
      text: Sk.tr("Remove")
      onTriggered: menu_.getItem().remove()
    }

    property variant modelData
    function getItem() { return repeater_.itemAt(modelData.index) }
    function getComment() { return modelData.comment }

    function popup(data, x, y) {
      modelData = data
      showPopup(x, y)
    }
  }


  // - Actions -
  function createLane() { return {free:false} }

  function getLane() { // return int lane
    for (var i = 0; i < lanes.count; ++i) {
      var l = lanes.get(i)
      if (l.free) {
        l.free = false
        return i
      }
    }
    lanes.append(createLane())
    return lanes.count - 1
  }

  function show(comment) {
    model_.append({comment:comment, lane:getLane()})
  }

  function clear() {
    //listModel_.clear()
    console.log("omajinai.qml:clear: pass")
  }
}
