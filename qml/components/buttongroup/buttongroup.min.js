var root,checkHandlers=[],visibleButtons=[],nonVisibleButtons=[],direction;function create(b,a){root=b;direction=a.direction||Qt.Horizontal;root.childrenChanged.connect(rebuild);build()}function hasChecked(b){return b&&b.hasOwnProperty("checked")}function destroy(){root.childrenChanged.disconnect(rebuild);cleanup()}
function build(){visibleButtons=[];nonVisibleButtons=[];for(var b=0,a;a=root.children[b];++b)hasChecked(a)&&(a.visibleChanged.connect(rebuild),a.visible?(visibleButtons.push(a),root.exclusive&&a.hasOwnProperty("checkable")&&(a.checkable=!0),root.exclusive&&(a.checked=!1,checkHandlers.push(checkExclusive(a)),a.checkedChanged.connect(checkHandlers[checkHandlers.length-1]))):nonVisibleButtons.push(a));0!=visibleButtons.length&&(root.checkedButton?root.checkedButton.checked=!0:root.exclusive&&(root.checkedButton=
visibleButtons[0],root.checkedButton.checked=!0))}function cleanup(){visibleButtons.forEach(function(b,a){checkHandlers[a]&&b.checkedChanged.disconnect(checkHandlers[a]);b.visibleChanged.disconnect(rebuild)});checkHandlers=[];nonVisibleButtons.forEach(function(b,a){b.visibleChanged.disconnect(rebuild)})}function rebuild(){void 0!=root&&(cleanup(),build())}
function resizeChildren(){if(direction==Qt.Horizontal){var b=root.width%visibleButtons,a=(root.width-b)/visibleButtons;visibleButtons.forEach(function(c,d){c&&c.visible&&(c.width=a+(0<b?1:0),0<b&&b--)})}}function checkExclusive(b){return function(){for(var a=0,c;c=visibleButtons[a];++a)c.checked!=(b===c)&&(c.checkedChanged.disconnect(checkHandlers[a]),c.checked=!c.checked,c.checkedChanged.connect(checkHandlers[a]));root.checkedButton=b}};
